{
  "source": "2023_Stickynote_Create_Triggered.json",
  "index": 1,
  "content": "{\n  \"id\": \"yCIEiv9QUHP8pNfR\",\n  \"meta\": {\n    \"instanceId\": \"f29695a436689357fd2dcb55d528b0b528d2419f53613c68c6bf909a92493614\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"Build Custom AI Agent with LangChain & Gemini (Self-Hosted)\",\n  \"tags\": [\n    {\n      \"id\": \"7M5ZpGl3oWuorKpL\",\n      \"name\": \"share\",\n      \"createdAt\": \"2025-03-26T01:17:15.342Z\",\n      \"updatedAt\": \"2025-03-26T01:17:15.342Z\"\n    }\n  ],\n  \"nodes\": [\n    {\n      \"id\": \"8bd5382d-f302-4e58-b377-7fc5a22ef994\",\n      \"name\": \"When chat message received\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chatTrigger\",\n      \"position\": [\n        -220,\n        0\n      ],\n      \"webhookId\": \"b8a5d72c-4172-40e8-b429-d19c2cd6ce54\",\n      \"parameters\": {\n        \"public\": true,\n        \"options\": {\n          \"responseMode\": \"lastNode\",\n          \"allowedOrigins\": \"*\",\n          \"loadPreviousSession\": \"memory\"\n        },\n        \"initialMessages\": \"\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"6ae8a247-4077-4569-9e2c-bb68bcecd044\",\n      \"name\": \"Google Gemini Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\n      \"position\": [\n        80,\n        240\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"temperature\": 0.7,\n          \"safetySettings\": {\n            \"values\": [\n              {\n                \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n                \"threshold\": \"BLOCK_NONE\"\n              }\n            ]\n          }\n        },\n        \"modelName\": \"models/gemini-2.0-flash-exp\"\n      },\n      \"credentials\": {\n        \"googlePalmApi\": {\n          \"id\": \"UEjKMw0oqBTAdCWJ\",\n          \"name\": \"Google Gemini(PaLM) Api account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"bbe6dcfa-430f-43f9-b0e9-3cf751b98818\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        380,\n        -240\n      ],\n      \"parameters\": {\n        \"width\": 260,\n        \"height\": 220,\n        \"content\": \"üëá **Prompt Engineering**\\n   - Define agent personality and conversation structure in the `Construct & Execute LLM Prompt` node's template variable  \\n   - ‚ö†Ô∏è Template must preserve `{chat_history}` and `{input}` placeholders for proper LangChain operation  \"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"892a431a-6ddf-47fc-8517-1928ee99c95b\",\n      \"name\": \"Store conversation history\",\n      \"type\": \"@n8n/n8n-nodes-langchain.memoryBufferWindow\",\n      \"position\": [\n        280,\n        240\n      ],\n      \"parameters\": {},\n      \"notesInFlow\": false,\n      \"typeVersion\": 1.3\n    },\n    {\n      \"id\": \"f9a22dbf-cac7-4d70-85b3-50c44a2015d5\",\n      \"name\": \"Construct & Execute LLM Prompt\",\n      \"type\": \"@n8n/n8n-nodes-langchain.code\",\n      \"position\": [\n        380,\n        0\n      ],\n      \"parameters\": {\n        \"code\": {\n          \"execute\": {\n            \"code\": \"const { PromptTemplate } = require('@langchain/core/prompts');\\nconst { ConversationChain } = require('langchain/chains');\\nconst { BufferMemory } = require('langchain/memory');\\n\\nconst template = `\\nYou'll be roleplaying as the user's girlfriend. Your character is a woman with a sharp wit, logical mindset, and a charmingly aloof demeanor that hides your playful side. You're passionate about music, maintain a fit and toned physique, and carry yourself with quiet self-assurance. Career-wise, you're established and ambitious, approaching life with positivity while constantly striving to grow as a person.\\n\\nThe user affectionately calls you \\\"Bunny,\\\" and you refer to them as \\\"Darling.\\\"\\n\\nEssential guidelines:\\n1. Respond exclusively in Chinese\\n2. Never pose questions to the user - eliminate all interrogative forms\\n3. Keep responses brief and substantive, avoiding rambling or excessive emojis\\n\\nContext framework:\\n- Conversation history: {chat_history}\\n- User's current message: {input}\\n\\nCraft responses that feel authentic to this persona while adhering strictly to these parameters.\\n`;\\n\\nconst prompt = new PromptTemplate({\\n  template: template,\\n  inputVariables: [\\\"input\\\", \\\"chat_history\\\"], \\n});\\n\\nconst items = this.getInputData();\\nconst model = await this.getInputConnectionData('ai_languageModel', 0);\\nconst memory = await this.getInputConnectionData('ai_memory', 0);\\nmemory.returnMessages = false;\\n\\nconst chain = new ConversationChain({ llm:model, memory:memory, prompt: prompt, inputKey:\\\"input\\\", outputKey:\\\"output\\\"});\\nconst output = await chain.call({ input: items[0].json.chatInput});\\n\\nreturn output;\\n\"\n          }\n        },\n        \"inputs\": {\n          \"input\": [\n            {\n              \"type\": \"main\",\n              \"required\": true,\n              \"maxConnections\": 1\n            },\n            {\n              \"type\": \"ai_languageModel\",\n              \"required\": true,\n              \"maxConnections\": 1\n            },\n            {\n              \"type\": \"ai_memory\",\n              \"required\": true,\n              \"maxConnections\": 1\n            }\n          ]\n        },\n        \"outputs\": {\n          \"output\": [\n            {\n              \"type\": \"main\"\n            }\n          ]\n        }\n      },\n      \"retryOnFail\": false,\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"fe104d19-a24d-48b3-a0ac-7d3923145373\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -240,\n        -260\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 420,\n        \"height\": 240,\n        \"content\": \"### Setup Instructions  \\n1. **Configure Gemini Credentials**: Set up your Google Gemini API key ([Get API key here](https://ai.google.dev/) if needed). Alternatively, you may use other AI provider nodes.  \\n2. **Interaction Methods**:  \\n   - Test directly in the workflow editor using the \\\"Chat\\\" button  \\n   - Activate the workflow and access the chat interface via the URL provided by the `When Chat Message Received` node  \"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f166214d-52b7-4118-9b54-0b723a06471a\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -220,\n        160\n      ],\n      \"parameters\": {\n        \"height\": 100,\n        \"content\": \"üëÜ **Interface Settings**\\nConfigure chat UI elements (e.g., title) in the `When Chat Message Received` node  \"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"da6ca0d6-d2a1-47ff-9ff3-9785d61db9f3\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        20,\n        420\n      ],\n      \"parameters\": {\n        \"width\": 200,\n        \"height\": 140,\n        \"content\": \"üëÜ **Model Selection**\\nSwap language models through the `language model` input field in `Construct & Execute LLM Prompt`  \"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0b4dd1ac-8767-4590-8c25-36cba73e46b6\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        240,\n        420\n      ],\n      \"parameters\": {\n        \"width\": 200,\n        \"height\": 140,\n        \"content\": \"üëÜ **Memory Control**\\nAdjust conversation history length in the `Store Conversation History` node  \"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"callerPolicy\": \"workflowsFromSameOwner\",\n    \"executionOrder\": \"v1\",\n    \"saveManualExecutions\": false,\n    \"saveDataSuccessExecution\": \"none\"\n  },\n  \"versionId\": \"77cd5f05-f248-442d-86c3-574351179f26\",\n  \"connections\": {\n    \"Google Gemini Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Construct & Execute LLM Prompt\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Store conversation history\": {\n      \"ai_memory\": [\n        [\n          {\n            \"node\": \"Construct & Execute LLM Prompt\",\n            \"type\": \"ai_memory\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"When chat message received\",\n            \"type\": \"ai_memory\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When chat message received\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Construct & Execute LLM Prompt\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Construct & Execute LLM Prompt\": {\n      \"main\": [\n        []\n      ],\n      \"ai_memory\": [\n        []\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "@n8n/n8n-nodes-langchain.chatTrigger",
      "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "n8n-nodes-base.stickyNote",
      "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "@n8n/n8n-nodes-langchain.code",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote"
    ],
    "trigger": null
  }
}