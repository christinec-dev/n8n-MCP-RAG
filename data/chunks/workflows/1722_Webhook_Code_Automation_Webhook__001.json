{
  "source": "1722_Webhook_Code_Automation_Webhook.json",
  "index": 1,
  "content": "{\n  \"id\": \"V1vbO2m79cFNH59h\",\n  \"meta\": {\n    \"instanceId\": \"255b605d49a6677a536746e05401de51bb4c62e65036d9acdb9908f6567f0361\"\n  },\n  \"name\": \"Basic PDF Digital Sign Service\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"a3aa7495-e5a8-4b7f-882a-e642fae414b8\",\n      \"name\": \"Validate Key Gen Params\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        -220,\n        220\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Check required parameters for key generation\\nconst requiredParams = [\\n  'subjectCN', 'issuerCN', 'serialNumber', \\n  'validFrom', 'validTo', 'password'\\n];\\n\\nlet missingParams = [];\\nconst requestBody = $input.item.json.body || {}; // Access the body object\\n\\nfor (const param of requiredParams) {\\n  if (!requestBody[param]) {\\n    missingParams.push(param);\\n  }\\n}\\n\\nif (missingParams.length > 0) {\\n  return {\\n    json: {\\n      success: false,\\n      message: `Missing required parameters: ${missingParams.join(', ')}`\\n    }\\n  };\\n}\\n\\n// Set default output directory if not provided\\nconst outputDir = $input.item.json.keyPath || '/tmp';\\nconst timestamp = new Date().getTime();\\nconst outputPfx = `${outputDir}certificate_${timestamp}.pfx`;\\nconst outputPrivateKey = `${outputDir}private_${timestamp}.key`;\\nconst outputCertPem = `${outputDir}certificate_${timestamp}.pem`;\\n\\nreturn {\\n  json: {\\n    ...requestBody,\\n    success: true,\\n    outputDir,\\n    outputPfx,\\n    outputPrivateKey,\\n    outputCertPem\\n  }\\n};\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"6a463b95-04e4-421d-b6e0-46fb98c85e20\",\n      \"name\": \"Validate PDF Sign Params\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        -220,\n        380\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Check required parameters for PDF signing\\nconst requiredParams = ['inputPdf', 'pfxFile', 'pfxPassword'];\\n\\n// Access the body object from input\\nconst requestBody = $input.item.json.body || {}; \\n\\nlet missingParams = [];\\nfor (const param of requiredParams) {\\n  if (!requestBody[param]) {\\n    missingParams.push(param);\\n  }\\n}\\n\\nif (missingParams.length > 0) {\\n  return {\\n    json: {\\n      success: false,\\n      message: `Missing required parameters: ${missingParams.join(', ')}`\\n    }\\n  };\\n}\\n\\n// Set default output directory if not provided\\nconst pdfDir = $input.item.json.pdfPath || '/tmp';\\nconst keyDir = $input.item.json.keyPath || '/tmp';\\nconst outputDir = $input.item.json.pdfPath || '/tmp';\\n\\nconst timestamp = new Date().getTime();\\nconst inputPdfPath = `${pdfDir}${requestBody.inputPdf}`;\\nconst pfxFilePath = `${keyDir}${requestBody.pfxFile}`;\\nconst outputPdfPath = `${pdfDir}signed_${timestamp}.pdf`;\\n\\nreturn {\\n  json: {\\n    ...requestBody,\\n    success: true,\\n    outputDir,\\n    inputPdfPath,\\n    pfxFilePath,\\n    outputPdfPath\\n  }\\n};\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"cec07784-a42b-4443-ad8e-1bd7686558c3\",\n      \"name\": \"Validate PDF Upload\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        80,\n        -440\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Check required parameters for PDF upload\\nconst requiredParams = ['fileData'];\\n\\nlet missingParams = [];\\nfor (const param of requiredParams) {\\n  if (!$input.item.json[param]) {\\n    missingParams.push(param);\\n  }\\n}\\n\\nif (missingParams.length > 0) {\\n  return {\\n    json: {\\n      success: false,\\n      message: `Missing required parameters: ${missingParams.join(', ')}`\\n    }\\n  };\\n}\\n\\n// Set default output directory if not provided\\nconst outputDir = $input.item.json.outputDir || '/tmp';\\nconst timestamp = new Date().getTime();\\nconst outputPath = $input.item.json.fileName \\n  ? `${outputDir}/${$input.item.json.fileName}` \\n  : `${outputDir}/uploaded_pdf_${timestamp}.pdf`;\\n\\nreturn {\\n  json: {\\n    ...$input.item.json,\\n    success: true,\\n    outputDir,\\n    outputPath\\n  }\\n};\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"1b9304fd-f31d-45c7-8344-01c779e86f0d\",\n      \"name\": \"Validate Key Upload\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        80,\n        -140\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Check required parameters for key upload\\nconst requiredParams = ['fileData'];\\n\\nlet missingParams = [];\\nfor (const param of requiredParams) {\\n  if (!$input.item.json[param]) {\\n    missingParams.push(param);\\n  }\\n}\\n\\nif (missingParams.length > 0) {\\n  return {\\n    json: {\\n      success: false,\\n      message: `Missing required parameters: ${missingParams.join(', ')}`\\n    }\\n  };\\n}\\n\\n// Set default output directory if not provided\\nconst outputDir = $input.item.json.outputDir || '/tmp';\\nconst timestamp = new Date().getTime();\\nconst outputPath = $input.item.json.fileName \\n  ? `${outputDir}/${$input.item.json.fileName}` \\n  : `${outputDir}/uploaded_key_${timestamp}.pfx`;\\n\\nreturn {\\n  json: {\\n    ...$input.item.json,\\n    success: true,\\n    outputDir,\\n    outputPath\\n  }\\n};\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"efd59edb-6952-4165-ab21-745e03db74eb\",\n      \"name\": \"Generate Keys\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        20,\n        220\n      ],\n      \"parameters\": {\n        \"jsCode\": \"console.log(\\\"!!!!!!!!!\\\" + process.env.NODE_PATH);\\n\\n// Key Generation Code\\nconst forge = require('node-forge');\\nconst fs = require('fs');\\n\\n// Get parameters from input\\nconst subjectCN = $input.item.json.subjectCN;\\nconst issuerCN = $input.item.json.issuerCN;\\nconst serialNumber = $input.item.json.serialNumber;\\nconst validFrom = $input.item.json.validFrom;\\nconst validTo = $input.item.json.validTo;\\nconst pfxPassword = $input.item.json.password;\\nconst outputPfx = $input.item.json.outputPfx;\\nconst outputPrivateKey = $input.item.json.outputPrivateKey;\\nconst outputCertPem = $input.item.json.outputCertPem;\\n\\ntry {\\n  // Generate a key pair\\n  const keys = forge.pki.rsa.generateKeyPair(2048);\\n  const privateKey = keys.privateKey;\\n  const publicKey = keys.publicKey;\\n\\n  // Create a certificate\\n  const cert = forge.pki.createCertificate();\\n  cert.publicKey = publicKey;\\n  cert.serialNumber = serialNumber;\\n\\n  // Parse date strings (format: YYYYMMDDHHMMSS)\\n  const parseDate = (dateStr) => {\\n    const year = parseInt(dateStr.substring(0, 4));\\n    const month = parseInt(dateStr.substring(4, 6)) - 1; // JS months are 0-based\\n    const day = parseInt(dateStr.substring(6, 8));\\n    const hour = parseInt(dateStr.substring(8, 10));\\n    const minute = parseInt(dateStr.substring(10, 12));\\n    const second = parseInt(dateStr.substring(12, 14));\\n    \\n    return new Date(year, month, day, hour, minute, second);\\n  };\\n\\n  cert.validity.notBefore = parseDate(validFrom);\\n  cert.validity.notAfter = parseDate(validTo);\\n\\n  const attrs = [{\\n    name: 'commonName',\\n    value: subjectCN\\n  }, {\\n    name: 'countryName',\\n    value: 'US'\\n  }, {\\n    shortName: 'ST',\\n    value: 'State'\\n  }, {\\n    name: 'localityName',\\n    value: 'City'\\n  }, {\\n    name: 'organizationName',\\n    value: 'Organization'\\n  }, {\\n    shortName: 'OU',\\n    value: 'Test'\\n  }];\\n\\n  cert.setSubject(attrs);\\n  cert.setIssuer(attrs); // Self-signed, so issuer = subject\\n\\n  // Sign the certificate with the private key\\n  cert.sign(privateKey, forge.md.sha256.create());\\n\\n  // Convert to PEM format\\n  const pemCert = forge.pki.certificateToPem(cert);\\n  const pemPrivateKey = forge.pki.privateKeyToPem(privateKey);\\n\\n  // Create a PKCS#12 (PFX) file\\n  const p12Asn1 = forge.pkcs12.toPkcs12Asn1(\\n    privateKey, \\n    [cert], \\n    pfxPassword,\\n    { generateLocalKeyId: true, friendlyName: subjectCN }\\n  );\\n\\n  const p12Der = forge.asn1.toDer(p12Asn1).getBytes();\\n  const p12b64 = forge.util.encode64(p12Der);\\n\\n  // Save files\\n  fs.writeFileSync(outputPrivateKey, pemPrivateKey);\\n  fs.writeFileSync(outputCertPem, pemCert);\\n  fs.writeFileSync(outputPfx, forge.util.decode64(p12b64), { encoding: 'binary' });\\n\\n  return {\\n    json: {\\n      success: true,\\n      message: \\\"Certificate and keys generated successfully\\\",\\n      fileName: outputPfx.split('/').pop(),\\n      filePaths: {\\n        pfx: outputPfx,\\n        privateKey: outputPrivateKey,\\n        certificate: outputCertPem\\n      },\\n      fileNames: {\\n        pfx: outputPfx.split('/').pop(),\\n        privateKey: outputPrivateKey.split('/').pop(),\\n        certificate: outputCertPem.split('/').pop()\\n      }\\n    }\\n  };\\n} catch (error) {\\n  return {\\n    json: {\\n      success: false,\\n      message: `Error generating keys: ${error.message}`,\\n      error: error.stack\\n    }\\n  };\\n}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"6834b314-dd66-429f-9264-6eba74c5984e\",\n      \"name\": \"Sign PDF\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        20,\n        380\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// PDF Signing Code\\nconst fs = require('fs');\\nconst forge = require('node-forge');\\nconst { SignPdf } = require('@signpdf/signpdf');\\nconst { P12Signer } = require('@signpdf/signer-p12');\\nconst { plainAddPlaceholder } = require('@signpdf/placeholder-plain');\\n\\n// Get parameters from input\\n// const inputPdfBase64 = $input.item.json.inputPdf;\\n// const pfxFileBase64 = $input.item.json.pfxFile;\\nconst pfxPassword = $input.item.json.pfxPassword;\\nconst inputPdfPath = $input.item.json.inputPdfPath;\\nconst pfxFilePath = $input.item.json.pfxFilePath;\\nconst outputPdfPath = $input.item.json.outputPdfPath;\\n\\ntry {\\n    // Read the PDF\\n    const pdfBuffer = fs.readFileSync(inputPdfPath);\\n\\n    // Add a signature placeholder\\n    const pdfWithPlaceholder = plainAddPlaceholder({\\n      pdfBuffer,\\n      reason: 'Digital Signature',\\n      contactInfo: 'info@example.com',\\n      location: 'New York, USA',\\n      signatureLength: 8192 // Ensure enough space for signature\\n    });\\n    \\n    // Read the P12 file\\n    const p12Buffer = fs.readFileSync(pfxFilePath);\\n\\n    // Create a signer instance\\n    const signer = new P12Signer(p12Buffer, {\\n      passphrase: pfxPassword\\n    });\\n    \\n    // Create SignPdf instance and sign the PDF\\n    const signPdfInstance = new SignPdf();\\n    const signedPdf = await signPdfInstance.sign(pdfWithPlaceholder, signer);\\n    \\n    // Write the signed PDF to file\\n    fs.writeFileSync(outputPdfPath, signedPdf);\\n    console.log(`PDF successfully signed: ${outputPdfPath}`);\\n\\n  return {\\n    json: {\\n      success: true,\\n      message: \\\"PDF successfully signed\\\",\\n      filePath: outputPdfPath,\\n      fileName: outputPdfPath.split('/').pop()\\n    }\\n  };\\n} catch (error) {\\n  return {\\n    json: {\\n      success: false,\\n      message: `Error signing PDF: ${error.message}`,\\n      error: error.stack\\n    }\\n  };\\n}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"80e56344-b037-4c4f-8f18-b419e9c7516b\",\n      \"name\": \"Prepare Success Response\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1380,\n        40\n      ],\n      \"parameters\": {\n        \"values\": {\n          \"string\": [\n            {\n              \"name\": \"serverFileName\",\n              \"value\": \"={{ $json.fileName }}\"\n            }\n          ],\n          \"boolean\": [\n            {\n              \"name\": \"success\",\n              \"value\": true\n            }\n          ]\n        },\n        \"options\": {},\n        \"keepOnlySet\": true\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e32d1e3e-6877-4c1f-b46a-0c3c67fba609\",\n      \"name\": \"Switch Operation\",\n      \"type\": \"n8n-nodes-base.switch\",\n      \"position\": [\n        -520,\n        200\n      ],\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"outputKey\": \"upload\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"operator\": {\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $json.body.method }}\",\n                    \"rightValue\": \"upload\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"genKey\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"4ac6de12-4cb9-454e-a2b8-ebc879e430ba\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $json.body.method }}\",\n                    \"rightValue\": \"genKey\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"signPdf\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"d8fca3d7-e1da-486e-b6bb-01a676d888cb\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $json.body.method }}\",\n                    \"rightValue\": \"signPdf\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"download\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"6ae9a589-9208-48b0-873b-2b3c4db22718\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $json.body.method }}\",\n                    \"rightValue\": \"download\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"typeVersion\": 3.2\n    },\n    {\n      \"id\": \"f28cb401-f180-4877-9440-aeb0c9f07791\",\n      \"name\": \"Switch Upload Type\",\n      \"type\": \"n8n-nodes-base.switch\",\n      \"position\": [\n        -100,\n        -300\n      ],\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"outputKey\": \"pdfDoc\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"operator\": {\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $json.body.uploadType }}\",\n                    \"rightValue\": \"pdfDoc\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"signKey\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"4790b1de-5541-4a46-a46a-708085c4c0a1\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $json.body.uploadType }}\",\n                    \"rightValue\": \"signKey\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"typeVersion\": 3.2\n    },\n    {\n      \"id\": \"5aa1d5f3-66d4-4440-a953-6e453d00b757\",\n      \"name\": \"Prepare input params\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -280,\n        -300\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"stripBinary\": true\n        },\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"b2323096-8db7-4c5a-8f52-8902f0e18785\",\n              \"name\": \"fileData\",\n              \"type\": \"object\",\n              \"value\": \"={{ $('API POST Endpoint').item.binary }}\"\n            },\n            {\n              \"id\": \"7d2593ba-8582-42cb-8312-6c11be5fbcbf\",\n              \"name\": \"uniqueFileName\",\n              \"type\": \"string\",\n              \"value\": \"={{ 'file_' + $now.toMillis() + '.' + $('API POST Endpoint').item.binary.fileData.mimeType.split('/')[1].replace(/\\\\n/g, '').trim() }}\"\n            }\n          ]\n        },\n        \"includeOtherFields\": true\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"ae983277-f9cf-43b3-86ef-1135919f976c\",\n      \"name\": \"set file path\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -700,\n        220\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"7378e581-86ac-43bc-b7c4-7faeef848cd8\",\n              \"name\": \"pdfPath\",\n              \"type\": \"string\",\n              \"value\": \"/data/files/\"\n            },\n            {\n              \"id\": \"f6592b74-6238-4bb7-9b8b-bbde240f2260\",\n              \"name\": \"keyPath\",\n              \"type\": \"string\",\n              \"value\": \"/data/files/\"\n            }\n          ]\n        },\n        \"includeOtherFields\": true\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"2667149c-8d3b-4772-be8c-a01c1a8efa6f\",\n      \"name\": \"Convert PDF to File\",\n      \"type\": \"n8n-nodes-base.convertToFile\",\n      \"position\": [\n        260,\n        -440\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"fileName\": \"={{ $json.body.fileName }}\",\n          \"mimeType\": \"={{ $json.fileData.fileData.mimeType }}\"\n        },\n        \"operation\": \"toBinary\",\n        \"sourceProperty\": \"fileData.fileData.data\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"6559070f-e071-4e3a-ad3b-87911032358f\",\n      \"name\": \"Write PDF File to Disk\",\n      \"type\": \"n8n-nodes-base.readWriteFile\",\n      \"position\": [\n        440,\n        -440\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"append\": false\n        },\n        \"fileName\": \"={{ $('set file path').item.json.pdfPath }}{{ $('Prepare input params').item.json.uniqueFileName }}\",\n        \"operation\": \"write\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0f6dfb44-8d83-4539-bec8-4aa4066c42bb\",\n      \"name\": \"Read PDF File from Disk\",\n      \"type\": \"n8n-nodes-base.readWriteFile\",\n      \"position\": [\n        620,\n        -440\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fileSelector\": \"={{ $json.fileName }}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"59e18825-dd53-4b09-aefc-0c567ada7f1a\",\n      \"name\": \"Convert PFX to File\",\n      \"type\": \"n8n-nodes-base.convertToFile\",\n      \"position\": [\n        260,\n        -140\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"fileName\": \"={{ $json.body.fileName }}\",\n          \"mimeType\": \"={{ $json.fileData.fileData.mimeType }}\"\n        },\n        \"operation\": \"toBinary\",\n        \"sourceProperty\": \"fileData.fileData.data\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"d079d173-5c68-4b57-9efd-29a3ec89b6c0\",\n      \"name\": \"Write PFX File to Disk\",\n      \"type\": \"n8n-nodes-base.readWriteFile\",\n      \"position\": [\n        440,\n        -140\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"append\": false\n        },\n        \"fileName\": \"={{ $('set file path').item.json.pdfPath }}{{ $('Prepare input params').item.json.uniqueFileName }}\",\n        \"operation\": \"write\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"a2517543-fa29-4097-8f69-0c8cea6f9e07\",\n      \"name\": \"Read PFX File from Disk\",\n      \"type\": \"n8n-nodes-base.readWriteFile\",\n      \"position\": [\n        620,\n        -140\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fileSelector\": \"={{ $json.fileName }}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2ec5c8cd-c9f5-4008-988b-ab724b9d8a0f\",\n      \"name\": \"Check PDF file is OK\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        800,\n        -380\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"8afd6a42-b651-4905-8339-92607d4b59cc\",\n              \"name\": \"success\",\n              \"type\": \"boolean\",\n              \"value\": \"={{ $json.fileName  ===  $('Prepare input params').item.json.uniqueFileName }}\"\n            },\n            {\n              \"id\": \"d0125043-e398-47b2-9f9f-156b33c92cc4\",\n              \"name\": \"fileName\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.fileName }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"2de3d4d5-6654-4019-b05a-2d1dc48c016f\",\n      \"name\": \"Check PFX file is OK\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        800,\n        -220\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"8afd6a42-b651-4905-8339-92607d4b59cc\",\n              \"name\": \"success\",\n              \"type\": \"boolean\",\n              \"value\": \"={{ $json.fileName  ===  $('Prepare input params').item.json.uniqueFileName }}\"\n            },\n            {\n              \"id\": \"9af39faf-abf6-4d74-9001-444179abdaeb\",\n              \"name\": \"fileName\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.fileName }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"5a2405a6-daef-4e57-8ab8-62dc9600cd26\",\n      \"name\": \"check success\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        1180,\n        180\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"dded9782-4619-4dc7-b264-f5e029099750\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"true\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.success }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"e7c2412e-eba2-4092-808f-808a27c2a64f\",\n      \"name\": \"set downlowd file info\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -220,\n        740\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"f7affa96-85bc-4879-8ca3-aaabd985f67b\",\n              \"name\": \"fullFileName\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.body.fileName.endsWith('.pdf') ? $json.pdfPath + $json.body.fileName : $json.keyPath + $json.body.fileName }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"5710c64c-5edf-4de8-bb0a-dd9379c6ba1e\",\n      \"name\": \"Read download file from Disk\",\n      \"type\": \"n8n-nodes-base.readWriteFile\",\n      \"position\": [\n        0,\n        740\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fileSelector\": \"={{ $json.fullFileName }}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"c6c8aea2-a770-4e32-94b5-c4b9f18ea3fe\",\n      \"name\": \"API POST Endpoint\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        -900,\n        220\n      ],\n      \"webhookId\": \"0c12b17f-77a7-46b2-99a0-432b29b58dfb\",\n      \"parameters\": {\n        \"path\": \"docu-digi-sign\",\n        \"options\": {\n          \"binaryData\": false\n        },\n        \"httpMethod\": \"POST\",\n        \"responseMode\": \"responseNode\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"c7387236-4d72-4123-b181-31059c7fb973\",\n      \"name\": \"API GET Endpoint\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        -900,\n        560\n      ],\n      \"webhookId\": \"71854b24-a2b8-4cae-bb5d-3959f1573974\",\n      \"parameters\": {\n        \"path\": \"docu-download\",\n        \"options\": {},\n        \"responseMode\": \"responseNode\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"c87290be-95fd-4edf-8993-b0710714919b\",\n      \"name\": \"POST Success Response\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        1540,\n        120\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"501c7371-99a5-4d2f-bd54-ed8a9e8a67a9\",\n      \"name\": \"POST Error Response\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        1540,\n        280\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"3905360c-581c-4588-a509-7329e73a7ed6\",\n      \"name\": \"GET Respond to Webhook\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        240,\n        740\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"responseHeaders\": {\n            \"entries\": [\n              {\n                \"name\": \"comment-dispositions\",\n                \"value\": \"=attachment; filename={{ $json.fileName }}\"\n              }\n            ]\n          }\n        },\n        \"respondWith\": \"binary\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"088c46b6-0d52-4059-877c-bb38408b4c22\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -320,\n        100\n      ],\n      \"parameters\": {\n        \"width\": 740,\n        \"height\": 440,\n        \"content\": \"# Cryptographic Operations\\n## Generate Certificate and  Sign PDF\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"6be21f42-4d11-4dc3-9d01-afed8afcde02\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -320,\n        600\n      ],\n      \"parameters\": {\n        \"width\": 740,\n        \"height\": 320,\n        \"content\": \"# Document Management\\n## Download document\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"8972ffd2-ae7e-4999-ba31-242d23734498\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -320,\n        -560\n      ],\n      \"parameters\": {\n        \"width\": 1380,\n        \"height\": 620,\n        \"content\": \"# Document Management\\n## Upload Certificate and Upload PDF\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"262cfa68-f9bd-4145-9101-1bf3a3d2ea4a\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1100,\n        -80\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 740,\n        \"height\": 840,\n        \"content\": \"# Request Processing and Method Routing\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"3d3620d6-4937-483d-a2e2-0a1089415a44\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1120,\n        -100\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 680,\n        \"height\": 560,\n        \"content\": \"# Response Checking and Formatting\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": true,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"6ee0f9e6-8c82-46e1-a263-5fedb2e71ad5\",\n  \"connections\": {\n    \"Sign PDF\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"check success\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Generate Keys\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"check success\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"check success\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Prepare Success Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"POST Error Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"set file path\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Switch Operation\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"API GET Endpoint\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"set file path\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Switch Operation\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Prepare input params\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Validate Key Gen Params\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Validate PDF Sign Params\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"set downlowd file info\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"API POST Endpoint\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"set file path\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Switch Upload Type\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Validate PDF Upload\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Validate Key Upload\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Convert PDF to File\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Write PDF File to Disk\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Convert PFX to File\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Write PFX File to Disk\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Validate Key Upload\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Convert PFX to File\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Validate PDF Upload\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Convert PDF to File\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check PDF file is OK\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"check success\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check PFX file is OK\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"check success\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Prepare input params\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Switch Upload Type\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"GET Respond to Webhook\": {\n      \"main\": [\n        []\n      ]\n    },\n    \"Write PDF File to Disk\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Read PDF File from Disk\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Write PFX File to Disk\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Read PFX File from Disk\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"set downlowd file info\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Read download file from Disk\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Read PDF File from Disk\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check PDF file is OK\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Read PFX File from Disk\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check PFX file is OK\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Validate Key Gen Params\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Generate Keys\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Prepare Success Response\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"POST Success Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Validate PDF Sign Params\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Sign PDF\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Read download file from Disk\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"GET Respond to Webhook\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.code",
      "n8n-nodes-base.code",
      "n8n-nodes-base.code",
      "n8n-nodes-base.code",
      "n8n-nodes-base.code",
      "n8n-nodes-base.code",
      "n8n-nodes-base.set",
      "n8n-nodes-base.switch",
      "n8n-nodes-base.switch",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.convertToFile",
      "n8n-nodes-base.readWriteFile",
      "n8n-nodes-base.readWriteFile",
      "n8n-nodes-base.convertToFile",
      "n8n-nodes-base.readWriteFile",
      "n8n-nodes-base.readWriteFile",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.if",
      "n8n-nodes-base.set",
      "n8n-nodes-base.readWriteFile",
      "n8n-nodes-base.webhook",
      "n8n-nodes-base.webhook",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote"
    ],
    "trigger": null
  }
}