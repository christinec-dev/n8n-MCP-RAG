{
  "source": "2054_Deep_Research_Report_Generation_With_Open_Router_Google_Search_Webhook_Telegram_and_Notion.json",
  "index": 1,
  "content": "{\n  \"name\": \"Deep Research Report Generation Using Open Router, Google Search, Webhook/Telegram and Notion\",\n  \"nodes\": [\n    {\n      \"parameters\": {\n        \"updates\": [\n          \"message\"\n        ],\n        \"additionalFields\": {}\n      },\n      \"type\": \"n8n-nodes-base.telegramTrigger\",\n      \"typeVersion\": 1.1,\n      \"position\": [\n        -860,\n        180\n      ],\n      \"id\": \"db0c8ef2-4859-4df9-a29b-4066998e7926\",\n      \"name\": \"Telegram Trigger\",\n      \"webhookId\": \"13911073-fffc-490c-b05b-3628d7a6faa5\"\n    },\n    {\n      \"parameters\": {\n        \"sessionIdType\": \"customKey\",\n        \"sessionKey\": \"={{ $json?.message?.chat?.id ||  $json?.body?.session_id }}\",\n        \"contextWindowLength\": 10\n      },\n      \"type\": \"@n8n/n8n-nodes-langchain.memoryBufferWindow\",\n      \"typeVersion\": 1.3,\n      \"position\": [\n        -480,\n        480\n      ],\n      \"id\": \"49a10f75-eaa2-4466-a568-edfe9084fe30\",\n      \"name\": \"Simple Memory\"\n    },\n    {\n      \"parameters\": {\n        \"schemaType\": \"manual\",\n        \"inputSchema\": \"{\\n   \\\"is_pass_next\\\" : \\\"boolean\\\",\\n   \\\"message\\\" : \\\"string\\\"\\n}\"\n      },\n      \"type\": \"@n8n/n8n-nodes-langchain.outputParserStructured\",\n      \"typeVersion\": 1.2,\n      \"position\": [\n        -320,\n        480\n      ],\n      \"id\": \"3c820502-6a10-4ad7-b460-42ea297b0a18\",\n      \"name\": \"Structured Output Parser\"\n    },\n    {\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"conditions\": {\n                \"options\": {\n                  \"caseSensitive\": true,\n                  \"leftValue\": \"\",\n                  \"typeValidation\": \"strict\",\n                  \"version\": 2\n                },\n                \"conditions\": [\n                  {\n                    \"leftValue\": \"={{ $json.output.is_pass_next }}\",\n                    \"rightValue\": \"\",\n                    \"operator\": {\n                      \"type\": \"boolean\",\n                      \"operation\": \"false\",\n                      \"singleValue\": true\n                    },\n                    \"id\": \"9e5f68a3-6af4-48ce-9bf6-6c6e06236301\"\n                  }\n                ],\n                \"combinator\": \"and\"\n              },\n              \"renameOutput\": true,\n              \"outputKey\": \"Feedback\"\n            },\n            {\n              \"conditions\": {\n                \"options\": {\n                  \"caseSensitive\": true,\n                  \"leftValue\": \"\",\n                  \"typeValidation\": \"strict\",\n                  \"version\": 2\n                },\n                \"conditions\": [\n                  {\n                    \"id\": \"ac64b26c-d9e6-48a1-9fff-8b85156725b2\",\n                    \"leftValue\": \"={{ $json.output.is_pass_next }}\",\n                    \"rightValue\": \"\",\n                    \"operator\": {\n                      \"type\": \"boolean\",\n                      \"operation\": \"true\",\n                      \"singleValue\": true\n                    }\n                  }\n                ],\n                \"combinator\": \"and\"\n              },\n              \"renameOutput\": true,\n              \"outputKey\": \"Pass\"\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.switch\",\n      \"typeVersion\": 3.2,\n      \"position\": [\n        -220,\n        300\n      ],\n      \"id\": \"cb67de10-2789-4c01-afcb-7716005419e8\",\n      \"name\": \"Switch\"\n    },\n    {\n      \"parameters\": {\n        \"promptType\": \"define\",\n        \"text\": \"=You are the research and planning agent. Your role is to help users plan high-quality research content â€” quickly, clearly, and efficiently.\\n\\nUser input: {{ $json?.message?.text ||  $json?.body?.message}}\\n\\nðŸŒŸ Your Mission:\\nAfter greeting message ask what user want to research about. Just ask What would you like to research?\\n\\nGiven the following research topic from the user, ask some follow up questions to clarify the research direction. Return a maximum of 3 questions, but feel free to return less if the original query is clear. Ask all questions one by one.\\n\\nAfter clarity questions send draft for user to confirm. \\n\\nðŸ§  OUTPUT FORMAT (Always use this JSON output structure):\\n\\nIf needs feedback or clarity from user: \\n\\n{\\n  \\\"is_pass_next\\\": false,\\n  \\\"message\\\": \\\"message\\\"\\n}\\n\\nIf strategy is ready for confirmation:\\n{\\n  \\\"is_pass_next\\\": false,\\n  \\\"message\\\": \\\"Hereâ€™s your research plan draft:\\\"\\n}\\n\\nðŸš€ If user confirms:\\n{\\n  \\\"is_pass_next\\\": true,\\n  \\\"message\\\": \\\"The research plan is as follow:\\\",\\n}\\n\\nToday's date : {{ $now }}\",\n        \"hasOutputParser\": true,\n        \"options\": {}\n      },\n      \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n      \"typeVersion\": 1.8,\n      \"position\": [\n        -560,\n        300\n      ],\n      \"id\": \"c3acda96-3dfe-4562-85dc-508abb2b4e6a\",\n      \"name\": \"Strategy Agent\"\n    },\n    {\n      \"parameters\": {\n        \"promptType\": \"define\",\n        \"text\": \"=Given the following prompt from the user, generate a list of SERP queries to research the topic.\\nReduce the number of words in each query to its keywords only.\\nReturn a maximum of 3 queries, but feel free to return less if the original prompt is clear. Make sure each query is unique and not similar to each other: <prompt>{{ $('Switch').item.json.output.message }}</prompt>\",\n        \"hasOutputParser\": true,\n        \"options\": {}\n      },\n      \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n      \"typeVersion\": 1.8,\n      \"position\": [\n        880,\n        400\n      ],\n      \"id\": \"cc6ede05-c8e2-4d95-8f14-a2bd458d156c\",\n      \"name\": \"Search Query Agent\"\n    },\n    {\n      \"parameters\": {\n        \"schemaType\": \"manual\",\n        \"inputSchema\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"queries\\\": {\\n      \\\"type\\\": \\\"array\\\",\\n      \\\"items\\\": {\\n        \\\"type\\\": \\\"object\\\",\\n        \\\"properties\\\": {\\n          \\\"query\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"The SERP query\\\"\\n          },\\n          \\\"researchGoal\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"First talk about the goal of the research that this query is meant to accomplish, then go deeper into how to advance the research once the results are found, mention additional research directions. Be as specific as possible, especially for additional research directions.\\\"\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\"\n      },\n      \"type\": \"@n8n/n8n-nodes-langchain.outputParserStructured\",\n      \"typeVersion\": 1.2,\n      \"position\": [\n        1060,\n        580\n      ],\n      \"id\": \"e377ea10-0533-4eb9-924c-a812ef08cf11\",\n      \"name\": \"Structured Output Parser1\"\n    },\n    {\n      \"parameters\": {\n        \"fieldToSplitOut\": \"output.queries\",\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.splitOut\",\n      \"typeVersion\": 1,\n      \"position\": [\n        1240,\n        500\n      ],\n      \"id\": \"430256b3-1d07-4c83-90c9-3d836833332d\",\n      \"name\": \"Split Out\"\n    },\n    {\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"typeVersion\": 3,\n      \"position\": [\n        1420,\n        500\n      ],\n      \"id\": \"07630239-b8f2-4a00-904d-b2fb59c04545\",\n      \"name\": \"Loop Over Queries\"\n    },\n    {\n      \"parameters\": {\n        \"method\": \"POST\",\n        \"url\": \"https://api.tavily.com/search\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpCustomAuth\",\n        \"sendBody\": true,\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"query\",\n              \"value\": \"={{ $json.query }}\"\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 4.2,\n      \"position\": [\n        1640,\n        600\n      ],\n      \"id\": \"64d8824c-2914-4f46-b0ca-9dff584970d7\",\n      \"name\": \"HTTP Request\"\n    },\n    {\n      \"parameters\": {\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"00d1543a-0036-43a3-8034-14bc29317218\",\n              \"name\": \"tavily_results\",\n              \"value\": \"={{ $json.results }}\",\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.set\",\n      \"typeVersion\": 3.4,\n      \"position\": [\n        1860,\n        600\n      ],\n      \"id\": \"d0c8337a-c631-4582-a9bd-f7166772787f\",\n      \"name\": \"Edit Fields\"\n    },\n    {\n      \"parameters\": {\n        \"modelId\": {\n          \"__rl\": true,\n          \"value\": \"gpt-4.1-mini\",\n          \"mode\": \"list\",\n          \"cachedResultName\": \"GPT-4.1-MINI\"\n        },\n        \"messages\": {\n          \"values\": [\n            {\n              \"content\": \"=You are an intelligent assistant. A user has asked the following query:\\n\\n[Search Query]: {{ $('HTTP Request').item.json.query }}\\n\\nBelow is the draft for research that user has passed: {{ $('Switch').item.json.output.message }}\\n\\nBelow are the search results retrieved from the internet (from Tavily):\\n\\n{{ $json.tavily_results }}\\n\\nEach result includes a title, URL, and content. From these, choose the **single most relevant URL** that best matches the user's query. Focus on accuracy, relevance, and depth of the content. Only return the URL â€” do not include any explanation or extra text.\\n\\nreturn it like below JSON format: \\n{\\n final_url: \\\"url\\\"\\n}\\n\"\n            }\n          ]\n        },\n        \"jsonOutput\": true,\n        \"options\": {}\n      },\n      \"type\": \"@n8n/n8n-nodes-langchain.openAi\",\n      \"typeVersion\": 1.8,\n      \"position\": [\n        2060,\n        600\n      ],\n      \"id\": \"fa94faaa-c5a1-4752-a9e6-69c670217c65\",\n      \"name\": \"OpenAI\"\n    },\n    {\n      \"parameters\": {\n        \"method\": \"POST\",\n        \"url\": \"https://api.tavily.com/extract\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpCustomAuth\",\n        \"sendBody\": true,\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"urls\",\n              \"value\": \"={{ $json.message.content.final_url }}\"\n            },\n            {\n              \"name\": \"extract_depth\",\n              \"value\": \"advanced\"\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 4.2,\n      \"position\": [\n        2420,\n        600\n      ],\n      \"id\": \"e3801e7f-60f5-4e9b-8ff5-717316c836c0\",\n      \"name\": \"HTTP Request1\"\n    },\n    {\n      \"parameters\": {\n        \"aggregate\": \"aggregateAllItemData\",\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.aggregate\",\n      \"typeVersion\": 1,\n      \"position\": [\n        1620,\n        240\n      ],\n      \"id\": \"86646bdb-78ba-440f-816e-6d8400c1dab7\",\n      \"name\": \"Aggregate\"\n    },\n    {\n      \"parameters\": {\n        \"promptType\": \"define\",\n        \"text\": \"=You are a research and writing assistant.\\n\\nYour task is to generate a comprehensive and well-structured blog-style report based on the following research topic and raw extracted content. Use professional, clear language suitable for a wide audience. Organize the report using headings and subheadings. Avoid repetition. At the end of the report, include a \\\"Sources\\\" section with a list of the URLs used. \\n\\nThis is the final draft on which you need to create report from given topic and draft: \\n{{ $('Switch').item.json.output.message }}. Try to create final report from this outline and draft.\\n\\n---\\n**Extracted Content**:\\n\\n1. Source: {{ $json.data[0].results[0].url }}\\nContent:{{ $json.data[0].results[0].raw_content }}\\n\\n\\n2. Source: {{ $json.data[1].results[0].url }}\\nContent: {{ $json.data[1].results[0].raw_content }}\\n\\n3. Source: {{ $json.data[2].results[0].url }}\\nContent:{{ $json.data[2].results[0].raw_content }}\\n\\n---\\n\\n**Instructions**:\\n- Make as detailed report as possible. Include all the useful information.\\n- Analyze and synthesize the information from all sources.\\n- Structure the report into meaningful sections with headings and subheadings (e.g., Introduction, Key Insights, Challenges, Opportunities, Conclusion, etc.).\\n- Do not copy the content verbatim â€” rewrite and consolidate it into an original, cohesive narrative.\\n- Maintain factual accuracy.\\n- Make it as as detailed as possible, aim for 3 or more pages, include ALL the learnings from research.\\n- Format the report in markdown. Use headings, lists and tables only and where appropriate.\\n- At the end of **each paragraph**, insert a superscript source reference in markdown format like this: `[1]`, `[2]`, `[3]`, based on which source(s) the paragraph is derived from.\\n- Do not mention the source URL in the paragraph body.\\n- Do not include content that cannot be mapped to one of the sources.\\n- At the end include sources link with correct url.\\n\",\n        \"options\": {}\n      },\n      \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n      \"typeVersion\": 1.8,\n      \"position\": [\n        1820,\n        240\n      ],\n      \"id\": \"59c8f32a-7208-4a2d-af97-50fbe2f23e93\",\n      \"name\": \"AI Agent\"\n    },\n    {\n      \"parameters\": {\n        \"modelId\": {\n          \"__rl\": true,\n          \"value\": \"gpt-4o-mini\",\n          \"mode\": \"list\",\n          \"cachedResultName\": \"GPT-4O-MINI\"\n        },\n        \"messages\": {\n          \"values\": [\n            {\n              \"content\": \"=You will be given research draft that user asked to you need to create title and description using this draft. \\n\\ndraft:  {{ $('Switch').item.json.output.message }}\\n\\noutput using below json format: \\n{\\n \\\"title\\\": string,\\n \\\"description\\\": string\\n}\"\n            }\n          ]\n        },\n        \"jsonOutput\": true,\n        \"options\": {}\n      },\n      \"type\": \"@n8n/n8n-nodes-langchain.openAi\",\n      \"typeVersion\": 1.8,\n      \"position\": [\n        300,\n        420\n      ],\n      \"id\": \"7755fe19-6591-45a6-b763-31f239f41dd8\",\n      \"name\": \"OpenAI1\"\n    },\n    {\n      \"parameters\": {\n        \"resource\": \"databasePage\",\n        \"databaseId\": {\n          \"__rl\": true,\n          \"value\": \"1f536e90-e9d0-805c-a1c1-f2fab42a8a7b\",\n          \"mode\": \"list\",\n          \"cachedResultName\": \"n8n DeepResearch\",\n          \"cachedResultUrl\": \"https://www.notion.so/1f536e90e9d0805ca1c1f2fab42a8a7b\"\n        },\n        \"title\": \"={{ $json.message.content.title }}\",\n        \"propertiesUi\": {\n          \"propertyValues\": [\n            {\n              \"key\": \"Request ID|rich_text\",\n              \"textContent\": \"={{ $('Code').item.json.randomId.toString() }}\"\n            },\n            {\n              \"key\": \"Name|title\",\n              \"title\": \"={{ $json.message.content.title }}\"\n            },\n            {\n              \"key\": \"Description|rich_text\",\n              \"textContent\": \"={{ $json.message.content.description }}\"\n            },\n            {\n              \"key\": \"Created time|date\",\n              \"date\": \"={{ $now.toISO() }}\"\n            },\n            {\n              \"key\": \"Status|status\",\n              \"statusValue\": \"In progress\"\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.notion\",\n      \"typeVersion\": 2.2,\n      \"position\": [\n        660,\n        440\n      ],\n      \"id\": \"09b6efbc-7326-4b38-b9e9-49ff87b32101\",\n      \"name\": \"Notion\"\n    },\n    {\n      \"parameters\": {\n        \"resource\": \"databasePage\",\n        \"operation\": \"update\",\n        \"pageId\": {\n          \"__rl\": true,\n          \"value\": \"={{ $('Convert to HTML').item.json.id }}\",\n          \"mode\": \"id\"\n        },\n        \"propertiesUi\": {\n          \"propertyValues\": [\n            {\n              \"key\": \"Status|status\",\n              \"statusValue\": \"Done\"\n            },\n            {\n              \"key\": \"Last Updated|date\",\n              \"date\": \"={{ $now.toISO() }}\"\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.notion\",\n      \"typeVersion\": 2.2,\n      \"position\": [\n        4400,\n        320\n      ],\n      \"id\": \"cb35b466-f368-4b57-90c1-fe45e8566516\",\n      \"name\": \"Notion1\"\n    },\n    {\n      \"parameters\": {\n        \"method\": \"PATCH\",\n        \"url\": \"=https://api.notion.com/v1/blocks/{{ $('Convert to HTML').item.json.id }}/children\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"notionApi\",\n        \"sendHeaders\": true,\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Notion-Version\",\n              \"value\": \"2022-06-28\"\n            }\n          ]\n        },\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"jsonBody\": \"={{\\n{\\n  \\\"children\\\": $json.block\\n}\\n}}\",\n        \"options\": {\n          \"timeout\": \"={{ 1000 * 60 }}\"\n        }\n      },\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 4.2,\n      \"position\": [\n        4120,\n        520\n      ],\n      \"id\": \"1e8271df-33ea-4ce6-b49a-4f9a7d809f16\",\n      \"name\": \"HTTP Request2\"\n    },\n    {\n      \"parameters\": {\n        \"mode\": \"markdownToHtml\",\n        \"markdown\": \"={{ $('AI Agent').item.json.output }}\",\n        \"options\": {\n          \"tables\": true\n        }\n      },\n      \"id\": \"76b8f99e-330a-4daf-a524-677e21a5f1bc\",\n      \"name\": \"Convert to HTML\",\n      \"type\": \"n8n-nodes-base.markdown\",\n      \"position\": [\n        2440,\n        340\n      ],\n      \"typeVersion\": 1\n    },\n    {\n      \"parameters\": {\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"851b8a3f-c2d3-41ad-bf60-4e0e667f6c58\",\n              \"name\": \"tag\",\n              \"type\": \"array\",\n              \"value\": \"={{ $json.data.match(/<table[\\\\s\\\\S]*?<\\\\/table>|<ul[\\\\s\\\\S]*?<\\\\/ul>|<[^>]+>[^<]*<\\\\/[^>]+>/g) }}\"\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"id\": \"dc13b8f8-b1af-49b9-bac8-9237eda3d4c5\",\n      \"name\": \"HTML to Array\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        2660,\n        340\n      ],\n      \"typeVersion\": 3.4\n    },\n    {\n      \"parameters\": {\n        \"fieldToSplitOut\": \"tag\",\n        \"options\": {}\n      },\n      \"id\": \"a3434303-05dc-4d8c-982e-c11373976a1e\",\n      \"name\": \"Tags to Items\",\n      \"type\": \"n8n-nodes-base.splitOut\",\n      \"position\": [\n        2860,\n        380\n      ],\n      \"typeVersion\": 1\n    },\n    {\n      \"parameters\": {\n        \"promptType\": \"define\",\n        \"text\": \"={{ $json.tag.trim() }}\",\n        \"messages\": {\n          \"messageValues\": [\n            {\n              \"message\": \"=Convert the following html into its equivalent Notion Block as per Notion's API schema.\\n* Ensure the content is always included and remains the same.\\n* Return only a json response.\\n* Generate child-level blocks. Should not define \\\"parent\\\" or \\\"children\\\" property.\\n* Strongly prefer headings, paragraphs, tables and lists type blocks.\\n* available headings are heading_1, heading_2 and heading_3 - h4,h5,h6 should use heading_3 type instead. ensure headings use the rich text definition.\\n* ensure lists blocks include all list items.\\n\\n## Examples\\n\\n1. headings\\n```\\n<h3 id=\\\"references\\\">References</h3>\\n```\\nwould convert to \\n```\\n{\\\"object\\\":  \\\"block\\\", \\\"type\\\": \\\"heading_3\\\", \\\"heading_3\\\": { \\\"rich_text\\\": [{\\\"type\\\": \\\"text\\\",\\\"text\\\": {\\\"content\\\": \\\"References\\\"}}]}}\\n```\\n\\n2. lists\\n```\\n<ul><li>hello</li><li>world</li></ul>\\n```\\nwould convert to\\n```\\n[\\n{\\n  \\\"object\\\": \\\"block\\\",\\n  \\\"type\\\": \\\"bulleted_list_item\\\",\\n  \\\"bulleted_list_item\\\": {\\\"rich_text\\\": [{\\\"type\\\": \\\"text\\\",\\\"text\\\": {\\\"content\\\": \\\"hello\\\"}}]}\\n},\\n{\\n  \\\"object\\\": \\\"block\\\",\\n  \\\"type\\\": \\\"bulleted_list_item\\\",\\n  \\\"bulleted_list_item\\\": {\\\"rich_text\\\": [{\\\"type\\\": \\\"text\\\",\\\"text\\\": {\\\"content\\\": \\\"world\\\"}}]}\\n}\\n]\\n```\\n\\n3. tables\\n```\\n<table>\\n  <thead>\\n    <tr><th>Technology</th><th>Potential Impact</th></tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <td>5G Connectivity</td><td>Enables faster data speeds and advanced apps</td>\\n    </tr>\\n  </tbody>\\n</table>\\n```\\nwould convert to\\n```\\n{\\n  \\\"object\\\": \\\"block\\\",\\n  \\\"type\\\": \\\"table\\\",\\n  \\\"table\\\": {\\n    \\\"table_width\\\": 2,\\n    \\\"has_column_header\\\": true,\\n    \\\"has_row_header\\\": false,\\n    \\\"children\\\": [\\n      {\\n        \\\"object\\\": \\\"block\\\",\\n        \\\"type\\\": \\\"table_row\\\",\\n        \\\"table_row\\\": {\\n          \\\"cells\\\": [\\n            [\\n              {\\n                \\\"type\\\": \\\"text\\\",\\n                \\\"text\\\": {\\n                  \\\"content\\\": \\\"Technology\\\",\\n                  \\\"link\\\": null\\n                }\\n              },\\n              {\\n                \\\"type\\\": \\\"text\\\",\\n                \\\"text\\\": {\\n                  \\\"content\\\": \\\"Potential Impact\\\",\\n                  \\\"link\\\": null\\n                }\\n              }\\n            ],\\n            [\\n              {\\n                \\\"type\\\": \\\"text\\\",\\n                \\\"text\\\": {\\n                  \\\"content\\\": \\\"5G Connectivity\\\",\\n                  \\\"link\\\": null\\n                }\\n              },\\n              {\\n                \\\"type\\\": \\\"text\\\",\\n                \\\"text\\\": {\\n                  \\\"content\\\": \\\"Enables faster data speeds and advanced apps\\\",\\n                  \\\"link\\\": null\\n                }\\n              }\\n            ]\\n          ]\\n        }\\n      }\\n    ]\\n  }\\n}\\n```\\n4. anchor links\\nSince Notion doesn't support anchor links, just convert them to rich text blocks instead.\\n```\\n<a href=\\\"#module-0-pre-course-setup-and-learning-principles\\\">Module 0: Pre-Course Setup and Learning Principles</a>\\n```\\nconverts to\\n```\\n{\\n  \\\"object\\\": \\\"block\\\",\\n  \\\"type\\\": \\\"paragraph\\\",\\n  \\\"paragraph\\\": {\\n    \\\"rich_text\\\": [\\n      {\\n        \\\"type\\\": \\\"text\\\",\\n        \\\"text\\\": {\\n          \\\"content\\\": \\\"Module 0: Pre-Course Setup and Learning Principles\\\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n```\\n5. Invalid html parts\\nWhen the html is not syntax valid eg. orphaned closing tags, then just skip the conversion and use an empty rich text block.\\n```\\n</li>\\\\n</ol>\\n```\\ncan be substituted with\\n```\\n{\\n  \\\"object\\\": \\\"block\\\",\\n  \\\"type\\\": \\\"paragraph\\\",\\n  \\\"paragraph\\\": {\\n    \\\"rich_text\\\": [\\n      {\\n        \\\"type\\\": \\\"text\\\",\\n        \\\"text\\\": {\\n          \\\"content\\\": \\\" \\\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n```\"\n            }\n          ]\n        }\n      },\n      \"id\": \"0c472a0a-4c4a-4421-b98c-e1fe84a5da4d\",\n      \"name\": \"Notion Block Generator\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chainLlm\",\n      \"position\": [\n        3040,\n        360\n      ],\n      \"typeVersion\": 1.5\n    },\n    {\n      \"parameters\": {\n        \"modelName\": \"models/gemini-2.0-flash\",\n        \"options\": {}\n      },\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\n      \"typeVersion\": 1,\n      \"position\": [\n        3040,\n        540\n      ],\n      \"id\": \"bcefff85-b26a-4bc5-a131-f2582da4c99c\",\n      \"name\": \"Google Gemini Chat Model\"\n    },\n    {\n      \"parameters\": {\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"73fcb8a0-2672-4bd5-86de-8075e1e02baf\",\n              \"name\": \"=block\",\n              \"type\": \"array\",\n              \"value\": \"={{\\n(function(){\\n  const block = $json.response.text\\n    .replace('```json', '')\\n    .replace('```', '')\\n    .trim()\\n    .parseJson();\\n  if (Array.isArray(block)) return block;\\n  if (block.type.startsWith('heading_')) {\\n    const prev = Number(block.type.split('_')[1]);\\n    const next = Math.max(1, prev - 1);\\n    if (next !== prev) {\\n      block.type = `heading_${next}`;\\n      block[`heading_${next}`] = Object.assign({}, block[`heading_${prev}`]);\\n      block[`heading_${prev}`] = undefined;\\n    }\\n  }\\n  return [block];\\n})()\\n}}\"\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"id\": \"991e572e-5949-4f6b-89e4-8f99db69955d\",\n      \"name\": \"Parse JSON blocks\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        3380,\n        360\n      ],\n      \"executeOnce\": false,\n      \"typeVersion\": 3.4,\n      \"onError\": \"continueRegularOutput\"\n    },\n    {\n      \"parameters\": {\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"f68cefe0-e109-4d41-9aa3-043f3bc6c449\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"notExists\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.error }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"id\": \"bbb56ba0-6f86-45ba-8d26-78be926bbd98\",\n      \"name\": \"Valid Blocks\",\n      \"type\": \"n8n-nodes-base.filter\",\n      \"position\": [\n        3580,\n        360\n      ],\n      \"typeVersion\": 2.2\n    },\n    {\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"id\": \"7ff6ecda-0d72-49c8-b0af-65756a04c76a\",\n      \"name\": \"For Each Block...\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [\n        3900,\n        400\n      ],\n      \"typeVersion\": 3\n    },\n    {\n      \"parameters\": {\n        \"resource\": \"databasePage\",\n        \"operation\": \"getAll\",\n        \"databaseId\": {\n          \"__rl\": true,\n          \"value\": \"1f536e90-e9d0-805c-a1c1-f2fab42a8a7b\",\n          \"mode\": \"list\",\n          \"cachedResultName\": \"n8n DeepResearch\",\n          \"cachedResultUrl\": \"https://www.notion.so/1f536e90e9d0805ca1c1f2fab42a8a7b\"\n        },\n        \"limit\": 1,\n        \"filterType\": \"manual\",\n        \"matchType\": \"allFilters\",\n        \"filters\": {\n          \"conditions\": [\n            {\n              \"key\": \"Request ID|rich_text\",\n              \"condition\": \"equals\",\n              \"richTextValue\": \"={{ $('Code').item.json.randomId.toString() }}\"\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"id\": \"82c33ad1-1e8b-4bdb-adfe-b25c16fe782b\",\n      \"name\": \"Get Existing Row\",\n      \"type\": \"n8n-nodes-base.notion\",\n      \"position\": [\n        2220,\n        260\n      ],\n      \"typeVersion\": 2.2\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"const randomId = Math.floor(100000 + Math.random() * 900000);\\nreturn { randomId };\\n\"\n      },\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [\n        140,\n        420\n      ],\n      \"id\": \"fed5e77e-22a0-44b6-9c61-e2faa2bba26c\",\n      \"name\": \"Code\"\n    },\n    {\n      \"parameters\": {\n        \"aggregate\": \"aggregateAllItemData\",\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.aggregate\",\n      \"typeVersion\": 1,\n      \"position\": [\n        4120,\n        300\n      ],\n      \"id\": \"014c40d1-7c82-4b04-a907-9cab832df4c0\",\n      \"name\": \"Aggregate1\"\n    },\n    {\n      \"parameters\": {\n        \"model\": \"anthropic/claude-3.5-sonnet\",\n        \"options\": {}\n      },\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",\n      \"typeVersion\": 1,\n      \"position\": [\n        -640,\n        480\n      ],\n      \"id\": \"a8aa4844-e19e-4f11-bcc4-4b7ac7d11412\",\n      \"name\": \"OpenRouter Chat Model\"\n    },\n    {\n      \"parameters\": {\n        \"model\": \"anthropic/claude-3.5-sonnet\",\n        \"options\": {}\n      },\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",\n      \"typeVersion\": 1,\n      \"position\": [\n        860,\n        580\n      ],\n      \"id\": \"68c4f8d0-5d3f-48ee-9c84-40664992a4e5\",\n      \"name\": \"OpenRouter Chat Model1\"\n    },\n    {\n      \"parameters\": {\n        \"model\": \"anthropic/claude-3.5-sonnet\",\n        \"options\": {}\n      },\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",\n      \"typeVersion\": 1,\n      \"position\": [\n        1800,\n        400\n      ],\n      \"id\": \"a24cd1e0-eda2-4dcb-a527-aec509cf8381\",\n      \"name\": \"OpenRouter Chat Model2\"\n    },\n    {\n      \"parameters\": {\n        \"httpMethod\": \"POST\",\n        \"path\": \"1c86c408-aeed-40c5-b4ba-aad5f4cdf0ad\",\n        \"responseMode\": \"responseNode\",\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"typeVersion\": 2,\n      \"position\": [\n        -860,\n        360\n      ],\n      \"id\": \"167770e1-31e6-4830-a1b8-b3bf65db779c\",\n      \"name\": \"Webhook\",\n      \"webhookId\": \"1c86c408-aeed-40c5-b4ba-aad5f4cdf0ad\"\n    },\n    {\n      \"parameters\": {\n        \"respondWith\": \"text\",\n        \"responseBody\": \"={{ $json.output.message }}\",\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"typeVersion\": 1.1,\n      \"position\": [\n        20,\n        160\n      ],\n      \"id\": \"09b175ea-164b-4e22-bd43-7bf94ee2788c\",\n      \"name\": \"Respond to Webhook\"\n    },\n    {\n      \"parameters\": {\n        \"respondWith\": \"text\",\n        \"responseBody\": \"Thank you for your response. We are preparing your report. Once it is finished we will send report link to you.\",\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"typeVersion\": 1.1,\n      \"position\": [\n        -60,\n        420\n      ],\n      \"id\": \"3486459a-4816-4cd0-a635-eba98e91ae6c\",\n      \"name\": \"Respond to Webhook1\"\n    },\n    {\n      \"parameters\": {\n        \"method\": \"POST\",\n        \"url\": \"https://deep-research-hub-saptarshi3.replit.app/api/webhook/report-ready\",\n        \"sendBody\": true,\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"report_title\",\n              \"value\": \"={{ $json.name || '' }}\"\n            },\n            {\n              \"name\": \"report_url\",\n              \"value\": \"={{ $json.url || \\\"\\\" }}\"\n            },\n            {\n              \"name\": \"status\",\n              \"value\": \"={{ $json.property_status || \\\"\\\" }}\"\n            },\n            {\n              \"name\": \"session_id\",\n              \"value\": \"={{ $('Webhook').item.json.body.session_id || \\\"\\\" }}\"\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 4.2,\n      \"position\": [\n        4640,\n        500\n      ],\n      \"id\": \"ab8b66ad-ed6b-492d-94f9-337173f6cfed\",\n      \"name\": \"HTTP Request3\"\n    },\n    {\n      \"parameters\": {\n        \"content\": \"# Workflow Overview\\n\\nThis workflow automates the process of research planning, query generation, web search, content extraction, and report creation. It integrates with Webhook, Notion, OpenAI, and external APIs.\\n\\n## Main Steps\\n\\n1. **Trigger**: Starts from a Telegram message or Webhook.\\n2. **Strategy Agent**: Asks the user for a research topic and clarifies requirements.\\n3. **Query Generation**: Generates SERP queries for the research topic.\\n4. **Web Search**: Uses Tavily API to fetch search results for each query.\\n5. **Content Extraction**: Extracts content from the most relevant URLs.\\n6. **Report Generation**: Uses AI to synthesize a detailed report in markdown.\\n7. **Notion Integration**: Saves the report and metadata to a Notion database.\\n8. **Notification**: Notifies the user when the report is ready.\\n\\n## Key Nodes\\n\\n- **Trigger**: Listens for new messages.\\n- **Strategy Agent**: Handles user interaction and planning.\\n- **Search Query Agent**: Generates search queries.\\n- **HTTP Request**: Fetches search results and extracts content.\\n- **OpenAI/AI Agent**: Processes and synthesizes information.\\n- **Notion**: Stores the final report.\\n- **Sticky Note**: Use this to add or update instructions.\\n\\n## Tips\\n\\n- Update credentials for all API nodes before running.\\n- You can edit or move Sticky Notes for better documentation.\\n- Use the Switch node to handle user confirmations and feedback.\\n- Optionally use Telegram or any other third party integration to trigger the workflow.\",\n        \"height\": 940,\n        \"width\": 620\n      },\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"typeVersion\": 1,\n      \"position\": [\n        120,\n        -920\n      ],\n      \"id\": \"9b00f677-b15d-4c00-aa06-df10decbd38d\",\n      \"name\": \"Sticky Note\"\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Telegram Trigger\": {\n      \"main\": [\n        []\n      ]\n    },\n    \"Simple Memory\": {\n      \"ai_memory\": [\n        [\n          {\n            \"node\": \"Strategy Agent\",\n            \"type\": \"ai_memory\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Structured Output Parser\": {\n      \"ai_outputParser\": [\n        [\n          {\n            \"node\": \"Strategy Agent\",\n            \"type\": \"ai_outputParser\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Switch\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Respond to Webhook\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Respond to Webhook1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Strategy Agent\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Switch\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Structured Output Parser1\": {\n      \"ai_outputParser\": [\n        [\n          {\n            \"node\": \"Search Query Agent\",\n            \"type\": \"ai_outputParser\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Search Query Agent\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split Out\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Split Out\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Queries\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Loop Over Queries\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Aggregate\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"HTTP Request\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"HTTP Request\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Edit Fields\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Edit Fields\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"OpenAI\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"HTTP Request1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"HTTP Request1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Queries\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Aggregate\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"AI Agent\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Existing Row\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Notion\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Notion1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"HTTP Request3\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Convert to HTML\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"HTML to Array\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"HTML to Array\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Tags to Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Tags to Items\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Notion Block Generator\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Google Gemini Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Notion Block Generator\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Notion Block Generator\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Parse JSON blocks\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Parse JSON blocks\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Valid Blocks\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Valid Blocks\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"For Each Block...\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"For Each Block...\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Aggregate1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"HTTP Request2\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"HTTP Request2\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"For Each Block...\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Existing Row\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Convert to HTML\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Code\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"OpenAI1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Aggregate1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Notion1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Notion\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Search Query Agent\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenRouter Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Strategy Agent\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenRouter Chat Model1\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Search Query Agent\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenRouter Chat Model2\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Webhook\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Strategy Agent\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Respond to Webhook1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Code\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  },\n  \"active\": false,\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"b12bd622-3a4c-4197-ae0e-8853d87fb2d3\",\n  \"meta\": {\n    \"instanceId\": \"88bba54a6622a369cbc7b9f664b6b7498793423eedd66abbbb5559f0f452a57e\"\n  },\n  \"id\": \"3ycewf83b8KVQi8N\",\n  \"tags\": []\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.telegramTrigger",
      "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "@n8n/n8n-nodes-langchain.outputParserStructured",
      "n8n-nodes-base.switch",
      "@n8n/n8n-nodes-langchain.agent",
      "@n8n/n8n-nodes-langchain.agent",
      "@n8n/n8n-nodes-langchain.outputParserStructured",
      "n8n-nodes-base.splitOut",
      "n8n-nodes-base.splitInBatches",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.set",
      "@n8n/n8n-nodes-langchain.openAi",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.aggregate",
      "@n8n/n8n-nodes-langchain.agent",
      "@n8n/n8n-nodes-langchain.openAi",
      "n8n-nodes-base.notion",
      "n8n-nodes-base.notion",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.markdown",
      "n8n-nodes-base.set",
      "n8n-nodes-base.splitOut",
      "@n8n/n8n-nodes-langchain.chainLlm",
      "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "n8n-nodes-base.set",
      "n8n-nodes-base.filter",
      "n8n-nodes-base.splitInBatches",
      "n8n-nodes-base.notion",
      "n8n-nodes-base.code",
      "n8n-nodes-base.aggregate",
      "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "n8n-nodes-base.webhook",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.stickyNote"
    ],
    "trigger": "telegram trigger"
  }
}