{
  "source": "1954_Wait_Code_Automation_Webhook.json",
  "index": 1,
  "content": "{\n  \"id\": \"phqg5Kk3YowxoMHQ\",\n  \"meta\": {\n    \"instanceId\": \"3b02b4d565b70d8766b64aa225626d46b11a527d9f5fe390a8405f2a09e8b8a4\"\n  },\n  \"name\": \"Namesilo Bulk Domain Availability [Template]\",\n  \"tags\": [\n    {\n      \"id\": \"28jVdgW1S4XWqLH4\",\n      \"name\": \"Templates\",\n      \"createdAt\": \"2025-02-28T12:22:07.921Z\",\n      \"updatedAt\": \"2025-02-28T12:22:07.921Z\"\n    }\n  ],\n  \"nodes\": [\n    {\n      \"id\": \"b1184b35-0ab4-42d8-a5b2-66ef926d7eed\",\n      \"name\": \"Set Data\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -240,\n        0\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"05a34cf0-9462-4684-aac8-32b4b17e9ef0\",\n              \"name\": \"Domains\",\n              \"type\": \"string\",\n              \"value\": \"=domain1.com\\ndomain2.com\\ndomain3.com\"\n            },\n            {\n              \"id\": \"438830f9-27fe-4e89-bcb9-766483e2d9b1\",\n              \"name\": \"Namesilo API Key\",\n              \"type\": \"string\",\n              \"value\": \"YOUR_API_KEY\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"7fc40d31-a43b-4273-a6eb-d519fda815d4\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -800,\n        -340\n      ],\n      \"parameters\": {\n        \"width\": 580,\n        \"height\": 280,\n        \"content\": \"## How-To\\n1. Claim your free Namesilo API key here: https://www.namesilo.com/account/api-manager\\n\\n2. Set your API key and domains in \\\"Set Data\\\" node.\\n\\nThe workflow send up to 200 domains per loop until all domains are processed. The output is in Excel format.\\n\\nEnjoy!\\n\\nNote: Each loop wait 5min. This is required due to Namesilo rate limits.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"a2137f76-9e08-4743-b914-b10bbebc9a13\",\n      \"name\": \"Convert & Split Domains\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        -60,\n        0\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Get domains from input JSON\\nconst domains = $json.Domains.split(\\\"\\\\n\\\").map(domain => domain.trim()).filter(Boolean);\\n\\n// Define batch size\\nconst batchSize = 200;\\n\\n// Split into batches of 200\\nlet batches = [];\\nfor (let i = 0; i < domains.length; i += batchSize) {\\n    batches.push(domains.slice(i, i + batchSize).join(\\\",\\\"));\\n}\\n\\n// Return batches as an array\\nreturn batches.map(batch => ({ batchedDomains: batch }));\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"41140017-1f98-4ea9-ac97-9d48e5bdfda1\",\n      \"name\": \"Wait\",\n      \"type\": \"n8n-nodes-base.wait\",\n      \"position\": [\n        680,\n        -200\n      ],\n      \"webhookId\": \"3ede79a2-7875-462f-b15a-1c74339e2a8a\",\n      \"parameters\": {\n        \"unit\": \"minutes\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"9aa9ddb5-9091-4726-917c-bce9d0f207c9\",\n      \"name\": \"Merge Results\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        320,\n        0\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// This re-maps each input item (if needed)\\nconst newItems = items.map(item => ({\\n  json: {\\n    Domain: item.json.Domain,\\n    Availability: item.json.Availability\\n  }\\n}));\\n\\nreturn newItems;\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"bb2fd210-fd11-4712-94d0-fabb7060705c\",\n      \"name\": \"Loop Over Domains\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [\n        120,\n        0\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"5d97cd82-f7d5-4f98-a789-8c0fcf473f0f\",\n      \"name\": \"Namesilo Requests\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        320,\n        -200\n      ],\n      \"parameters\": {\n        \"url\": \"=https://www.namesilo.com/apibatch/checkRegisterAvailability?version=1&type=json&key={{ $('Set Data').item.json['Namesilo API Key'] }}&domains={{ $json.batchedDomains }}\",\n        \"options\": {}\n      },\n      \"retryOnFail\": true,\n      \"typeVersion\": 4.2,\n      \"waitBetweenTries\": 5000\n    },\n    {\n      \"id\": \"c4f38893-636a-4293-9e10-395be30683d0\",\n      \"name\": \"Parse Data\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        500,\n        -200\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Ensure input data exists\\nif (!$json || !$json.data) {\\n    throw new Error(\\\"Invalid input data format\\\");\\n}\\n\\n// Parse the JSON string inside `data`\\nlet parsedData;\\ntry {\\n    parsedData = JSON.parse($json.data);\\n} catch (error) {\\n    throw new Error(\\\"Error parsing JSON data: \\\" + error.message);\\n}\\n\\n// Extract available and unavailable domains safely\\nconst availableDomains = parsedData.reply?.available ? Object.values(parsedData.reply.available) : [];\\nconst unavailableDomains = parsedData.reply?.unavailable ? Object.values(parsedData.reply.unavailable) : [];\\n\\n// Prepare the output array\\nconst output = [];\\n\\n// Process available domains\\navailableDomains.forEach(domainObj => {\\n    if (domainObj && domainObj.domain) {\\n        output.push({\\n            Domain: domainObj.domain,\\n            Availability: \\\"Available\\\"\\n        });\\n    }\\n});\\n\\n// Process unavailable domains\\nunavailableDomains.forEach(domain => {\\n    if (typeof domain === \\\"string\\\") {\\n        output.push({\\n            Domain: domain,\\n            Availability: \\\"Unavailable\\\"\\n        });\\n    } else if (typeof domain === \\\"object\\\" && domain.domain) {\\n        output.push({\\n            Domain: domain.domain,\\n            Availability: \\\"Unavailable\\\"\\n        });\\n    }\\n});\\n\\n// Return the structured data\\nreturn output;\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"ec7b8311-65b7-45b0-85ae-b91d7c82e123\",\n      \"name\": \"Convert to Excel\",\n      \"type\": \"n8n-nodes-base.convertToFile\",\n      \"position\": [\n        500,\n        0\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"fileName\": \"domain_results.xlsx\"\n        },\n        \"operation\": \"xlsx\",\n        \"binaryPropertyName\": \"={{ $json.MergedDomains }}\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"7d33c875-ce2d-404c-97a0-f551939d59f4\",\n      \"name\": \"Start\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        -420,\n        0\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"1a05d4b0-db0c-4554-8abf-0547130be16c\",\n  \"connections\": {\n    \"Wait\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Domains\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Start\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set Data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set Data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Convert & Split Domains\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Parse Data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Wait\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Merge Results\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Convert to Excel\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Loop Over Domains\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge Results\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Namesilo Requests\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Namesilo Requests\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Parse Data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Convert & Split Domains\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Domains\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.set",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.code",
      "n8n-nodes-base.wait",
      "n8n-nodes-base.code",
      "n8n-nodes-base.splitInBatches",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.code",
      "n8n-nodes-base.convertToFile",
      "n8n-nodes-base.manualTrigger"
    ],
    "trigger": null
  }
}