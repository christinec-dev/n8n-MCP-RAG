{
  "source": "1730_HTTP_Executeworkflow_Automation_Webhook.json",
  "index": 1,
  "content": "{\n  \"id\": \"itzURpN5wbUNOXOw\",\n  \"meta\": {\n    \"instanceId\": \"205b3bc06c96f2dc835b4f00e1cbf9a937a74eeb3b47c99d0c30b0586dbf85aa\"\n  },\n  \"name\": \"[2/2] KNN classifier (lands dataset)\",\n  \"tags\": [\n    {\n      \"id\": \"QN7etptCmdcGIpkS\",\n      \"name\": \"classifier\",\n      \"createdAt\": \"2024-12-08T22:08:15.968Z\",\n      \"updatedAt\": \"2024-12-09T19:25:04.113Z\"\n    }\n  ],\n  \"nodes\": [\n    {\n      \"id\": \"33373ccb-164e-431c-8a9a-d68668fc70be\",\n      \"name\": \"Embed image\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        -140,\n        -240\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.voyageai.com/v1/multimodalembeddings\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={{\\n{\\n \\\"inputs\\\": [\\n {\\n \\\"content\\\": [\\n {\\n \\\"type\\\": \\\"image_url\\\",\\n \\\"image_url\\\": $json.imageURL\\n }\\n ]\\n }\\n ],\\n \\\"model\\\": \\\"voyage-multimodal-3\\\",\\n \\\"input_type\\\": \\\"document\\\"\\n}\\n}}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\"\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"Vb0RNVDnIHmgnZOP\",\n          \"name\": \"Voyage API\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"58adecfa-45c7-4928-b850-053ea6f3b1c5\",\n      \"name\": \"Query Qdrant\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        440,\n        -240\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $json.qdrantCloudURL }}/collections/{{ $json.collectionName }}/points/query\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={{\\n{\\n \\\"query\\\": $json.ImageEmbedding,\\n \\\"using\\\": \\\"voyage\\\",\\n \\\"limit\\\": $json.limitKNN,\\n \\\"with_payload\\\": true\\n}\\n}}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"qdrantApi\"\n      },\n      \"credentials\": {\n        \"qdrantApi\": {\n          \"id\": \"it3j3hP9FICqhgX6\",\n          \"name\": \"QdrantApi account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"258026b7-2dda-4165-bfe1-c4163b9caf78\",\n      \"name\": \"Majority Vote\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        840,\n        -240\n      ],\n      \"parameters\": {\n        \"language\": \"python\",\n        \"pythonCode\": \"from collections import Counter\\n\\ninput_json = _input.all()[0]\\npoints = input_json['json']['result']['points']\\nmajority_vote_two_most_common = Counter([point[\\\"payload\\\"][\\\"landscape_name\\\"] for point in points]).most_common(2)\\n\\nreturn [{\\n \\\"json\\\": {\\n \\\"result\\\": majority_vote_two_most_common \\n }\\n}]\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"e83e7a0c-cb36-46d0-8908-86ee1bddf638\",\n      \"name\": \"Increase limitKNN\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1240,\n        -240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"0b5d257b-1b27-48bc-bec2-78649bc844cc\",\n              \"name\": \"limitKNN\",\n              \"type\": \"number\",\n              \"value\": \"={{ $('Propagate loop variables').item.json.limitKNN + 5}}\"\n            },\n            {\n              \"id\": \"afee4bb3-f78b-4355-945d-3776e33337a4\",\n              \"name\": \"ImageEmbedding\",\n              \"type\": \"array\",\n              \"value\": \"={{ $('Qdrant variables + embedding + KNN neigbours').first().json.ImageEmbedding }}\"\n            },\n            {\n              \"id\": \"701ed7ba-d112-4699-a611-c0c134757a6c\",\n              \"name\": \"qdrantCloudURL\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Qdrant variables + embedding + KNN neigbours').first().json.qdrantCloudURL }}\"\n            },\n            {\n              \"id\": \"f5612f78-e7d8-4124-9c3a-27bd5870c9bf\",\n              \"name\": \"collectionName\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Qdrant variables + embedding + KNN neigbours').first().json.collectionName }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"8edbff53-cba6-4491-9d5e-bac7ad6db418\",\n      \"name\": \"Propagate loop variables\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        640,\n        -240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"880838bf-2be2-4f5f-9417-974b3cbee163\",\n              \"name\": \"=limitKNN\",\n              \"type\": \"number\",\n              \"value\": \"={{ $json.result.points.length}}\"\n            },\n            {\n              \"id\": \"5fff2bea-f644-4fd9-ad04-afbecd19a5bc\",\n              \"name\": \"result\",\n              \"type\": \"object\",\n              \"value\": \"={{ $json.result }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"6fad4cc0-f02c-429d-aa4e-0d69ebab9d65\",\n      \"name\": \"Image Test URL\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -320,\n        -240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"46ceba40-fb25-450c-8550-d43d8b8aa94c\",\n              \"name\": \"imageURL\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.query.imageURL }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"f02e79e2-32c8-4af0-8bf9-281119b23cc0\",\n      \"name\": \"Return class\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1240,\n        0\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"bd8ca541-8758-4551-b667-1de373231364\",\n              \"name\": \"class\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.result[0][0] }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"83ca90fb-d5d5-45f4-8957-4363a4baf8ed\",\n      \"name\": \"Check tie\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        1040,\n        -240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"980663f6-9d7d-4e88-87b9-02030882472c\",\n              \"operator\": {\n                \"type\": \"number\",\n                \"operation\": \"gt\"\n              },\n              \"leftValue\": \"={{ $json.result.length }}\",\n              \"rightValue\": 1\n            },\n            {\n              \"id\": \"9f46fdeb-0f89-4010-99af-624c1c429d6a\",\n              \"operator\": {\n                \"type\": \"number\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $json.result[0][1] }}\",\n              \"rightValue\": \"={{ $json.result[1][1] }}\"\n            },\n            {\n              \"id\": \"c59bc4fe-6821-4639-8595-fdaf4194c1e1\",\n              \"operator\": {\n                \"type\": \"number\",\n                \"operation\": \"lte\"\n              },\n              \"leftValue\": \"={{ $('Propagate loop variables').item.json.limitKNN }}\",\n              \"rightValue\": 100\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"847ced21-4cfd-45d8-98fa-b578adc054d6\",\n      \"name\": \"Qdrant variables + embedding + KNN neigbours\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        120,\n        -240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"de66070d-5e74-414e-8af7-d094cbc26f62\",\n              \"name\": \"ImageEmbedding\",\n              \"type\": \"array\",\n              \"value\": \"={{ $json.data[0].embedding }}\"\n            },\n            {\n              \"id\": \"58b7384d-fd0c-44aa-9f8e-0306a99be431\",\n              \"name\": \"qdrantCloudURL\",\n              \"type\": \"string\",\n              \"value\": \"=https://152bc6e2-832a-415c-a1aa-fb529f8baf8d.eu-central-1-0.aws.cloud.qdrant.io\"\n            },\n            {\n              \"id\": \"e34c4d88-b102-43cc-a09e-e0553f2da23a\",\n              \"name\": \"collectionName\",\n              \"type\": \"string\",\n              \"value\": \"=land-use\"\n            },\n            {\n              \"id\": \"db37e18d-340b-4624-84f6-df993af866d6\",\n              \"name\": \"limitKNN\",\n              \"type\": \"number\",\n              \"value\": \"=10\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"d1bc4edc-37d2-43ac-8d8b-560453e68d1f\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -940,\n        -120\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"width\": 320,\n        \"height\": 540,\n        \"content\": \"Here we're classifying existing types of satellite imagery of land types:\\n- 'agricultural',\\n- 'airplane',\\n- 'baseballdiamond',\\n- 'beach',\\n- 'buildings',\\n- 'chaparral',\\n- 'denseresidential',\\n- 'forest',\\n- 'freeway',\\n- 'golfcourse',\\n- 'harbor',\\n- 'intersection',\\n- 'mediumresidential',\\n- 'mobilehomepark',\\n- 'overpass',\\n- 'parkinglot',\\n- 'river',\\n- 'runway',\\n- 'sparseresidential',\\n- 'storagetanks',\\n- 'tenniscourt'\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"13560a31-3c72-43b8-9635-3f9ca11f23c9\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -520,\n        -460\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"content\": \"I tested this KNN classifier on a whole `test` set of a dataset (it's not a part of the collection, only `validation` + `train` parts). Accuracy of classification on `test` is **93.24%**, no fine-tuning, no metric learning.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"8c9dcbcb-a1ad-430f-b7dd-e19b5645b0f6\",\n      \"name\": \"Execute Workflow Trigger\",\n      \"type\": \"n8n-nodes-base.executeWorkflowTrigger\",\n      \"position\": [\n        -520,\n        -240\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b36fb270-2101-45e9-bb5c-06c4e07b769c\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1080,\n        -520\n      ],\n      \"parameters\": {\n        \"width\": 460,\n        \"height\": 380,\n        \"content\": \"## KNN classification workflow-tool\\n### This n8n template takes an image URL (as anomaly detection tool does), and as output, it returns a class of the object on the image (out of land types list)\\n\\n* An image URL is received via the Execute Workflow Trigger, which is then sent to the Voyage.ai Multimodal Embeddings API to fetch its embedding.\\n* The image's embedding vector is then used to query Qdrant, returning a set of X similar images with pre-labeled classes.\\n* Majority voting is done for classes of neighbouring images.\\n* A loop is used to resolve scenarios where there is a tie in Majority Voting (for example, we have 5 \\\"forest\\\" and 5 \\\"beach\\\"), and we increase the number of neighbours to retrieve.\\n* When the loop finally resolves, the identified class is returned to the calling workflow.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"51ece7fc-fd85-4d20-ae26-4df2d3893251\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        120,\n        -40\n      ],\n      \"parameters\": {\n        \"height\": 200,\n        \"content\": \"Variables define another Qdrant's collection with landscapes (uploaded similarly as the crops collection, don't forget to switch it with your data) + amount of neighbours **limitKNN** in the database we'll use for an input image classification.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"7aad5904-eb0b-4389-9d47-cc91780737ba\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -180,\n        -60\n      ],\n      \"parameters\": {\n        \"height\": 80,\n        \"content\": \"Similarly to anomaly detection tool, we're embedding input image with the Voyage model\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"d3702707-ee4a-481f-82ca-d9386f5b7c8a\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        440,\n        -500\n      ],\n      \"parameters\": {\n        \"width\": 740,\n        \"height\": 200,\n        \"content\": \"## Tie loop\\nHere we're [querying](https://api.qdrant.tech/api-reference/search/query-points) Qdrant, getting **limitKNN** nearest neighbours to our image <*Query Qdrant node*>, parsing their classes from payloads (images were pre-labeled & uploaded with their labels to Qdrant) & calculating the most frequent class name <*Majority Vote node*>. If there is a tie <*check tie node*> in 2 most common classes, for example, we have 5 \\\"forest\\\" and 5 \\\"harbor\\\", we repeat the procedure with the number of neighbours increased by 5 <*propagate loop variables node* and *increase limitKNN node*>.\\nIf there is no tie, or we have already checked 100 neighbours, we exit the loop <*check tie node*> and return the class-answer.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"d26911bb-0442-4adc-8511-7cec2d232393\",\n      \"name\": \"Sticky Note6\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1240,\n        160\n      ],\n      \"parameters\": {\n        \"height\": 80,\n        \"content\": \"Here, we extract the name of the input image class decided by the Majority Vote\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"84ffc859-1d5c-4063-9051-3587f30a0017\",\n      \"name\": \"Sticky Note10\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -520,\n        80\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 540,\n        \"height\": 260,\n        \"content\": \"### KNN (k nearest neighbours) classification\\n1. The first pipeline is uploading (lands) dataset to Qdrant's collection.\\n2. **This is the KNN classifier tool, which takes any image as input and classifies it based on queries to the Qdrant (lands) collection.**\\n\\n### To recreate it\\nYou'll have to upload [lands](https://www.kaggle.com/datasets/apollo2506/landuse-scene-classification) dataset from Kaggle to your own Google Storage bucket, and re-create APIs/connections to [Qdrant Cloud](https://qdrant.tech/documentation/quickstart-cloud/) (you can use **Free Tier** cluster), Voyage AI API & Google Cloud Storage\\n\\n**In general, pipelines are adaptable to any dataset of images**\\n\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {\n    \"Execute Workflow Trigger\": [\n      {\n        \"json\": {\n          \"query\": {\n            \"imageURL\": \"https://storage.googleapis.com/n8n-qdrant-demo/land-use/images_train_test_val/test/buildings/buildings_000323.png\"\n          }\n        }\n      }\n    ]\n  },\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"c8cfe732-fd78-4985-9540-ed8cb2de7ef3\",\n  \"connections\": {\n    \"Check tie\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Increase limitKNN\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Return class\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Embed image\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Qdrant variables + embedding + KNN neigbours\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Query Qdrant\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Propagate loop variables\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Majority Vote\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check tie\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Image Test URL\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Embed image\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Increase limitKNN\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Query Qdrant\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Execute Workflow Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Image Test URL\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Propagate loop variables\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Majority Vote\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Qdrant variables + embedding + KNN neigbours\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Query Qdrant\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.code",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.if",
      "n8n-nodes-base.set",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.executeWorkflowTrigger",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote"
    ],
    "trigger": "execute workflow trigger"
  }
}