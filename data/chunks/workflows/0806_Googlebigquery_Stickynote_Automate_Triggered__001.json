{
  "source": "0806_Googlebigquery_Stickynote_Automate_Triggered.json",
  "index": 1,
  "content": "{\n  \"meta\": {\n    \"instanceId\": \"6a5e68bcca67c4cdb3e0b698d01739aea084e1ec06e551db64aeff43d174cb23\"\n  },\n  \"nodes\": [\n    {\n      \"id\": \"53b36910-966f-45ba-a425-a3260a55059f\",\n      \"name\": \"OpenAI Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        340,\n        480\n      ],\n      \"parameters\": {\n        \"model\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o-mini\"\n        },\n        \"options\": {}\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"177235e8-c925-43d0-9695-10f072e26350\",\n      \"name\": \"AI Control Tower Agent\",\n      \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n      \"position\": [\n        380,\n        240\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"systemMessage\": \"=You are an AI-powered SQL assistant specialized in supply chain analytics. \\nYour role is to execute SQL queries on BigQuery and return only the results in a structured format.\\n\\nToday we are May 31, 2021.\\n\\n### **Behavior & Rules**\\n1Ô∏è‚É£ **Query Execution:**\\n   - Your only task is to process user requests and return **direct results** from BigQuery.\\n   - Do **not** display the SQL query.\\n   - Only return structured **data** as output.\\n\\n2Ô∏è‚É£ **Data Presentation:**\\n   - Format the results as a **table** whenever possible.\\n   - If results are numerical (counts, percentages, aggregates), return them **clearly and concisely**.\\n   - If results contain multiple rows, return **only the first 10** for preview, unless the user specifies otherwise.\\n\\n3Ô∏è‚É£ **Handling Large Datasets:**\\n   - If the user asks for many rows, show the first **100 rows max** unless specified.\\n   - Provide a **summary** when dealing with large data instead of showing everything.\\n\\n4Ô∏è‚É£ **Response Format:**\\n   - ‚úÖ **For counts & metrics:**  \\n     `\\\"There were 5,432 delayed shipments in the last 21 days.\\\"`\\n   - ‚úÖ **For tables:**  \\n     | ShipmentID | City  | Store  | Order Date | Delivery Date | On Time? |\\n     |-----------|-------|--------|------------|--------------|----------|\\n     | 12345     | NYC   | ST1    | 2024-03-10 | 2024-03-15   | No       |\\n     | 67890     | Paris | ST4    | 2024-03-11 | 2024-03-16   | Yes      |\\n\\n5Ô∏è‚É£ **Clarifying Unclear Requests:**\\n   - If the user request is **too broad**, ask for clarification instead of running an expensive query.\\n\\n---\\n\\n### Schema Awareness\\nAll SQL queries must use the BigQuery table:  \\n`transport.shipments`  \\n\\nThis table includes fields such as:\\n- `Shipment ID`, `City`, `Store`, `Order Date`, `Delivery Date`, `On Time Delivery`\\n- As well as operational timestamps: `Transmission`, `Loading`, `Airport Arrival`, etc.\\n- And status flags: `Transmission OnTime`, `Loading OnTime`, `Airport OnTime`, `Store Open`\\n\\nUse these fields appropriately when analyzing shipment performance.\\n\\n---\\n\\n### Tool Usage Instruction (for \\\"bigquery_tool\\\")\\n\\nWhenever you need to run a SQL query, use the tool called `bigquery_tool`.\\n\\nYou must provide the query in the following format:\\n```json\\n{\\n  \\\"query\\\": \\\"SELECT COUNT(*) FROM `transport.shipments` WHERE `On Time Delivery` = FALSE\\\"\\n}\\n\"\n        }\n      },\n      \"typeVersion\": 1.8\n    },\n    {\n      \"id\": \"5366cc5f-85d3-44d2-9b1b-62febfcb44e3\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -100,\n        -120\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 200,\n        \"height\": 520,\n        \"content\": \"### 1. Workflow Trigger with Chat\\nThis workflow uses a simple chat window as a trigger. You can replace it with Telegram, Slack, Teams or a webhook trigger linked to your chat.\\n\\n#### How to setup?\\n*Nothing to do.*\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"4218a062-12f8-437d-ab22-5a653a3089b2\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        140,\n        -120\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 700,\n        \"height\": 740,\n        \"content\": \"### 2. AI Agent equipped with the query tool\\nIn order to have more control on the input of the BigQuery node, we don't use the BigQuery tool. Instead we have a set of nodes to retrieve the SQL query, clean it and send it to a BigQuery Node.\\n\\n#### How to setup?\\n- **AI Agent with the Chat Model**:\\n   1. Add a **chat model** with the required credentials *(Example: Open AI 4o-mini)*\\n   2. Adapt the **name of your BigQuery table** in the system prompt *(Example: transports.shipments)*\\n   3. Adapt the **tables fields explanation** in the system prompt\\n  [Learn more about the AI Agent Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent)\\n- Copy and past the **nodes in the yellow sticker** in another workflow. Point the query tool to this workflow.\\n[Learn more about the Custom n8n Workflow Tool node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.toolworkflow)\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"c5967f58-00e8-4f03-9110-913547f7ab9c\",\n      \"name\": \"Call Query Tool\",\n      \"type\": \"@n8n/n8n-nodes-langchain.toolWorkflow\",\n      \"position\": [\n        640,\n        440\n      ],\n      \"parameters\": {\n        \"name\": \"bigquery_tool\",\n        \"workflowId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"4Os7DoxHjFuTwWio\",\n          \"cachedResultName\": \"üî® Big Query Tool\"\n        },\n        \"description\": \"=Use this tool to run an SQL query and fetch the result from the BigQuery database.\\n\\nThe tool expects input in the following format:\\n{\\n  \\\"query\\\": \\\"SELECT COUNT(*) FROM `transport.shipments` WHERE `On Time Delivery` = FALSE\\\"\\n}\\n\\nOnly provide the SQL query as a string inside the 'query' key. Do not include code formatting (like ```sql), comments, or explanations. The tool will return only the raw result from the database.\\n\",\n        \"workflowInputs\": {\n          \"value\": {\n            \"query\": \"={{ $fromAI(\\\"query\\\", \\\"SQL query to run\\\") }}\"\n          },\n          \"schema\": [\n            {\n              \"id\": \"query\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"query\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            }\n          ],\n          \"mappingMode\": \"defineBelow\",\n          \"matchingColumns\": [\n            \"query\"\n          ],\n          \"attemptToConvertTypes\": false,\n          \"convertFieldsToString\": false\n        }\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"429813c8-b07f-4551-aeea-1744a1225449\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        900,\n        -120\n      ],\n      \"parameters\": {\n        \"width\": 760,\n        \"height\": 460,\n        \"content\": \"### 3. Big Query Workflow\\nExecute the SQL query generated by the AI agent in Big Query. Retrieve the results and send them back to the AI Agent.\\n\\n### How to set up?\\n- Paste these nodes in a separate workflow so you can use it with multiple agents.\\n- **Google BigQuery API**:\\n   1. Add your Google Translate API credentials\\n   2. The project in which your table is located\\n  [Learn more about the Google BigQuery Node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlebigquery)\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"bede0624-8923-4af0-8adc-8be22d556066\",\n      \"name\": \"Query Database\",\n      \"type\": \"n8n-nodes-base.googleBigQuery\",\n      \"position\": [\n        1520,\n        180\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"sqlQuery\": \"={{ $json.query }}\",\n        \"projectId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"=\",\n          \"cachedResultUrl\": \"=\",\n          \"cachedResultName\": \"=\"\n        }\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 2.1\n    },\n    {\n      \"id\": \"137e4dbc-db8d-4ec7-a3e0-478dde6ef27c\",\n      \"name\": \"Trigger Executed by the AI Tool\",\n      \"type\": \"n8n-nodes-base.executeWorkflowTrigger\",\n      \"position\": [\n        960,\n        180\n      ],\n      \"parameters\": {\n        \"workflowInputs\": {\n          \"values\": [\n            {\n              \"name\": \"query\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"42a2801e-582e-4340-83af-ef0041eab4f9\",\n      \"name\": \"Sanitising the Query\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1240,\n        180\n      ],\n      \"parameters\": {\n        \"jsCode\": \"return [\\n  {\\n    json: {\\n      query: $input.first().json.query.replace(/```sql|```/g, \\\"\\\").trim()\\n    }\\n  }\\n];\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"7c86fda0-116c-47ad-aaf5-8b83d2c083c6\",\n      \"name\": \"Chat Memory\",\n      \"type\": \"@n8n/n8n-nodes-langchain.memoryBufferWindow\",\n      \"position\": [\n        480,\n        480\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1.3\n    },\n    {\n      \"id\": \"e1408ac1-24da-4d38-8fdf-c110a54d3f55\",\n      \"name\": \"Chat with the User\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chatTrigger\",\n      \"position\": [\n        -60,\n        240\n      ],\n      \"webhookId\": \"ee7c418b-d7d6-41f9-8e87-0f71b8ae1cf9\",\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"bc49829b-45f2-4910-9c37-907271982f14\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        900,\n        380\n      ],\n      \"parameters\": {\n        \"width\": 780,\n        \"height\": 540,\n        \"content\": \"### 4. Do you need more details?\\nFind a step-by-step guide in this tutorial\\n![Guide](https://www.samirsaci.com/content/images/2025/04/image.png)\\n[üé• Watch My Tutorial](https://www.loom.com/share/50271f9d50214d7184830985497a75ec?sid=d0c410dc-29f1-488f-b89a-4011de0ded07)\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Chat Memory\": {\n      \"ai_memory\": [\n        [\n          {\n            \"node\": \"AI Control Tower Agent\",\n            \"type\": \"ai_memory\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Call Query Tool\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"AI Control Tower Agent\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"AI Control Tower Agent\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Chat with the User\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"AI Control Tower Agent\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Sanitising the Query\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Query Database\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Trigger Executed by the AI Tool\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Sanitising the Query\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "@n8n/n8n-nodes-langchain.agent",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "@n8n/n8n-nodes-langchain.toolWorkflow",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.googleBigQuery",
      "n8n-nodes-base.executeWorkflowTrigger",
      "n8n-nodes-base.code",
      "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "@n8n/n8n-nodes-langchain.chatTrigger",
      "n8n-nodes-base.stickyNote"
    ],
    "trigger": "trigger executed by the ai tool"
  }
}