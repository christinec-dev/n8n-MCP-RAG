{
  "source": "1946_Splitout_Webhook_Import_Webhook.json",
  "index": 1,
  "content": "{\n  \"id\": \"olDVR3wuxbUsTvuW\",\n  \"meta\": {\n    \"instanceId\": \"598c730c3a95b29c8be35b1b34a362ffa595154754b692ab1bb4baa1db7b1f33\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"Get all scaleway server info copy\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"9da28130-ed83-4129-b65c-82969fe3126d\",\n      \"name\": \"Code\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        2000,\n        -60\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Function to extract essential information from servers\\nfunction extractServers(serversArray) {\\n    let servers = [];\\n\\n    if (!Array.isArray(serversArray)) {\\n        console.log(\\\"⚠️ Invalid data received:\\\", JSON.stringify(serversArray, null, 2));\\n        return servers; // Returns an empty array if the data is not valid\\n    }\\n\\n    serversArray.forEach(server => {\\n        servers.push({\\n            name: server.name || \\\"Unknown\\\",\\n            tags: server.tags && server.tags.length > 0 ? server.tags.join(\\\", \\\") : \\\"No tags\\\",\\n            public_ip: getPublicIPs(server),\\n            type: server.commercial_type || server.offer_name || \\\"Unknown\\\", // Baremetal does not have commercial_type, but offer_name\\n            state: server.state || server.status || \\\"Unknown\\\", // Baremetal uses status instead of state\\n            zone: server.zone || \\\"Unknown\\\",\\n            user: getUser(server) // User management\\n        });\\n    });\\n\\n    return servers;\\n}\\n\\n// Function to extract the public IP (IPv4 prioritized, otherwise IPv6)\\nfunction getPublicIPs(server) {\\n    let ipv4 = null;\\n    let ipv6 = null;\\n\\n    // Case for Compute instances (public_ips is an array)\\n    if (server.public_ips && Array.isArray(server.public_ips)) {\\n        server.public_ips.forEach(ip => {\\n            if (ip.family === \\\"inet\\\" && !ipv4) ipv4 = ip.address;\\n            if (ip.family === \\\"inet6\\\" && !ipv6) ipv6 = ip.address;\\n        });\\n    }\\n\\n    // Some instances have public_ip as a single object\\n    if (server.public_ip && server.public_ip.address) {\\n        if (server.public_ip.family === \\\"inet\\\" && !ipv4) ipv4 = server.public_ip.address;\\n        if (server.public_ip.family === \\\"inet6\\\" && !ipv6) ipv6 = server.public_ip.address;\\n    }\\n\\n    // Case for Baremetal servers (ips is an array)\\n    if (server.ips && Array.isArray(server.ips)) {\\n        server.ips.forEach(ip => {\\n            if (ip.version === \\\"IPv4\\\" && !ipv4) ipv4 = ip.address;\\n            if (ip.version === \\\"IPv6\\\" && !ipv6) ipv6 = ip.address;\\n        });\\n    }\\n\\n    // Returns IPv4 if available, otherwise IPv6, otherwise \\\"No IP\\\"\\n    return ipv4 || ipv6 || \\\"No IP\\\";\\n}\\n\\n// Function to retrieve the user\\nfunction getUser(server) {\\n    // For Compute instances, the \\\"user\\\" field sometimes exists\\n    if (server.user) return server.user;\\n\\n    // For Baremetal servers, user info is often found in install.user\\n    if (server.install && server.install.user) return server.install.user;\\n\\n    // Default value\\n    return \\\"root\\\";\\n}\\n\\n// Retrieve all input items (from Loop Over Zone Instance)\\nlet inputItems = $input.all();\\nlet allServers = [];\\n\\n// Iterate over each item and extract servers if they are contained in a \\\"servers\\\" property\\ninputItems.forEach(item => {\\n    if (item.json.servers && Array.isArray(item.json.servers)) {\\n        allServers = allServers.concat(extractServers(item.json.servers));\\n    } else {\\n        // If the item does not have a \\\"servers\\\" property, attempt to process the object itself as a server\\n        allServers = allServers.concat(extractServers([item.json]));\\n    }\\n});\\n\\n// Return the final result as items (JSON object per server)\\nreturn allServers.map(server => ({ json: server }));\\n\"\n      },\n      \"typeVersion\": 2,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"12e10b9e-99ca-4ab8-b90d-be318ba2f9ff\",\n      \"name\": \"Edit Fields\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        880,\n        0\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"e6764348-1fa6-439e-9279-3b423c7c73af\",\n              \"name\": \"search_by\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.body.search_by }}\"\n            },\n            {\n              \"id\": \"5535e47b-c187-47eb-80af-bccb3972f4a5\",\n              \"name\": \"search\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.body.search }}\"\n            },\n            {\n              \"id\": \"b69ff3d1-885e-4145-a277-074b8e517aaf\",\n              \"name\": \"Scaleway-X-Auth-Token\",\n              \"type\": \"string\",\n              \"value\": \"<Your personal Scaleway X Auth Token>\"\n            },\n            {\n              \"id\": \"65ee376e-093f-4a8b-abe8-5d9173d26427\",\n              \"name\": \"ZONE_INSTANCE\",\n              \"type\": \"array\",\n              \"value\": \"[\\\"fr-par-1\\\", \\\"fr-par-2\\\", \\\"fr-par-3\\\", \\\"nl-ams-1\\\", \\\"nl-ams-2\\\", \\\"nl-ams-3\\\", \\\"pl-waw-1\\\", \\\"pl-waw-2\\\", \\\"pl-waw-3\\\"]\"\n            },\n            {\n              \"id\": \"9a9fff0b-f812-4bb1-800e-2376b39381ed\",\n              \"name\": \"ZONE_BAREMETAL\",\n              \"type\": \"string\",\n              \"value\": \"[\\\"fr-par-1\\\", \\\"fr-par-2\\\", \\\"nl-ams-1\\\", \\\"nl-ams-2\\\", \\\"pl-waw-2\\\", \\\"pl-waw-3\\\"]\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"20398633-d856-4700-98a9-1f722f3d2a8f\",\n      \"name\": \"Switch\",\n      \"type\": \"n8n-nodes-base.switch\",\n      \"position\": [\n        2260,\n        -80\n      ],\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"7ee5d5ae-3a88-4bef-820d-979c26499cbd\",\n                    \"operator\": {\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('Edit Fields').first().json.search_by }}\",\n                    \"rightValue\": \"tags\"\n                  }\n                ]\n              }\n            },\n            {\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"eb879619-5b97-4402-b3de-3f98e0a7d0d3\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('Edit Fields').first().json.search_by }}\",\n                    \"rightValue\": \"name\"\n                  }\n                ]\n              }\n            },\n            {\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"2d0b6397-e46d-484a-84a0-7af8d7345dea\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('Edit Fields').first().json.search_by }}\",\n                    \"rightValue\": \"public_ip\"\n                  }\n                ]\n              }\n            },\n            {\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"0ee8fb2d-cf38-4994-a49a-88c7482b46ab\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('Edit Fields').first().json.search_by }}\",\n                    \"rightValue\": \"zone\"\n                  }\n                ]\n              }\n            },\n            {\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"04a298b2-2a22-433a-a8db-3902dcff0425\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('Edit Fields').first().json.search_by }}\",\n                    \"rightValue\": \"null\"\n                  }\n                ]\n              }\n            }\n          ]\n        },\n        \"options\": {\n          \"ignoreCase\": false,\n          \"fallbackOutput\": \"extra\"\n        }\n      },\n      \"typeVersion\": 3.2\n    },\n    {\n      \"id\": \"f480f721-d2b3-49a4-9211-266af3e8fd42\",\n      \"name\": \"Code search Tags\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        2680,\n        -500\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Retrieve all input items\\nlet servers = $input.all();\\n\\n// Filter only servers with the tag \\\"STAGING\\\"\\nlet filteredServers = servers.filter(server =>\\n    server.json.tags && server.json.tags.includes($('Edit Fields').first().json.search)\\n);\\n\\n// Return only servers that have \\\"search\\\" in the tags\\nreturn filteredServers;\\n\"\n      },\n      \"typeVersion\": 2,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"44ee26b2-1320-44a6-a705-ff102e789a9c\",\n      \"name\": \"Code search Name\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        2680,\n        -340\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Retrieve all input items\\nlet servers = $input.all();\\n\\n// Filter only servers with the tag \\\"STAGING\\\"\\nlet filteredServers = servers.filter(server =>\\n    server.json.name && server.json.name.includes($('Edit Fields').first().json.search)\\n);\\n\\n// Return only servers that have \\\"search\\\" in the name\\nreturn filteredServers;\\n\"\n      },\n      \"typeVersion\": 2,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"b8e5f1b5-09a0-42f8-a5d6-a10989cb9f81\",\n      \"name\": \"Code search public_ip\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        2680,\n        -180\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Retrieve all input items\\nlet servers = $input.all();\\n\\n// Filter only servers with the tag \\\"STAGING\\\"\\nlet filteredServers = servers.filter(server =>\\n    server.json.public_ip && server.json.public_ip.includes($('Edit Fields').first().json.search)\\n);\\n\\n// Return only servers that have \\\"search\\\" in the public_ip\\nreturn filteredServers;\\n\"\n      },\n      \"typeVersion\": 2,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"1029d9bc-8d42-4038-9dfe-f8957e9115b6\",\n      \"name\": \"Code search zone\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        2680,\n        -20\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Retrieve all input items\\nlet servers = $input.all();\\n\\n// Filter only servers with the tag \\\"STAGING\\\"\\nlet filteredServers = servers.filter(server =>\\n    server.json.public_ip && server.json.public_ip.includes($('Edit Fields').first().json.search)\\n);\\n\\n// Return only servers that have \\\"search\\\" in the public_ip\\nreturn filteredServers;\\n\"\n      },\n      \"typeVersion\": 2,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"3dae20ba-07b2-4948-a58c-8b803f672dcb\",\n      \"name\": \"Webhook\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        660,\n        0\n      ],\n      \"webhookId\": \"a6767312-3a4c-4819-b4fe-a03c9e0ade5c\",\n      \"parameters\": {\n        \"path\": \"a6767312-3a4c-4819-b4fe-a03c9e0ade5c\",\n        \"options\": {},\n        \"httpMethod\": \"POST\",\n        \"responseMode\": \"responseNode\",\n        \"authentication\": \"basicAuth\"\n      },\n      \"credentials\": {\n        \"httpBasicAuth\": {\n          \"id\": \"YzpBkNOC0UnKboCn\",\n          \"name\": \"Endpoint Get server scalway info\"\n        }\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"65f62d8f-aead-47cb-a9df-105054d8b666\",\n      \"name\": \"Respond Error\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        2680,\n        300\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"respondWith\": \"json\",\n        \"responseBody\": \"={\\n  \\\"error\\\": \\\"no search by {{ $('Edit Fields').item.json.search_by }} available. You can search by : tags, name, public_ip, zone\\\"\\n}\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"9d8db89d-c318-4078-9a3d-8bc10022d059\",\n      \"name\": \"Respond to Webhook1\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        2900,\n        -340\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"respondWith\": \"allIncomingItems\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"3009a593-8a23-448c-b8fd-58c6fc4b77b3\",\n      \"name\": \"Respond to Webhook2\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        2900,\n        -180\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"respondWith\": \"allIncomingItems\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"27e1f543-c57c-4772-944b-d2207526dd9d\",\n      \"name\": \"Respond to Webhook3\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        2900,\n        -20\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"respondWith\": \"allIncomingItems\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"90e51c36-9888-4942-ad13-28fa90235d13\",\n      \"name\": \"Respond to Webhook\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        2900,\n        -500\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"respondWith\": \"allIncomingItems\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"92ad3cf2-c3b3-4c42-9d1b-7d55f3e5ad56\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1000,\n        -1240\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 1000,\n        \"height\": 1080,\n        \"content\": \"# Technical Documentation\\n\\n## Description\\n\\nThis n8n workflow retrieves information about Scaleway servers—both instances and baremetal—from dynamically defined zones. It collects server details from the Scaleway API, aggregates them into a single dataset, and allows filtering of the results based on user-defined criteria (such as name, tags, public IP address, or zone) before returning the data via a webhook.\\n\\n## Operation\\n\\n### 1. Workflow Trigger\\n\\n- **Webhook Activation:**\\n  The workflow is triggered by a Webhook node that listens for an HTTP POST request. This request uses basic authentication (basicAuth) and includes the search parameters:\\n  - `search_by`: The filter type (e.g., \\\"tags\\\", \\\"name\\\", \\\"public_ip\\\", or \\\"zone\\\").\\n  - `search`: The keyword to filter the server data.\\n\\n### 2. Retrieving Server Information\\n\\n- **HTTP Requests to Scaleway API:**\\n  The workflow makes HTTP GET requests to two main Scaleway API endpoints:\\n  - **Instances Endpoint:** Retrieves server instances from zones specified under the `ZONE_INSTANCE` variable.\\n  - **Baremetal Endpoint:** Retrieves baremetal server information from zones defined in the `ZONE_BAREMETAL` variable.\\n  - **Headers and Authentication:**\\n    Each request sends the `X-Auth-Token` header along with a `Content-Type: application/json` header and expects a JSON response from the API.\\n\\n### 3. Data Processing\\n\\n- **Zone Splitting and Iteration:**\\n  - A `Split Out ZONE_INSTANCE` node divides the list of predefined zones so each zone is processed separately.\\n  - The `Loop Over Zone Instance` node iterates over the zones. An `If ZONE_BAREMETAL in ZONE_INSTANCE` node checks whether the current zone is configured for baremetal servers; if so, it directs the flow to the corresponding baremetal API request, otherwise to the instance request.\\n  - **Aggregating and Structuring Data:**\\n    The `Code` node aggregates all responses from each zone. It:\\n    - Iterates over the incoming items.\\n    - Uses helper functions (`extractServers`, `getPublicIPs`, `getUser`) to extract and normalize key information (name, tags, public IP, server type, state, zone, user).\\n    - Consolidates the structured server information into a unified array for further processing.\\n\\n### 4. Dynamic Filtering\\n\\n- **Defining Search Criteria:**\\n  A `Set` node captures the incoming search parameters (`search_by` and `search`) along with configuration details, such as the Scaleway authentication token and the lists of applicable zones.\\n  - **Routing Based on Filter Type:**\\n    The `Switch` node analyzes the value of `search_by` and routes the aggregated server data to one of four dedicated `Code` nodes that filter the data according to:\\n    - `tags`\\n    - `name`\\n    - `public_ip`\\n    - `zone`\\n  - **Error Handling:**\\n    If the `search_by` value does not match any of the valid filters, an error response is generated via a dedicated node that returns a JSON error message listing the available filter options.\\n\\n### 5. Response via Webhook\\n\\n- **Returning the Filtered Data:**\\n  The filtered server data is sent back to the requester via one of several `Respond to Webhook` nodes assigned to handle the output from each filter type.\\n  - **Error Response:**\\n    In cases where no valid search criteria are provided, the workflow sends an error JSON response indicating that the valid filters are: `tags`, `name`, `public_ip`, and `zone`.\\n\\n## Example Usage\\n\\nTo use the workflow from an application or another workflow, send a POST request to the webhook endpoint with a JSON payload similar to this:\\n\\n```json\\n{\\n  \\\"search_by\\\": \\\"tags\\\",\\n  \\\"search\\\": \\\"Apiv1\\\"\\n}\\n```\\n\\nIf executed successfully, the workflow will return a JSON array with server objects. Each object includes properties such as:\\n- `name`\\n- `tags`\\n- `public_ip`\\n- `type`\\n- `state`\\n- `zone`\\n- `user`\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0fc94a1e-2cb3-47d7-a198-a053b2bed8e4\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1060,\n        520\n      ],\n      \"parameters\": {\n        \"width\": 960,\n        \"height\": 660,\n        \"content\": \"# Usage in an External App or Another Workflow\\n\\nTo integrate this part of the workflow into your application or another workflow:\\n\\n1. **Send a POST Request:**\\n   Use the Get Scalway Machines node’s endpoint (displayed under the node) to send a POST request containing the search criteria. For example:\\n\\n   ```json\\n   {\\n     \\\"search_by\\\": \\\"tags\\\",\\n     \\\"search\\\": \\\"Apiv1\\\"\\n   }\\n   ```\\n\\n2. **Process the Results:**\\n   The Loop Over Items node will iterate over each response item, allowing you to handle multiple servers or records in one run.\\n\\n3. **Receive the Filtered Data:**\\n   The returned data (each item representing a server) can then be processed further in your application or workflow, giving you a quick, automated way to retrieve and filter Scaleway server information.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"d54772b2-40e7-43ff-9c4c-d4bbf176c3c2\",\n      \"name\": \"Get Scalway Machines\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1400,\n        1020\n      ],\n      \"parameters\": {\n        \"url\": \"https://sup-n8n.unipile.com/webhook/209dd6cb-76cf-4841-8c79-cea45a742b39\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"sendBody\": true,\n        \"authentication\": \"genericCredentialType\",\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"search_by\",\n              \"value\": \"Available filters (name, tags, public_ip, zone) or null if you don't want to apply a filter\"\n            },\n            {\n              \"name\": \"search\",\n              \"value\": \"Your search keyword\"\n            }\n          ]\n        },\n        \"genericAuthType\": \"httpBasicAuth\"\n      },\n      \"credentials\": {\n        \"httpBasicAuth\": {\n          \"id\": \"YzpBkNOC0UnKboCn\",\n          \"name\": \"Endpoint Get server scalway info\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"710b2503-ccb9-42d2-877a-034082a6fef8\",\n      \"name\": \"Loop Over Items\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [\n        1600,\n        1020\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"387d2a3d-8f2c-47be-a4c6-73ac110b03d0\",\n      \"name\": \"Respond to Webhook4\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        2680,\n        140\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"respondWith\": \"allIncomingItems\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"09f05bba-5fe3-4e3f-b5e6-b6f75eb9400d\",\n      \"name\": \"Get scw instance by zone\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1560,\n        80\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api.scaleway.com/instance/v1/zones/{{ $('Split Out ZONE_INSTANCE').item.json.ZONE_INSTANCE }}/servers\",\n        \"options\": {},\n        \"sendHeaders\": true,\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"X-Auth-Token\",\n              \"value\": \"={{ $('Edit Fields').item.json['Scalway-X-Auth-Token'] }}\"\n            },\n            {\n              \"name\": \"Content-Type\",\n              \"value\": \"application/json\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"541d8cd6-f7db-49a1-b527-235813b82737\",\n      \"name\": \"Loop Over Zone Instance\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [\n        1360,\n        0\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"be293c2d-bd39-46f5-8c09-766cc145f8b7\",\n      \"name\": \"Get scw baremetal by zone\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2000,\n        80\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api.scaleway.com/baremetal/v1/zones/{{ $('Split Out ZONE_INSTANCE').item.json.ZONE_INSTANCE }}/servers\",\n        \"options\": {},\n        \"sendHeaders\": true,\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"X-Auth-Token\",\n              \"value\": \"={{ $('Edit Fields').item.json['Scalway-X-Auth-Token'] }}\"\n            },\n            {\n              \"name\": \"Content-Type\",\n              \"value\": \"application/json\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"b12396b5-8fd6-4b06-8c41-0a14d2382937\",\n      \"name\": \"Split Out ZONE_INSTANCE\",\n      \"type\": \"n8n-nodes-base.splitOut\",\n      \"position\": [\n        1100,\n        0\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fieldToSplitOut\": \"ZONE_INSTANCE\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b96d5ee0-db41-4ea8-a23f-2db3cea63a3c\",\n      \"name\": \"If ZONE_BAREMETAL in ZONE_INSTANCE\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        1780,\n        80\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"loose\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"874626f1-ecf5-42c4-86fe-01a9c68cbb1a\",\n              \"operator\": {\n                \"type\": \"array\",\n                \"operation\": \"contains\",\n                \"rightType\": \"any\"\n              },\n              \"leftValue\": \"={{ $('Edit Fields').item.json.ZONE_BAREMETAL }}\",\n              \"rightValue\": \"={{ $('Loop Over Zone Instance').item.json.ZONE_INSTANCE }}\"\n            }\n          ]\n        },\n        \"looseTypeValidation\": true\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"30234c35-1788-4857-bc58-c1a581be318f\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -20,\n        -140\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 580,\n        \"height\": 380,\n        \"content\": \"# Replace the Scaleway-X-Auth-Token Field\\n\\nTo ensure the workflow functions correctly, you must:\\n\\n1. Open the Edit Fields node in your workflow.\\n2. Locate the Scaleway-X-Auth-Token field and enter your personal Scaleway token (replacing the default value).\\n3. If you do not have a token yet:\\n   - Log in to your Scaleway console.\\n   - Create a new API Token by following the [Scaleway documentation](https://www.scaleway.com/en/developers/api/).\\n   - Copy the generated token and paste it into the Scaleway-X-Auth-Token field.\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"callerPolicy\": \"workflowsFromSameOwner\",\n    \"errorWorkflow\": \"K3TJbThVR2T5RU8o\",\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"b38207e8-da63-462c-ac51-925d029d5a1f\",\n  \"connections\": {\n    \"Code\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Switch\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Switch\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Code search Tags\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Code search Name\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Code search public_ip\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Code search zone\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Respond to Webhook4\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Respond Error\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Webhook\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Edit Fields\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Edit Fields\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split Out ZONE_INSTANCE\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Code search Name\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Respond to Webhook1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Code search Tags\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Respond to Webhook\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Code search zone\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Respond to Webhook3\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Scalway Machines\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Code search public_ip\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Respond to Webhook2\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Loop Over Zone Instance\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Code\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Get scw instance by zone\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Split Out ZONE_INSTANCE\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Zone Instance\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get scw instance by zone\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"If ZONE_BAREMETAL in ZONE_INSTANCE\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get scw baremetal by zone\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Zone Instance\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"If ZONE_BAREMETAL in ZONE_INSTANCE\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get scw baremetal by zone\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Loop Over Zone Instance\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.code",
      "n8n-nodes-base.set",
      "n8n-nodes-base.switch",
      "n8n-nodes-base.code",
      "n8n-nodes-base.code",
      "n8n-nodes-base.code",
      "n8n-nodes-base.code",
      "n8n-nodes-base.webhook",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.splitInBatches",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.splitInBatches",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.splitOut",
      "n8n-nodes-base.if",
      "n8n-nodes-base.stickyNote"
    ],
    "trigger": null
  }
}