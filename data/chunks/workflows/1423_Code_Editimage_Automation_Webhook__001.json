{
  "source": "1423_Code_Editimage_Automation_Webhook.json",
  "index": 1,
  "content": "{\n  \"meta\": {\n    \"instanceId\": \"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9\"\n  },\n  \"nodes\": [\n    {\n      \"id\": \"0b64edf1-57e0-4704-b78c-c8ab2b91f74d\",\n      \"name\": \"When clicking \\u2018Test workflow\\u2019\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        480,\n        300\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"a875d1c5-ccfe-4bbf-b429-56a42b0ca778\",\n      \"name\": \"Google Gemini Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\n      \"position\": [\n        1280,\n        720\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"modelName\": \"models/gemini-1.5-flash\"\n      },\n      \"credentials\": {\n        \"googlePalmApi\": {\n          \"id\": \"dSxo6ns5wn658r8N\",\n          \"name\": \"Google Gemini(PaLM) Api account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"a5e00543-dbaa-4e62-afb0-825ebefae3f3\",\n      \"name\": \"Structured Output Parser\",\n      \"type\": \"@n8n/n8n-nodes-langchain.outputParserStructured\",\n      \"position\": [\n        1480,\n        720\n      ],\n      \"parameters\": {\n        \"jsonSchemaExample\": \"{\\n\\t\\\"caption_title\\\": \\\"\\\",\\n\\t\\\"caption_text\\\": \\\"\\\"\\n}\"\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"bb9af9c6-6c81-4e92-a29f-18ab3afbe327\",\n      \"name\": \"Get Info\",\n      \"type\": \"n8n-nodes-base.editImage\",\n      \"position\": [\n        1100,\n        400\n      ],\n      \"parameters\": {\n        \"operation\": \"information\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"8a0dbd5d-5886-484a-80a0-486f349a9856\",\n      \"name\": \"Resize For AI\",\n      \"type\": \"n8n-nodes-base.editImage\",\n      \"position\": [\n        1100,\n        560\n      ],\n      \"parameters\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"options\": {},\n        \"operation\": \"resize\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"d29f254a-5fa3-46fa-b153-19dfd8e8c6a7\",\n      \"name\": \"Calculate Positioning\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        2020,\n        720\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"const { size, output } = $input.item.json;\\n\\nconst lineHeight = 35;\\nconst fontSize = Math.round(size.height / lineHeight);\\nconst maxLineLength = Math.round(size.width/fontSize) * 2;\\nconst text = `\\\"${output.caption_title}\\\". ${output.caption_text}`;\\nconst numLinesOccupied = Math.round(text.length / maxLineLength);\\n\\nconst verticalPadding = size.height * 0.02;\\nconst horizontalPadding = size.width * 0.02;\\nconst rectPosX = 0;\\nconst rectPosY = size.height - (verticalPadding * 2.5) - (numLinesOccupied * fontSize);\\nconst textPosX = horizontalPadding;\\nconst textPosY = size.height - (numLinesOccupied * fontSize) - (verticalPadding/2);\\n\\nreturn {\\n caption: {\\n fontSize,\\n maxLineLength,\\n numLinesOccupied,\\n rectPosX,\\n rectPosY,\\n textPosX,\\n textPosY,\\n verticalPadding,\\n horizontalPadding,\\n }\\n}\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"12a7f2d6-8684-48a5-aa41-40a8a4f98c79\",\n      \"name\": \"Apply Caption to Image\",\n      \"type\": \"n8n-nodes-base.editImage\",\n      \"position\": [\n        2380,\n        560\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"operation\": \"multiStep\",\n        \"operations\": {\n          \"operations\": [\n            {\n              \"color\": \"=#0000008c\",\n              \"operation\": \"draw\",\n              \"endPositionX\": \"={{ $json.size.width }}\",\n              \"endPositionY\": \"={{ $json.size.height }}\",\n              \"startPositionX\": \"={{ $json.caption.rectPosX }}\",\n              \"startPositionY\": \"={{ $json.caption.rectPosY }}\"\n            },\n            {\n              \"font\": \"/usr/share/fonts/truetype/msttcorefonts/Arial.ttf\",\n              \"text\": \"=\\\"{{ $json.output.caption_title }}\\\". {{ $json.output.caption_text }}\",\n              \"fontSize\": \"={{ $json.caption.fontSize }}\",\n              \"fontColor\": \"#FFFFFF\",\n              \"operation\": \"text\",\n              \"positionX\": \"={{ $json.caption.textPosX }}\",\n              \"positionY\": \"={{ $json.caption.textPosY }}\",\n              \"lineLength\": \"={{ $json.caption.maxLineLength }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"4d569ec8-04c2-4d21-96e1-86543b26892d\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -120,\n        80\n      ],\n      \"parameters\": {\n        \"width\": 423.75,\n        \"height\": 431.76353488372104,\n        \"content\": \"## Try it out!\\n\\n### This workflow takes an image and generates a caption for it using AI. The OpenAI node has been able to do this for a while but this workflow demonstrates how to achieve the same with other multimodal vision models such as Google's Gemini.\\n\\nAdditional, we'll use the Edit Image node to overlay the generated caption onto the image. This can be useful for publications or can be repurposed for copyrights and/or watermarks.\\n\\n### Need Help?\\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"45d37945-5a7a-42eb-8c8c-5940ea276072\",\n      \"name\": \"Merge Image & Caption\",\n      \"type\": \"n8n-nodes-base.merge\",\n      \"position\": [\n        1620,\n        400\n      ],\n      \"parameters\": {\n        \"mode\": \"combine\",\n        \"options\": {},\n        \"combineBy\": \"combineByPosition\"\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"53a26842-ad56-4c8d-a59d-4f6d3f9e2407\",\n      \"name\": \"Merge Caption & Positions\",\n      \"type\": \"n8n-nodes-base.merge\",\n      \"position\": [\n        2200,\n        560\n      ],\n      \"parameters\": {\n        \"mode\": \"combine\",\n        \"options\": {},\n        \"combineBy\": \"combineByPosition\"\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"b6c28913-b16a-4c59-aa49-47e9bb97f86d\",\n      \"name\": \"Get Image\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        680,\n        300\n      ],\n      \"parameters\": {\n        \"url\": \"https://images.pexels.com/photos/1267338/pexels-photo-1267338.jpeg?auto=compress&cs=tinysrgb&w=600\",\n        \"options\": {}\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"6c25054d-8103-4be9-bea7-6c3dd47f49a3\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        340,\n        80\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 586.25,\n        \"height\": 486.25,\n        \"content\": \"## 1. Import an Image \\n[Read more about the HTTP request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest)\\n\\nFor this demonstration, we'll grab an image off Pexels.com - a popular free stock photography site - by using the HTTP request node to download.\\n\\nIn your own workflows, this can be replaces by other triggers such as webhooks.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"d1b708e2-31c3-4cd1-a353-678bc33d4022\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        960,\n        140\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 888.75,\n        \"height\": 783.75,\n        \"content\": \"## 2. Using Vision Model to Generate Caption\\n[Learn more about the Basic LLM Chain](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm)\\n\\nn8n's basic LLM node supports multimodal input by allowing you to specify either a binary or an image url to send to a compatible LLM. This makes it easy to start utilising this powerful feature for visual classification or OCR tasks which have previously depended on more dedicated OCR models.\\n\\nHere, we've simply passed our image binary as a \\\"user message\\\" option, asking the LLM to help us generate a caption title and text which is appropriate for the given subject. Once generated, we'll pass this text along with the image to combine them both.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"36a39871-340f-4c44-90e6-74393b9be324\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1880,\n        280\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 753.75,\n        \"height\": 635,\n        \"content\": \"## 3. Overlay Caption on Image \\n[Read more about the Edit Image node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.editimage)\\n\\nFinally, we\\u2019ll perform some basic calculations to place the generated caption onto the image. With n8n's user-friendly image editing features, this can be done entirely within the workflow!\\n\\nThe Code node tool is ideal for these types of calculations and is used here to position the caption at the bottom of the image. To create the overlay, the Edit Image node enables us to insert text onto the image, which we\\u2019ll use to add the generated caption.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"d175fe97-064e-41da-95fd-b15668c330c4\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2660,\n        280\n      ],\n      \"parameters\": {\n        \"width\": 563.75,\n        \"height\": 411.25,\n        \"content\": \"**FIG 1.** Example input image with AI generated caption\\n![Example Output](https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/l5xbb4ze4wyxwwefqmnc#full-width)\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"23db0c90-45b6-4b85-b017-a52ad5a9ad5b\",\n      \"name\": \"Image Captioning Agent\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chainLlm\",\n      \"position\": [\n        1280,\n        560\n      ],\n      \"parameters\": {\n        \"text\": \"Generate a caption for this image.\",\n        \"messages\": {\n          \"messageValues\": [\n            {\n              \"message\": \"=You role is to provide an appropriate image caption for user provided images.\\n\\nThe individual components of a caption are as follows: who, when, where, context and miscellaneous. For a really good caption, follow this template: who + when + where + context + miscellaneous\\n\\nGive the caption a punny title.\"\n            },\n            {\n              \"type\": \"HumanMessagePromptTemplate\",\n              \"messageType\": \"imageBinary\"\n            }\n          ]\n        },\n        \"promptType\": \"define\",\n        \"hasOutputParser\": true\n      },\n      \"typeVersion\": 1.4\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Get Info\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge Image & Caption\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Image\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Resize For AI\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Get Info\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Resize For AI\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Image Captioning Agent\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Calculate Positioning\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge Caption & Positions\",\n            \"type\": \"main\",\n            \"index\": 1\n          }\n        ]\n      ]\n    },\n    \"Merge Image & Caption\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Calculate Positioning\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Merge Caption & Positions\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Image Captioning Agent\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge Image & Caption\",\n            \"type\": \"main\",\n            \"index\": 1\n          }\n        ]\n      ]\n    },\n    \"Google Gemini Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Image Captioning Agent\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Structured Output Parser\": {\n      \"ai_outputParser\": [\n        [\n          {\n            \"node\": \"Image Captioning Agent\",\n            \"type\": \"ai_outputParser\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Merge Caption & Positions\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Apply Caption to Image\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When clicking \\u2018Test workflow\\u2019\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Image\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.manualTrigger",
      "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "@n8n/n8n-nodes-langchain.outputParserStructured",
      "n8n-nodes-base.editImage",
      "n8n-nodes-base.editImage",
      "n8n-nodes-base.code",
      "n8n-nodes-base.editImage",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.merge",
      "n8n-nodes-base.merge",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "@n8n/n8n-nodes-langchain.chainLlm"
    ],
    "trigger": null
  }
}