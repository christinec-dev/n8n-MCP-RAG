{
  "source": "0913_Splitout_Code_Create_Webhook.json",
  "index": 1,
  "content": "{\n  \"meta\": {\n    \"instanceId\": \"4a11afdb3c52fd098e3eae9fad4b39fdf1bbcde142f596adda46c795e366b326\"\n  },\n  \"nodes\": [\n    {\n      \"id\": \"f1b36f4b-6558-4e83-a999-e6f2d24e196c\",\n      \"name\": \"OpenRouter Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",\n      \"position\": [\n        620,\n        240\n      ],\n      \"parameters\": {\n        \"model\": \"openai/gpt-4.1\",\n        \"options\": {}\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"89ca0a07-286f-4e68-9e85-0327a4859cc0\",\n      \"name\": \"Structured Output Parser\",\n      \"type\": \"@n8n/n8n-nodes-langchain.outputParserStructured\",\n      \"position\": [\n        900,\n        240\n      ],\n      \"parameters\": {\n        \"schemaType\": \"manual\",\n        \"inputSchema\": \"{\\n  \\\"type\\\": \\\"array\\\",\\n  \\\"items\\\": {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"name\\\": { \\\"type\\\": \\\"string\\\" },\\n      \\\"description\\\": { \\\"type\\\": \\\"string\\\" },\\n      \\\"rating\\\": { \\\"type\\\": \\\"number\\\" },\\n      \\\"reviews\\\": { \\\"type\\\": \\\"integer\\\" },\\n      \\\"price\\\": { \\\"type\\\": \\\"string\\\" }\\n    },\\n    \\\"required\\\": [\\\"name\\\", \\\"description\\\", \\\"rating\\\", \\\"reviews\\\", \\\"price\\\"]\\n  }\\n}\"\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"e4800c1d-c0d8-4093-81ec-fc19ad0034cd\",\n      \"name\": \"scrap url\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        240,\n        60\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.brightdata.com/request\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"zone\",\n              \"value\": \"web_unlocker1\"\n            },\n            {\n              \"name\": \"url\",\n              \"value\": \"={{ $json.url }}\"\n            },\n            {\n              \"name\": \"format\",\n              \"value\": \"raw\"\n            }\n          ]\n        },\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Authorization\",\n              \"value\": \"{{BRIGHTDATA_TOKEN}}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"1a1f768f-615d-4035-81b0-63b860f8e6ac\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        160,\n        -140\n      ],\n      \"parameters\": {\n        \"content\": \"## Web Scraper API\\n\\n[Inscription - Free Trial](https://get.brightdata.com/website-scraper)\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2f260d96-4fff-4a4f-af29-1e43f465d54c\",\n      \"name\": \"When clicking ‘Test workflow’\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        -440,\n        200\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"4be9033f-0b9f-466d-916e-88fbb2a80417\",\n      \"name\": \"url\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [\n        20,\n        200\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"21b6d21c-b977-4175-9068-e0e2e19fa472\",\n      \"name\": \"get urls to scrape\",\n      \"type\": \"n8n-nodes-base.googleSheets\",\n      \"position\": [\n        -200,\n        200\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"sheetName\": \"{{TRACK_SHEET_GID}}\",\n        \"documentId\": \"{{WEB_SHEET_ID}}\"\n      },\n      \"credentials\": {\n        \"googleSheetsOAuth2Api\": {\n          \"id\": \"KsXWRZTrfCUFrrHD\",\n          \"name\": \"Google Sheets\"\n        }\n      },\n      \"typeVersion\": 4.5\n    },\n    {\n      \"id\": \"25ef76ec-cf0d-422e-b060-68c49192a008\",\n      \"name\": \"clean html\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        460,\n        60\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// CleanHtmlFunction.js\\n// Purpose: n8n Function node to clean HTML: remove doctype, scripts, styles, head, comments, classes, extra blank lines, and non-whitelisted tags\\n\\nreturn items.map(item => {\\n  const rawHtml = item.json.data;\\n\\n  // 1) remove doctype, scripts, styles, comments and head section, and strip class attributes\\n  let cleaned = rawHtml\\n    .replace(/<!doctype html>/gi, '')\\n    .replace(/<script[\\\\s\\\\S]*?<\\\\/script>/gi, '')\\n    .replace(/<style[\\\\s\\\\S]*?<\\\\/style>/gi, '')\\n    .replace(/<!--[\\\\s\\\\S]*?-->/g, '')\\n    .replace(/<head[\\\\s\\\\S]*?<\\\\/head>/gi, '')\\n    .replace(/\\\\sclass=\\\"[^\\\"]*\\\"/gi, '');\\n\\n  // 2) define whitelist of tags to keep\\n  const allowedTags = [\\n    'h1','h2','h3','h4','h5','h6',\\n    'p','ul','ol','li',\\n    'strong','em','a','blockquote',\\n    'code','pre'\\n  ];\\n\\n  // 3) strip out all tags not in the whitelist, reconstruct allowed tags cleanly\\n  cleaned = cleaned.replace(\\n    /<\\\\/?([a-z][a-z0-9]*)\\\\b[^>]*>/gi,\\n    (match, tagName) => {\\n      const name = tagName.toLowerCase();\\n      if (allowedTags.includes(name)) {\\n        return match.startsWith('</') ? `</${name}>` : `<${name}>`;\\n      }\\n      return '';\\n    }\\n  );\\n\\n  // 4) collapse multiple blank or whitespace-only lines into a single newline\\n  cleaned = cleaned.replace(/(\\\\s*\\\\r?\\\\n\\\\s*){2,}/g, '\\\\n');\\n\\n  // 5) trim leading/trailing whitespace\\n  cleaned = cleaned.trim();\\n\\n  return {\\n    json: { cleanedHtml: cleaned }\\n  };\\n});\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"f72660d5-8427-4655-acbe-10365273c27b\",\n      \"name\": \"extract data\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chainLlm\",\n      \"position\": [\n        680,\n        60\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $json.cleanedHtml }}\",\n        \"messages\": {\n          \"messageValues\": [\n            {\n              \"message\": \"=You are an expert in web page scraping. Provide a structured response in JSON format. Only the response, without commentary.\\n\\nExtract the product information for {{ $(‘url’).item.json.url.split(’/s?k=’)[1].split(’&’)[0] }} present on the page.\\n\\nname\\ndescription\\nrating\\nreviews\\nprice\"\n            }\n          ]\n        },\n        \"promptType\": \"define\",\n        \"hasOutputParser\": true\n      },\n      \"typeVersion\": 1.6\n    },\n    {\n      \"id\": \"8b4af1bb-d7f8-456e-b630-ecd9b6e4bcdc\",\n      \"name\": \"add results\",\n      \"type\": \"n8n-nodes-base.googleSheets\",\n      \"position\": [\n        1280,\n        200\n      ],\n      \"parameters\": {\n        \"columns\": {\n          \"value\": {\n            \"name\": \"={{ $json.output.name }}\",\n            \"price\": \"={{ $json.output.price }}\",\n            \"rating\": \"={{ $json.output.rating }}\",\n            \"reviews\": \"={{ $json.output.reviews }}\",\n            \"description\": \"={{ $json.output.description }}\"\n          },\n          \"schema\": [\n            {\n              \"id\": \"name\",\n              \"type\": \"string\"\n            },\n            {\n              \"id\": \"description\",\n              \"type\": \"string\"\n            },\n            {\n              \"id\": \"rating\",\n              \"type\": \"string\"\n            },\n            {\n              \"id\": \"reviews\",\n              \"type\": \"string\"\n            },\n            {\n              \"id\": \"price\",\n              \"type\": \"string\"\n            }\n          ],\n          \"mappingMode\": \"defineBelow\"\n        },\n        \"options\": {},\n        \"operation\": \"append\",\n        \"sheetName\": \"{{RESULTS_SHEET_GID}}\",\n        \"documentId\": \"{{WEB_SHEET_ID}}\"\n      },\n      \"credentials\": {\n        \"googleSheetsOAuth2Api\": {\n          \"id\": \"KsXWRZTrfCUFrrHD\",\n          \"name\": \"Google Sheets\"\n        }\n      },\n      \"typeVersion\": 4.5\n    },\n    {\n      \"id\": \"7a5ba438-2ede-4d6c-b8fa-9a958ba1ef3e\",\n      \"name\": \"Split items\",\n      \"type\": \"n8n-nodes-base.splitOut\",\n      \"position\": [\n        1060,\n        60\n      ],\n      \"parameters\": {\n        \"include\": \"allOtherFields\",\n        \"options\": {},\n        \"fieldToSplitOut\": \"output\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"url\": {\n      \"main\": [\n        [],\n        [\n          {\n            \"node\": \"scrap url\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"scrap url\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"clean html\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"clean html\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"extract data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Split items\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"add results\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"add results\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"url\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"extract data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"get urls to scrape\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"url\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenRouter Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"extract data\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Structured Output Parser\": {\n      \"ai_outputParser\": [\n        [\n          {\n            \"node\": \"extract data\",\n            \"type\": \"ai_outputParser\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When clicking ‘Test workflow’\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"get urls to scrape\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "@n8n/n8n-nodes-langchain.outputParserStructured",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.manualTrigger",
      "n8n-nodes-base.splitInBatches",
      "n8n-nodes-base.googleSheets",
      "n8n-nodes-base.code",
      "@n8n/n8n-nodes-langchain.chainLlm",
      "n8n-nodes-base.googleSheets",
      "n8n-nodes-base.splitOut"
    ],
    "trigger": null
  }
}