{
  "source": "1878_Telegram_Wait_Create_Webhook.json",
  "index": 1,
  "content": "{\n  \"id\": \"hiCTcf6srJl3Xsxh\",\n  \"meta\": {\n    \"instanceId\": \"a2b23892dd6989fda7c1209b381f5850373a7d2b85609624d7c2b7a092671d44\"\n  },\n  \"name\": \"Auto-create and publish AI social videos with Telegram, GPT-4 and Blotato\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"b8a41b63-8c48-4964-befe-b949f3e9b755\",\n      \"name\": \"Upload Video to Blotato\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2580,\n        920\n      ],\n      \"parameters\": {\n        \"url\": \"https://backend.blotato.com/v2/media\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"url\",\n              \"value\": \"={{ $('Append Video Data to Google Sheet').item.json['url '] }}\"\n            }\n          ]\n        },\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"blotato-api-key\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"ac7a8bf1-b9ec-4a25-8c14-6d90abbc5568\",\n      \"name\": \"Post to Instagram\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2800,\n        120\n      ],\n      \"parameters\": {\n        \"url\": \"https://backend.blotato.com/v2/posts\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n  \\\"post\\\": {\\n    \\\"accountId\\\": \\\"{{ $('Assign Platform IDs for Blotato').item.json.instagram_id }}\\\",\\n    \\\"target\\\": {\\n      \\\"targetType\\\": \\\"instagram\\\"\\n    },\\n    \\\"content\\\": {\\n      \\\"text\\\": \\\"{{ $('Append Video Data to Google Sheet').item.json.caption }}\\\",\\n      \\\"platform\\\": \\\"instagram\\\",\\n      \\\"mediaUrls\\\": [\\n        \\\"{{ $json.url }}\\\"\\n      ]\\n    }\\n  }\\n}\\n\",\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"blotato-api-key\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"be0a1831-c0e3-4753-b114-2cd7cc66fae2\",\n      \"name\": \"Post to YouTube\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2800,\n        320\n      ],\n      \"parameters\": {\n        \"url\": \"https://backend.blotato.com/v2/posts\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n  \\\"post\\\": {\\n    \\\"accountId\\\": \\\"{{ $('Assign Platform IDs for Blotato').item.json.youtube_id }}\\\",\\n    \\\"target\\\": {\\n      \\\"targetType\\\": \\\"youtube\\\",\\n      \\\"title\\\": \\\"{{ $('Append Video Data to Google Sheet').item.json.Title }}\\\",\\n      \\\"privacyStatus\\\": \\\"unlisted\\\",\\n      \\\"shouldNotifySubscribers\\\": \\\"false\\\"\\n    },\\n    \\\"content\\\": {\\n      \\\"text\\\": \\\"{{ $('Append Video Data to Google Sheet').item.json.caption }}\\\",\\n      \\\"platform\\\": \\\"youtube\\\",\\n      \\\"mediaUrls\\\": [\\n        \\\"{{ $json.url }}\\\"\\n      ]\\n    }\\n  }\\n}\",\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"blotato-api-key\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"62087008-dd5a-49f4-a764-a10b1c82e4e0\",\n      \"name\": \"Post to TikTok\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2800,\n        520\n      ],\n      \"parameters\": {\n        \"url\": \"https://backend.blotato.com/v2/posts\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n  \\\"post\\\": {\\n    \\\"accountId\\\": \\\"{{ $('Assign Platform IDs for Blotato').item.json.tiktok_id }}\\\",\\n    \\\"target\\\": {\\n      \\\"targetType\\\": \\\"tiktok\\\",\\n      \\\"isYourBrand\\\": \\\"false\\\", \\n      \\\"disabledDuet\\\": \\\"false\\\",\\n      \\\"privacyLevel\\\": \\\"PUBLIC_TO_EVERYONE\\\",\\n      \\\"isAiGenerated\\\": \\\"true\\\",\\n      \\\"disabledStitch\\\": \\\"false\\\",\\n      \\\"disabledComments\\\": \\\"false\\\",\\n      \\\"isBrandedContent\\\": \\\"false\\\"\\n      \\n    },\\n    \\\"content\\\": {\\n      \\\"text\\\": \\\"{{ $('Append Video Data to Google Sheet').item.json.caption }}\\\",\\n      \\\"platform\\\": \\\"tiktok\\\",\\n      \\\"mediaUrls\\\": [\\n        \\\"{{ $json.url }}\\\"\\n      ]\\n    }\\n  }\\n}\\n\",\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"blotato-api-key\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"976b075d-c98b-45a4-bf76-06a34d5ccbf3\",\n      \"name\": \"Post to Facebook Page\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2800,\n        720\n      ],\n      \"parameters\": {\n        \"url\": \"https://backend.blotato.com/v2/posts\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n  \\\"post\\\": {\\n    \\\"accountId\\\": \\\"{{ $('Assign Platform IDs for Blotato').item.json.facebook_id }}\\\",\\n    \\\"target\\\": {\\n      \\\"targetType\\\": \\\"facebook\\\",\\n      \\\"pageId\\\": \\\"{{ $('Assign Platform IDs for Blotato').item.json.facebook_page_id }}\\\"\\n\\n      \\n    },\\n    \\\"content\\\": {\\n      \\\"text\\\": \\\"{{ $('Append Video Data to Google Sheet').item.json.caption }}\\\",\\n      \\\"platform\\\": \\\"facebook\\\",\\n      \\\"mediaUrls\\\": [\\n        \\\"{{ $json.url }}\\\"\\n      ]\\n    }\\n  }\\n}\",\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"blotato-api-key\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"c689c5d4-f63c-4fc2-b2d6-e1d2d03a236a\",\n      \"name\": \"Post to Threads\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2800,\n        920\n      ],\n      \"parameters\": {\n        \"url\": \"https://backend.blotato.com/v2/posts\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n  \\\"post\\\": {\\n    \\\"accountId\\\": \\\"{{ $('Assign Platform IDs for Blotato').item.json.threads_id }}\\\",\\n    \\\"target\\\": {\\n      \\\"targetType\\\": \\\"threads\\\"\\n      \\n    },\\n    \\\"content\\\": {\\n      \\\"text\\\": \\\"{{ $('Append Video Data to Google Sheet').item.json.caption }}\\\",\\n      \\\"platform\\\": \\\"threads\\\",\\n      \\\"mediaUrls\\\": [\\n        \\\"{{ $json.url }}\\\"\\n      ]\\n    }\\n  }\\n}\",\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"blotato-api-key\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"88c8bd03-342e-4844-9489-28a5a93426e0\",\n      \"name\": \"Post to Twitter (X)\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2800,\n        1120\n      ],\n      \"parameters\": {\n        \"url\": \"https://backend.blotato.com/v2/posts\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n  \\\"post\\\": {\\n    \\\"accountId\\\": \\\"{{ $('Assign Platform IDs for Blotato').item.json.twitter_id }}\\\",\\n    \\\"target\\\": {\\n      \\\"targetType\\\": \\\"twitter\\\"\\n      \\n    },\\n    \\\"content\\\": {\\n      \\\"text\\\": \\\"{{ $('Append Video Data to Google Sheet').item.json.caption }}\\\",\\n      \\\"platform\\\": \\\"twitter\\\",\\n      \\\"mediaUrls\\\": [\\n        \\\"{{ $json.url }}\\\"\\n      ]\\n    }\\n  }\\n}\\n\",\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"blotato-api-key\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"db6fb042-731e-46ce-8f4d-07e2b427739c\",\n      \"name\": \"Post to LinkedIn\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2800,\n        1320\n      ],\n      \"parameters\": {\n        \"url\": \"https://backend.blotato.com/v2/posts\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n  \\\"post\\\": {\\n    \\\"accountId\\\": \\\"{{ $('Assign Platform IDs for Blotato').item.json.linkedin_id }}\\\",\\n    \\\"target\\\": {\\n      \\\"targetType\\\": \\\"linkedin\\\"\\n      \\n    },\\n    \\\"content\\\": {\\n      \\\"text\\\": \\\"{{ $('Append Video Data to Google Sheet').item.json.caption }}\\\",\\n      \\\"platform\\\": \\\"linkedin\\\",\\n      \\\"mediaUrls\\\": [\\n        \\\"{{ $json.url }}\\\"\\n      ]\\n    }\\n  }\\n}\\n\",\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"blotato-api-key\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"2102531c-624a-49b6-8b99-7a43e5067585\",\n      \"name\": \"Post to Bluesky\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2800,\n        1520\n      ],\n      \"parameters\": {\n        \"url\": \"https://backend.blotato.com/v2/posts\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n  \\\"post\\\": {\\n    \\\"accountId\\\": \\\"{{ $('Assign Platform IDs for Blotato').item.json.bluesky_id }}\\\",\\n    \\\"target\\\": {\\n      \\\"targetType\\\": \\\"bluesky\\\"\\n      \\n    },\\n    \\\"content\\\": {\\n      \\\"text\\\": \\\"{{ $('Append Video Data to Google Sheet').item.json.caption }}\\\",\\n      \\\"platform\\\": \\\"bluesky\\\",\\n      \\\"mediaUrls\\\": [\\n        \\\"https://pbs.twimg.com/media/GE8MgIiWEAAfsK3.jpg\\\"\\n      ]\\n    }\\n  }\\n}\\n\",\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"blotato-api-key\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"a9826150-6e26-4174-af74-1b4dd8016638\",\n      \"name\": \"Post to Pinterest\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2800,\n        1720\n      ],\n      \"parameters\": {\n        \"url\": \"https://backend.blotato.com/v2/posts\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n  \\\"post\\\": {\\n    \\\"accountId\\\": \\\"{{ $('Assign Platform IDs for Blotato').item.json.pinterest_id }}\\\",\\n    \\\"target\\\": {\\n      \\\"targetType\\\": \\\"pinterest\\\",\\n      \\\"boardId\\\": \\\"{{ $('Assign Platform IDs for Blotato').item.json.pinterest_board_id }}\\\"      \\n    },\\n    \\\"content\\\": {\\n      \\\"text\\\": \\\"{{ $('Append Video Data to Google Sheet').item.json.caption }}\\\",\\n      \\\"platform\\\": \\\"pinterest\\\",\\n      \\\"mediaUrls\\\": [\\n        \\\"https://pbs.twimg.com/media/GE8MgIiWEAAfsK3.jpg\\\"\\n      ]\\n    }\\n  }\\n}\\n\",\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"blotato-api-key\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"fcd6f25a-f6e9-4952-8be8-37eafbf7d07f\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2320,\n        0\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 880,\n        \"height\": 1900,\n        \"content\": \"# 🟥 STEP 5 — Auto-Publish to 9 Social Platforms\\n## The final step automates distribution using Blotato’s API.\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"eb822c9d-cb51-4df7-98d6-a0941a9833bd\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        0,\n        0\n      ],\n      \"parameters\": {\n        \"width\": 2260,\n        \"height\": 760,\n        \"content\": \"# 🟫 STEP 1 — Create Video Using AI (image or text)\\n## This step handles the full video creation pipeline using AI.\\n### It starts from a Telegram message containing a prompt or image, \\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"1c209fe5-fd5a-45d7-9546-421710eb501d\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        0,\n        840\n      ],\n      \"parameters\": {\n        \"width\": 1500,\n        \"height\": 520,\n        \"content\": \"# 🟫 STEP 2 — Create Music\\n## Here, a short-form voice-over script is generated using GPT-4 based on the topic.\\n### The script is converted to speech, uploaded, and merged with the AI-generated video — resulting in a fully narrated visual asset.\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0bf198f2-16f9-4ae9-aef3-919b5755da5a\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        0,\n        1440\n      ],\n      \"parameters\": {\n        \"width\": 1500,\n        \"height\": 460,\n        \"content\": \"# 🟫 STEP 3 — Add Captions to Enhance Engagement\\n## To increase accessibility and boost social engagement, \\n## this step overlays professional-looking subtitles on the video using a styling template.\\n### This results in a final video that includes visuals, voice-over, and captions.\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"00c67803-c937-491e-bf2a-2d76774de07f\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1580,\n        840\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 680,\n        \"height\": 1060,\n        \"content\": \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n# 🟫 STEP 4 — Save Video & Notify via Telegram\\n## This step generates a title and caption for the video, \\n## saves the content metadata to a Google Sheet for future tracking, \\n### And sends both the final video and its description to a Telegram chat for validation or reuse.\\n### The script is converted to speech, uploaded, and merged with the AI-generated video — resulting in a fully narrated visual asset.\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"5a08a003-68b1-48e5-8851-bb1a77d18a37\",\n      \"name\": \"Trigger Telegram Prompt or Image\",\n      \"type\": \"n8n-nodes-base.telegramTrigger\",\n      \"position\": [\n        80,\n        280\n      ],\n      \"webhookId\": \"20261394-b809-4b76-9b7b-36a20af57673\",\n      \"parameters\": {\n        \"updates\": [\n          \"message\"\n        ],\n        \"additionalFields\": {}\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"hcYH7o64erx701LY\",\n          \"name\": \"Telegram account 3\"\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"6c4d7dd5-7676-465a-ac02-cf7192bf70ab\",\n      \"name\": \"Split Prompt or Image Input\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        280,\n        280\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const input = $input.first().json.message.text || $input.first().json.message.caption;\\n\\n// Remove optional \\\"generate video\\\" prefix\\nconst cleaned = input.replace(/^generate video[:]?/i, '').trim();\\n\\n// Split by comma\\nconst parts = cleaned.split(',').map(p => p.trim());\\n\\n// Assign values even if missing\\nconst videoPrompt = parts[0] || \\\"\\\";\\nconst captionIdea = parts[1] || \\\"\\\";\\nconst musicStyle = parts[2] || \\\"\\\";\\n\\nreturn [\\n  {\\n    json: {\\n      videoPrompt,\\n      captionIdea,\\n      musicStyle\\n    }\\n  }\\n];\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"3c203e0c-d133-4c6f-a801-2e5dab690b8a\",\n      \"name\": \"Condition Input Type (Image or Text)\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        460,\n        280\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"8b4d3f92-c9e0-45e6-8b6a-4fa487e6b32f\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"notEmpty\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $('Trigger Telegram Prompt or Image').item.json.message.text }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"1898fd9c-2164-44d0-8ada-192107565b64\",\n      \"name\": \"Download Image from Telegram\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"position\": [\n        760,\n        440\n      ],\n      \"webhookId\": \"1d115d8e-62c9-4f43-898e-20892b25fdb9\",\n      \"parameters\": {\n        \"fileId\": \"={{ $('Trigger Telegram Prompt or Image').item.json.message.photo[3].file_id }}\",\n        \"resource\": \"file\"\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"hcYH7o64erx701LY\",\n          \"name\": \"Telegram account 3\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"6f9755e0-db11-4c3e-9d1b-f9c97c832cbd\",\n      \"name\": \"Extract Image File URL\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        960,\n        440\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api.telegram.org/file/bot_YOURTOKEN/{{ $('Download Image from Telegram').item.json.result.file_path }}\",\n        \"options\": {}\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"66abae9c-10ae-4845-9070-cd5f2d208782\",\n      \"name\": \"Upload Image to Cloudinary\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1120,\n        440\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.cloudinary.com/v1_1/dc5wapno3/image/upload\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"sendBody\": true,\n        \"contentType\": \"multipart-form-data\",\n        \"authentication\": \"genericCredentialType\",\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"file\",\n              \"parameterType\": \"formBinaryData\",\n              \"inputDataFieldName\": \"data\"\n            },\n            {\n              \"name\": \"upload_preset\",\n              \"value\": \"n8n_video\"\n            }\n          ]\n        },\n        \"genericAuthType\": \"httpBasicAuth\"\n      },\n      \"credentials\": {\n        \"httpBasicAuth\": {\n          \"id\": \"K1UGehJnDI8N25UA\",\n          \"name\": \"Unnamed credential\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"26979ac8-6f1d-4a9b-b0b5-42b4d7165ffe\",\n      \"name\": \"Convert Image to Video\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1320,\n        440\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.piapi.ai/api/v1/task\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n\\\"model\\\": \\\"kling\\\",\\n\\\"task_type\\\": \\\"video_generation\\\",\\n\\\"input\\\": {\\n\\\"prompt\\\": \\\"{{ $('Split Prompt or Image Input').item.json.videoPrompt }}\\\",\\n\\\"image_url\\\": \\\"{{ $json.secure_url }}\\\",\\n\\\"negative_prompt\\\": \\\"\\\",\\n\\\"cfg_scale\\\": 0.5,\\n\\\"duration\\\": 5,\\n\\\"version\\\": \\\"1.6\\\",\\n\\\"camera_control\\\": {\\n\\\"type\\\": \\\"simple\\\",\\n\\\"config\\\": {\\n\\\"horizontal\\\": 0,\\n\\\"vertical\\\": 0,\\n\\\"pan\\\": 0,\\n\\\"tilt\\\": 0,\\n\\\"roll\\\": 0,\\n\\\"zoom\\\": 0\\n}\\n},\\n\\\"mode\\\": \\\"std\\\"\\n},\\n\\\"config\\\": {\\n\\\"service_mode\\\": \\\"\\\",\\n\\\"webhook_config\\\": {\\n\\\"endpoint\\\": \\\"\\\",\\n\\\"secret\\\": \\\"\\\"\\n}\\n}\\n}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\"\n      },\n      \"credentials\": {\n        \"httpBasicAuth\": {\n          \"id\": \"K1UGehJnDI8N25UA\",\n          \"name\": \"Unnamed credential\"\n        },\n        \"httpHeaderAuth\": {\n          \"id\": \"aoHHS9dlGs8ViUeX\",\n          \"name\": \"Header Auth account 3\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"36168808-54e8-4826-a3f5-bd8148da9a55\",\n      \"name\": \"Wait for Image-to-Video Rendering\",\n      \"type\": \"n8n-nodes-base.wait\",\n      \"position\": [\n        1520,\n        440\n      ],\n      \"webhookId\": \"adf3489e-21ed-42de-8cc6-70c706cacbbf\",\n      \"parameters\": {\n        \"unit\": \"minutes\",\n        \"amount\": 2\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"dd364492-ffcb-47e4-a24e-fb5b3c5b4ab5\",\n      \"name\": \"Get Image-Based Video URL\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1720,\n        440\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api.piapi.ai/api/v1/task/{{ $json.data.task_id }}\",\n        \"options\": {\n          \"response\": {\n            \"response\": {\n              \"responseFormat\": \"json\"\n            }\n          }\n        },\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\"\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"aoHHS9dlGs8ViUeX\",\n          \"name\": \"Header Auth account 3\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"8a6b0c07-8304-403e-842e-ea60b0d5e939\",\n      \"name\": \"Generate Video with blotato\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        760,\n        120\n      ],\n      \"parameters\": {\n        \"url\": \"https://backend.blotato.com/v2/videos/creations\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n  \\\"script\\\": \\\"{{ $json.videoPrompt }}\\\",\\n  \\\"style\\\": \\\"cinematic\\\",\\n  \\\"template\\\": {\\n    \\\"id\\\": \\\"base/pov/wakeup\\\"\\n  }\\n}\\n\",\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"blotato-api-key\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"14f39088-402d-477e-afe7-1fa8a3f0edf5\",\n      \"name\": \"Wait for blotato Video Rendering\",\n      \"type\": \"n8n-nodes-base.wait\",\n      \"position\": [\n        1520,\n        120\n      ],\n      \"webhookId\": \"00fc9999-cacc-4c9b-b71b-75757c56f31e\",\n      \"parameters\": {\n        \"unit\": \"minutes\",\n        \"amount\": 2\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"540a8cbf-0b41-4102-b2c3-a69480603cb6\",\n      \"name\": \"Get blotato Video URL\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1720,\n        120\n      ],\n      \"parameters\": {\n        \"url\": \"=https://backend.blotato.com/v2/videos/creations/{{ $json.item.id }}\",\n        \"options\": {\n          \"response\": {\n            \"response\": {\n              \"responseFormat\": \"json\"\n            }\n          }\n        },\n        \"sendHeaders\": true,\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"blotato-api-key\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"e549069b-0acb-44dd-ba58-d6fe76b4b782\",\n      \"name\": \"Merge Video Data (Image or Prompt)\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        2060,\n        440\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"5ca907c0-f556-488d-ad59-714089b2a594\",\n              \"name\": \"url_video\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.item.mediaUrl }}{{ $json.data.output.video_url }} \"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"4482e940-fdee-498a-9b4c-dd44a12f04a9\",\n      \"name\": \"Generate Music with Piapi\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        60,\n        1040\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.piapi.ai/api/v1/task\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n  \\\"model\\\": \\\"Qubico/diffrhythm\\\",\\n  \\\"task_type\\\": \\\"txt2audio-base\\\",\\n  \\\"input\\\": {\\n    \\\"style_prompt\\\": \\\"{{ $('Split Prompt or Image Input').item.json.musicStyle }}\\\",\\n    \\\"lyrics\\\": \\\"\\\",\\n    \\\"style_audio\\\": \\\"\\\"\\n  },\\n  \\\"config\\\": {\\n    \\\"webhook_config\\\": {\\n      \\\"endpoint\\\": \\\"\\\",\\n      \\\"secret\\\": \\\"\\\"\\n    }\\n  }\\n}\\n\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\"\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"aoHHS9dlGs8ViUeX\",\n          \"name\": \"Header Auth account 3\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"e2187d71-aace-4cf4-8ef3-b4b14d255f54\",\n      \"name\": \"Wait for Music Generation\",\n      \"type\": \"n8n-nodes-base.wait\",\n      \"position\": [\n        480,\n        1040\n      ],\n      \"webhookId\": \"ecf06ea7-0f87-42f6-939f-688e7eb20da1\",\n      \"parameters\": {\n        \"unit\": \"minutes\",\n        \"amount\": 2\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"8ea22e87-0803-4618-a4cb-08a6b720838e\",\n      \"name\": \"Get Music File URL\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        700,\n        1040\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api.piapi.ai/api/v1/task/{{ $json.data.task_id }}\",\n        \"options\": {\n          \"response\": {\n            \"response\": {\n              \"responseFormat\": \"json\"\n            }\n          }\n        },\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\"\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"aoHHS9dlGs8ViUeX\",\n          \"name\": \"Header Auth account 3\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"61b49201-e9d5-44b8-be6c-d0175596d261\",\n      \"name\": \"Generate Script (GPT-4o-mini)\",\n      \"type\": \"@n8n/n8n-nodes-langchain.openAi\",\n      \"position\": [\n        920,\n        1040\n      ],\n      \"parameters\": {\n        \"modelId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o-mini\",\n          \"cachedResultName\": \"GPT-4O-MINI\"\n        },\n        \"options\": {},\n        \"messages\": {\n          \"values\": [\n            {\n              \"content\": \"=You are a copywriter for short-form vertical videos.\\nVideo topic:\\n{{ $('Split Prompt or Image Input').first().json.captionIdea }}\\nWrite two short lines of overlay text:\\n\\ntext1: Hook (no period)\\n\\ntext2: Emotional or curiosity payoff (ends with \\\"...\\\")\\n\\nExample:\\ntext1: Why I broke up with ChatGPT\\ntext2: this other AI gets me so much better...\\n\\nRules:\\n\\nMax 50 characters per line\\n\\nOutput only:\\ntext1: ...\\ntext2: ...\\n\\nNo quotes, brackets, emojis, hashtags, or titles\\n\\n\"\n            }\n          ]\n        }\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"6h3DfVhNPw9I25nO\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.8\n    },\n    {\n      \"id\": \"30394110-bc11-4139-8303-f536e22733d4\",\n      \"name\": \"Split Script\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1300,\n        1040\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const input = $input.first().json;\\n\\n// Auto-detect AI output path\\nlet aiOutput = \\\"\\\";\\n\\nif (input?.choices?.[0]?.message?.content) {\\n  aiOutput = input.choices[0].message.content;\\n} else if (input?.message?.content) {\\n  aiOutput = input.message.content;\\n} else if (typeof input?.content === \\\"string\\\") {\\n  aiOutput = input.content;\\n} else {\\n  // Optional: expose the input in case of failure for debug\\n  throw new Error(\\\"❌ No valid AI output found. Check the structure of the input.\\\");\\n}\\n\\nconst lines = aiOutput.split('\\\\n').map(l => l.trim());\\nlet text1 = \\\"\\\";\\nlet text2 = \\\"\\\";\\n\\nfor (const line of lines) {\\n  if (line.toLowerCase().startsWith(\\\"text1:\\\")) {\\n    text1 = line.replace(/^text1:\\\\s*/i, '');\\n  } else if (line.toLowerCase().startsWith(\\\"text2:\\\")) {\\n    text2 = line.replace(/^text2:\\\\s*/i, '');\\n  }\\n}\\n\\nreturn [\\n  {\\n    json: {\\n      text1,\\n      text2\\n    }\\n  }\\n];\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"15d7845c-0e0b-4f06-b48e-5ea8add6501a\",\n      \"name\": \"Merge Video + Music\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        80,\n        1640\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.json2video.com/v2/movies\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n  \\\"id\\\": \\\"qbaasr7s\\\",\\n  \\\"resolution\\\": \\\"instagram-story\\\",\\n  \\\"quality\\\": \\\"high\\\",\\n  \\\"scenes\\\": [\\n    {\\n      \\\"id\\\": \\\"qyjh9lwj\\\",\\n      \\\"comment\\\": \\\"Scene 1\\\",\\n      \\\"elements\\\": []\\n    }\\n  ],\\n  \\\"elements\\\": [\\n    {\\n      \\\"id\\\": \\\"q6dznzcv\\\",\\n      \\\"type\\\": \\\"video\\\",\\n      \\\"src\\\": \\\"{{ $('Merge Video Data (Image or Prompt)').item.json.url_video }}\\\",\\n      \\\"resize\\\": \\\"cover\\\"\\n    },\\n    {\\n      \\\"id\\\": \\\"top-text\\\",\\n      \\\"type\\\": \\\"text\\\",\\n      \\\"text\\\": \\\"{{ $json.text1 }}\\\",\\n      \\\"settings\\\": {\\n        \\\"font-family\\\": \\\"Libre Baskerville\\\",\\n        \\\"font-size\\\": \\\"80px\\\",\\n        \\\"color\\\": \\\"#ffffff\\\",\\n        \\\"horizontal-position\\\": \\\"center\\\",\\n        \\\"vertical-position\\\": \\\"top\\\",\\n        \\\"margin-top\\\": \\\"100px\\\",\\n        \\\"word-break\\\": \\\"break-word\\\",\\n        \\\"overflow-wrap\\\": \\\"break-word\\\",\\n        \\\"font-weight\\\": \\\"normal\\\",\\n        \\\"text-shadow\\\": \\\"3px 3px 0 #000, -3px -3px 0 #000, 3px -3px 0 #000, -3px 3px 0 #000, 0px 3px 0 #000, 3px 0px 0 #000, -3px 0px 0 #000, 0px -3px 0 #000\\\"\\n      }\\n    },\\n    {\\n      \\\"id\\\": \\\"bottom-text\\\",\\n      \\\"type\\\": \\\"text\\\",\\n      \\\"text\\\": \\\"{{ $json.text2 }}\\\",\\n      \\\"settings\\\": {\\n        \\\"font-family\\\": \\\"Libre Baskerville\\\",\\n        \\\"font-size\\\": \\\"80px\\\",\\n        \\\"color\\\": \\\"#ffffff\\\",\\n        \\\"horizontal-position\\\": \\\"center\\\",\\n        \\\"vertical-position\\\": \\\"bottom\\\",\\n        \\\"margin-bottom\\\": \\\"250px\\\",\\n        \\\"word-break\\\": \\\"break-word\\\",\\n        \\\"overflow-wrap\\\": \\\"break-word\\\",\\n        \\\"font-weight\\\": \\\"normal\\\",\\n        \\\"text-shadow\\\": \\\"3px 3px 0 #000, -3px -3px 0 #000, 3px -3px 0 #000, -3px 3px 0 #000, 0px 3px 0 #000, 3px 0px 0 #000, -3px 0px 0 #000, 0px -3px 0 #000\\\"\\n      }\\n    },\\n    {\\n      \\\"id\\\": \\\"music-track\\\",\\n      \\\"type\\\": \\\"audio\\\",\\n      \\\"src\\\": \\\"{{ $('Get Music File URL').item.json.data.output.audio_url }}\\\",\\n      \\\"volume\\\": 0.5,\\n      \\\"duration\\\": -2\\n    }\\n  ]\\n}\\n\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpCustomAuth\"\n      },\n      \"credentials\": {\n        \"httpCustomAuth\": {\n          \"id\": \"GELGbE2ThQ80HY5A\",\n          \"name\": \"Custom Auth account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"5b014111-3dfc-4190-83cf-b5915a47df1b\",\n      \"name\": \"Wait for Fusion Completion\",\n      \"type\": \"n8n-nodes-base.wait\",\n      \"position\": [\n        260,\n        1640\n      ],\n      \"webhookId\": \"8d188124-8aeb-49b0-bdf8-5a9f42e205e5\",\n      \"parameters\": {\n        \"unit\": \"minutes\",\n        \"amount\": 1\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"fdc02ec0-b3ce-49e3-9f20-096c679eacbe\",\n      \"name\": \"Get Final Video URL\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        500,\n        1640\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api.json2video.com/v2/movies?id={{ $json.project }}\",\n        \"options\": {},\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpCustomAuth\"\n      },\n      \"credentials\": {\n        \"httpCustomAuth\": {\n          \"id\": \"GELGbE2ThQ80HY5A\",\n          \"name\": \"Custom Auth account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"9b865654-337a-4dd5-89d4-4a131f6eed75\",\n      \"name\": \"Generate Social Caption (GPT-4)\",\n      \"type\": \"@n8n/n8n-nodes-langchain.openAi\",\n      \"position\": [\n        720,\n        1640\n      ],\n      \"parameters\": {\n        \"modelId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o-mini\",\n          \"cachedResultName\": \"GPT-4O-MINI\"\n        },\n        \"options\": {},\n        \"messages\": {\n          \"values\": [\n            {\n              \"content\": \"=Write a short social media caption from this topic:\\n{{ $('Split Prompt or Image Input').first().json.captionIdea }}\\n\\nMake it actionable, not generic or motivational.\\nAdd 1 problem + 1 specific solution.\\nUse 1 sentence per line, with an empty line between each.\\ndon't asking them to comment.\\nMaximum 150 characters\\n\\n🧠 Caption Guidelines:\\nKeep it short, compelling, and value-driven.\\n\\nAvoid generic motivational fluff — focus on real, actionable insight or highlight a problem/solution pattern.\\n\\n\\nStructure:\\n\\nOne sentence per line.\\n\\nNote: Do not use this character: \\\" in the result.\\nReturn a single short paragraph with no line breaks and no special characters.\\nNote: Do not use this character: \\\" in the result.\"\n            }\n          ]\n        }\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"6h3DfVhNPw9I25nO\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.8\n    },\n    {\n      \"id\": \"99a4282b-5d68-4f4d-8b1e-c7975221b92f\",\n      \"name\": \"Generate SEO Title (GPT-4)\",\n      \"type\": \"@n8n/n8n-nodes-langchain.openAi\",\n      \"position\": [\n        1160,\n        1640\n      ],\n      \"parameters\": {\n        \"modelId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o-mini\",\n          \"cachedResultName\": \"GPT-4O-MINI\"\n        },\n        \"options\": {},\n        \"messages\": {\n          \"values\": [\n            {\n              \"content\": \"=Act as a YouTube Title Expert.\\nBased on the following video description:\\n{{ $('Split Prompt or Image Input').first().json.captionIdea }}\\nGenerate a short, punchy, and curiosity-driven YouTube video title that makes people want to click.\\nMake it feel urgent, valuable, or surprising — and avoid generic or boring phrases.\\nKeep it under 70 characters. Return only the title, no explanations.\\nNote: The title must be free of special characters and the character \\\". Return only a plain text title.\\n- Do not start the title with this character : \\\"\\n- Do not finish the title with this character : \\\"\\n- You Never user this character : \\\" in the title\\n\"\n            }\n          ]\n        }\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"6h3DfVhNPw9I25nO\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.8\n    },\n    {\n      \"id\": \"3cbe9fb8-1685-4169-9ee1-3ae72f3190e3\",\n      \"name\": \"Append Video Data to Google Sheet\",\n      \"type\": \"n8n-nodes-base.googleSheets\",\n      \"position\": [\n        1640,\n        920\n      ],\n      \"parameters\": {\n        \"columns\": {\n          \"value\": {\n            \"url \": \"={{ $('Get Final Video URL').item.json.movie.url }}\",\n            \"Title\": \"={{ $json.message.content }}\",\n            \"caption\": \"={{ $('Generate Social Caption (GPT-4)').item.json.message.content }}\"\n          },\n          \"schema\": [\n            {\n              \"id\": \"url \",\n              \"type\": \"string\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"url \",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"caption\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"caption\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Title\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"Title\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"status\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": true,\n              \"required\": false,\n              \"displayName\": \"status\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            }\n          ],\n          \"mappingMode\": \"defineBelow\",\n          \"matchingColumns\": [],\n          \"attemptToConvertTypes\": false,\n          \"convertFieldsToString\": false\n        },\n        \"options\": {},\n        \"operation\": \"append\",\n        \"sheetName\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"=\"\n        },\n        \"documentId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"=\"\n        }\n      },\n      \"credentials\": {\n        \"googleSheetsOAuth2Api\": {\n          \"id\": \"51us92xkOlrvArhV\",\n          \"name\": \"Google Sheets account\"\n        }\n      },\n      \"typeVersion\": 4.5\n    },\n    {\n      \"id\": \"dd947cd3-747f-484f-93ea-990d977ab113\",\n      \"name\": \"Send Final Video to Telegram\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"position\": [\n        1860,\n        920\n      ],\n      \"webhookId\": \"3046e11e-60db-4fcf-9351-22758c833f83\",\n      \"parameters\": {\n        \"text\": \"=Here's your scheduled video:\\n----------------\\nCaption Text: {{ $json.caption }}\\n----------------\\nVideo Link: {{ $json['url '] }}\",\n        \"chatId\": \"={{ $('Trigger Telegram Prompt or Image').first().json.message.chat.id }}\",\n        \"additionalFields\": {}\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"hcYH7o64erx701LY\",\n          \"name\": \"Telegram account 3\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"c17efd9a-2428-4c36-acd8-69c47d01b961\",\n      \"name\": \"Send Caption to Telegram\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"position\": [\n        2060,\n        920\n      ],\n      \"webhookId\": \"1282505d-dcc3-4dbd-9657-fb1362033382\",\n      \"parameters\": {\n        \"file\": \"={{ $('Append Video Data to Google Sheet').item.json['url '] }}\",\n        \"chatId\": \"={{ $json.result.chat.id }}\",\n        \"operation\": \"sendVideo\",\n        \"additionalFields\": {}\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"hcYH7o64erx701LY\",\n          \"name\": \"Telegram account 3\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"b3311fa9-c473-4bd1-8de7-0930c4e799cd\",\n      \"name\": \"Assign Platform IDs for Blotato\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        2360,\n        920\n      ],\n      \"parameters\": {\n        \"mode\": \"raw\",\n        \"options\": {},\n        \"jsonOutput\": \"{\\n  \\\"instagram_id\\\": \\\"1111\\\",\\n  \\\"youtube_id\\\": \\\"2222\\\",\\n  \\\"threads_id\\\": \\\"3333\\\",\\n  \\\"tiktok_id\\\": \\\"4444\\\",\\n  \\\"facebook_id\\\": \\\"5555\\\",\\n  \\\"facebook_page_id\\\": \\\"6666\\\",\\n  \\\"twitter_id\\\": \\\"7777\\\",\\n  \\\"linkedin_id\\\": \\\"8888\\\",\\n  \\\"pinterest_id\\\": \\\"9999\\\",\\n  \\\"pinterest_board_id\\\": \\\"1010\\\",\\n  \\\"bluesky_id\\\": \\\"11111111\\\"\\n}\\n\"\n      },\n      \"typeVersion\": 3.4\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"2e5e291a-63f6-4680-9cf5-a3baa2ee917d\",\n  \"connections\": {\n    \"Split Script\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge Video + Music\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Music File URL\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Generate Script (GPT-4o-mini)\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Final Video URL\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Generate Social Caption (GPT-4)\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Merge Video + Music\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Wait for Fusion Completion\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get blotato Video URL\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge Video Data (Image or Prompt)\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Convert Image to Video\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Wait for Image-to-Video Rendering\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Extract Image File URL\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Upload Image to Cloudinary\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Upload Video to Blotato\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Post to Instagram\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Post to YouTube\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Post to TikTok\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Post to Facebook Page\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Post to Threads\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Post to Twitter (X)\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Post to LinkedIn\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Post to Bluesky\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Post to Pinterest\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Send Caption to Telegram\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Assign Platform IDs for Blotato\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Generate Music with Piapi\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Wait for Music Generation\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Image-Based Video URL\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge Video Data (Image or Prompt)\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Wait for Music Generation\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Music File URL\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Generate SEO Title (GPT-4)\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Append Video Data to Google Sheet\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Upload Image to Cloudinary\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Convert Image to Video\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Wait for Fusion Completion\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Final Video URL\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Generate Video with blotato\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Wait for blotato Video Rendering\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Split Prompt or Image Input\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Condition Input Type (Image or Text)\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Download Image from Telegram\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Extract Image File URL\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Send Final Video to Telegram\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Send Caption to Telegram\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Generate Script (GPT-4o-mini)\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split Script\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Assign Platform IDs for Blotato\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Upload Video to Blotato\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Generate Social Caption (GPT-4)\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Generate SEO Title (GPT-4)\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Trigger Telegram Prompt or Image\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split Prompt or Image Input\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Wait for blotato Video Rendering\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get blotato Video URL\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Append Video Data to Google Sheet\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Send Final Video to Telegram\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Wait for Image-to-Video Rendering\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Image-Based Video URL\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Merge Video Data (Image or Prompt)\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Generate Music with Piapi\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Condition Input Type (Image or Text)\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Generate Video with blotato\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Download Image from Telegram\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.telegramTrigger",
      "n8n-nodes-base.code",
      "n8n-nodes-base.if",
      "n8n-nodes-base.telegram",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.wait",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.wait",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.set",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.wait",
      "n8n-nodes-base.httpRequest",
      "@n8n/n8n-nodes-langchain.openAi",
      "n8n-nodes-base.code",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.wait",
      "n8n-nodes-base.httpRequest",
      "@n8n/n8n-nodes-langchain.openAi",
      "@n8n/n8n-nodes-langchain.openAi",
      "n8n-nodes-base.googleSheets",
      "n8n-nodes-base.telegram",
      "n8n-nodes-base.telegram",
      "n8n-nodes-base.set"
    ],
    "trigger": "trigger telegram prompt or image"
  }
}