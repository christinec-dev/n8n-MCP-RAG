{
  "source": "1725_HTTP_Code_Process_Webhook.json",
  "index": 1,
  "content": "{\n  \"id\": \"VU0kmvnWzctSFm2M\",\n  \"meta\": {\n    \"instanceId\": \"534a4ec070e550167af0cc407c76e029ac0ae69bef901c2f9ef440d79bfa5792\"\n  },\n  \"name\": \"Convert Parquet, Avro, ORC & Feather via ParquetReader to JSON\",\n  \"tags\": [\n    {\n      \"id\": \"1PTaY70kFjD8F12p\",\n      \"name\": \"Convert\",\n      \"createdAt\": \"2025-03-30T09:38:16.466Z\",\n      \"updatedAt\": \"2025-03-30T09:38:16.466Z\"\n    },\n    {\n      \"id\": \"98v0QSKrvfH5dl34\",\n      \"name\": \"Avro\",\n      \"createdAt\": \"2025-03-30T09:38:06.656Z\",\n      \"updatedAt\": \"2025-03-30T09:38:06.656Z\"\n    },\n    {\n      \"id\": \"Q0sqo52DKATPDab2\",\n      \"name\": \"ORC\",\n      \"createdAt\": \"2025-03-30T09:38:09.923Z\",\n      \"updatedAt\": \"2025-03-30T09:38:09.923Z\"\n    },\n    {\n      \"id\": \"b1s8WFj3TfMpoOQu\",\n      \"name\": \"Feather\",\n      \"createdAt\": \"2025-03-30T09:38:12.227Z\",\n      \"updatedAt\": \"2025-03-30T09:38:12.227Z\"\n    },\n    {\n      \"id\": \"fFnESRcynarFqlLf\",\n      \"name\": \"Parquet\",\n      \"createdAt\": \"2025-03-30T09:38:04.286Z\",\n      \"updatedAt\": \"2025-03-30T09:38:04.286Z\"\n    }\n  ],\n  \"nodes\": [\n    {\n      \"id\": \"651a10dc-1c91-4957-bcdd-3e55d7328f04\",\n      \"name\": \"Send to Parquet API\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1100,\n        440\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.parquetreader.com/parquet?source=n8n\",\n        \"options\": {\n          \"bodyContentType\": \"multipart-form-data\"\n        },\n        \"requestMethod\": \"POST\",\n        \"jsonParameters\": true,\n        \"sendBinaryData\": true,\n        \"binaryPropertyName\": \"=file0\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"42a7e623-ca11-4d38-94bb-cfb48d021a5c\",\n      \"name\": \"Webhook\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"notes\": \"Example trigger flow:\\n\\ncurl -X POST http://localhost:5678/webhook-test/convert \\\\\\n  -F \\\"file=@converted.parquet\\\"\",\n      \"position\": [\n        900,\n        440\n      ],\n      \"webhookId\": \"0b1223c9-c117-45f9-9931-909f2db28955\",\n      \"parameters\": {\n        \"path\": \"convert\",\n        \"options\": {\n          \"binaryPropertyName\": \"file\"\n        },\n        \"httpMethod\": \"POST\",\n        \"responseData\": \"allEntries\",\n        \"responseMode\": \"lastNode\"\n      },\n      \"notesInFlow\": false,\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"9b87f027-7ef2-40a7-88d7-a0ae9ef73375\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        0,\n        0\n      ],\n      \"parameters\": {\n        \"width\": 840,\n        \"height\": 580,\n        \"content\": \"### ‚úÖ **How to Use This Flow**\\n\\n#### üì• Trigger via File Upload\\n\\nYou can trigger this flow by sending a `POST` request with a file using **curl**, **Postman**, or **from another n8n flow**.\\n\\n#### üîß Example (via `curl`):\\n```bash\\ncurl -X POST http://localhost:5678/webhook-test/convert \\\\\\n-F \\\"file=@converted.parquet\\\"\\n```\\n> Replace `converted.parquet` with your local file path. You can also send Avro, ORC or Feather files.\\n\\n#### üîÅ Reuse from Other Flows\\nYou can **reuse this flow** by calling the webhook from another n8n workflow using an **HTTP Request** node.  \\nMake sure to send the file as **form-data** with the field name `file`.\\n\\n#### üîç What This Flow Does:\\n- Receives the uploaded file via webhook (`file`)\\n- Sends it to `https://api.parquetreader.com/parquet` as `multipart/form-data` (field name: `file`)\\n- Receives parsed data, schema, and metadata\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"06d3e569-8724-48f2-951f-a1af5e0f9362\",\n      \"name\": \"Parse API Response\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1280,\n        440\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const item = items[0];\\n\\n// Convert `data` (stringified JSON array) ‚Üí actual array\\nif (typeof item.json.data === 'string') {\\n  item.json.data = JSON.parse(item.json.data);\\n}\\n\\n// Convert `meta_data` (stringified JSON object) ‚Üí actual object\\nif (typeof item.json.meta_data === 'string') {\\n  item.json.meta_data = JSON.parse(item.json.meta_data);\\n}\\n\\nreturn [item];\\n\"\n      },\n      \"typeVersion\": 2\n    }\n  ],\n  \"active\": true,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"c10e1897-094e-42c6-bde9-1724972ada3e\",\n  \"connections\": {\n    \"Webhook\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Send to Parquet API\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Send to Parquet API\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Parse API Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.webhook",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.code"
    ],
    "trigger": null
  }
}