{
  "source": "1171_HTTP_Cron_Automation_Scheduled.json",
  "index": 1,
  "content": "{\n  \"nodes\": [\n    {\n      \"name\": \"Function\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"position\": [\n        1470,\n        380\n      ],\n      \"parameters\": {\n        \"functionCode\": \"const new_items = [];\\n// Get static data stored with the workflow\\nconst data = this.getWorkflowStaticData(\\\"node\\\");\\ndata.timestamp = data.timestamp || [];\\nfor (var i = items.length - 1; i >= 0; i--) {\\n// Check if data is already present\\n  if (data.timestamp.includes(items[i].json.timestamp)) {\\n    break;\\n  } else {\\n// if new data then add it to an array\\n    new_items.push({\\n      json: {\\n        timestamp: items[i].json.timestamp,\\n        latitude: items[i].json.latitude,\\n        longitude: items[i].json.longitude\\n      },\\n    });\\n  }\\n}\\ndata.timestamp = items.map((item) => item.json.timestamp);\\n// Check if array is empty\\nif (new_items.length === 0) {\\n  return [{ json: { message: \\\"No new items\\\" } }];\\n} else {\\n// return new items if array is not empty\\nconsole.log(new_items);\\n  return new_items;\\n}\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Set\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1270,\n        380\n      ],\n      \"parameters\": {\n        \"values\": {\n          \"number\": [\n            {\n              \"name\": \"latitude\",\n              \"value\": \"={{$node[\\\"HTTP Request\\\"].json[\\\"0\\\"][\\\"latitude\\\"]}}\"\n            },\n            {\n              \"name\": \"longitude\",\n              \"value\": \"={{$node[\\\"HTTP Request\\\"].json[\\\"0\\\"][\\\"longitude\\\"]}}\"\n            },\n            {\n              \"name\": \"timestamp\",\n              \"value\": \"={{$node[\\\"HTTP Request\\\"].json[\\\"0\\\"][\\\"timestamp\\\"]}}\"\n            }\n          ],\n          \"string\": []\n        },\n        \"options\": {},\n        \"keepOnlySet\": true\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"HTTP Request\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1070,\n        380\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.wheretheiss.at/v1/satellites/25544/positions\",\n        \"options\": {},\n        \"queryParametersUi\": {\n          \"parameter\": [\n            {\n              \"name\": \"timestamps\",\n              \"value\": \"={{Date.now();}}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Cron\",\n      \"type\": \"n8n-nodes-base.cron\",\n      \"position\": [\n        870,\n        380\n      ],\n      \"parameters\": {\n        \"triggerTimes\": {\n          \"item\": [\n            {\n              \"mode\": \"everyMinute\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"connections\": {\n    \"Set\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Function\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Cron\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"HTTP Request\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"HTTP Request\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.function",
      "n8n-nodes-base.set",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.cron"
    ],
    "trigger": null
  }
}