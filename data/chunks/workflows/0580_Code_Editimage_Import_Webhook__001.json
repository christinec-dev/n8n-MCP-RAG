{
  "source": "0580_Code_Editimage_Import_Webhook.json",
  "index": 1,
  "content": "{\n  \"meta\": {\n    \"instanceId\": \"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9\"\n  },\n  \"nodes\": [\n    {\n      \"id\": \"490493d1-e9ac-458a-ac9e-a86048ce6169\",\n      \"name\": \"When clicking ‘Test workflow’\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        -700,\n        260\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"116f1137-632f-4021-ad0f-cf59ed1776fd\",\n      \"name\": \"Google Gemini Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\n      \"position\": [\n        980,\n        440\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"modelName\": \"models/gemini-1.5-pro-latest\"\n      },\n      \"credentials\": {\n        \"googlePalmApi\": {\n          \"id\": \"dSxo6ns5wn658r8N\",\n          \"name\": \"Google Gemini(PaLM) Api account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"44695b4f-702c-4230-9ec3-e37447fed38e\",\n      \"name\": \"Sort Pages\",\n      \"type\": \"n8n-nodes-base.sort\",\n      \"position\": [\n        400,\n        320\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"sortFieldsUi\": {\n          \"sortField\": [\n            {\n              \"fieldName\": \"fileName\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f2575b2c-0808-464e-b982-1eed8e0d9df7\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1280,\n        0\n      ],\n      \"parameters\": {\n        \"width\": 437.0502325581392,\n        \"height\": 430.522325581395,\n        \"content\": \"## Try Me Out!\\n\\n### This workflow converts a bank statement to markdown, faithfully capturing the details using the power of Vision Language Models (\\\"VLMs\\\"). The resulting markdown can then be parsed again by your standard LLM to extract data such as identifying all deposit table rows in the document.\\n\\nThis workflow is able to handle both downloaded PDFs as well as scanned PDFs. Be sure to protect sensitive data before running this workflow.\\n\\n### Need Help?\\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"d62d7b0e-29eb-48a9-a471-4279e663c521\",\n      \"name\": \"Get Bank Statement\",\n      \"type\": \"n8n-nodes-base.googleDrive\",\n      \"position\": [\n        -500,\n        260\n      ],\n      \"parameters\": {\n        \"fileId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"1wS9U7MQDthj57CvEcqG_Llkr-ek6RqGA\"\n        },\n        \"options\": {},\n        \"operation\": \"download\"\n      },\n      \"credentials\": {\n        \"googleDriveOAuth2Api\": {\n          \"id\": \"yOwz41gMQclOadgu\",\n          \"name\": \"Google Drive account\"\n        }\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"1329973b-a4e0-4272-9e24-3674bb9d4923\",\n      \"name\": \"Split PDF into Images\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        -140,\n        320\n      ],\n      \"parameters\": {\n        \"url\": \"http://stirling-pdf:8080/api/v1/convert/pdf/img\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"sendBody\": true,\n        \"contentType\": \"multipart-form-data\",\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"fileInput\",\n              \"parameterType\": \"formBinaryData\",\n              \"inputDataFieldName\": \"data\"\n            },\n            {\n              \"name\": \"imageFormat\",\n              \"value\": \"jpg\"\n            },\n            {\n              \"name\": \"singleOrMultiple\",\n              \"value\": \"multiple\"\n            },\n            {\n              \"name\": \"dpi\",\n              \"value\": \"300\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"4e263346-9f55-4316-a505-4a54061ccfbb\",\n      \"name\": \"Extract Zip File\",\n      \"type\": \"n8n-nodes-base.compression\",\n      \"position\": [\n        40,\n        320\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"5e97072f-a7c5-45aa-99d1-3231a9230b53\",\n      \"name\": \"Images To List\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        220,\n        320\n      ],\n      \"parameters\": {\n        \"jsCode\": \"let results = [];\\n\\nfor (item of items) {\\n    for (key of Object.keys(item.binary)) {\\n        results.push({\\n            json: {\\n                fileName: item.binary[key].fileName\\n            },\\n            binary: {\\n                data: item.binary[key],\\n            }\\n        });\\n    }\\n}\\n\\nreturn results;\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"62836c73-4cf7-4225-a45d-0cd62b7e227d\",\n      \"name\": \"Resize Images For AI\",\n      \"type\": \"n8n-nodes-base.editImage\",\n      \"position\": [\n        800,\n        280\n      ],\n      \"parameters\": {\n        \"width\": 75,\n        \"height\": 75,\n        \"options\": {},\n        \"operation\": \"resize\",\n        \"resizeOption\": \"percent\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"59fc6716-9826-4463-be33-923a8f6f33f1\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -820,\n        0\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 546.4534883720931,\n        \"height\": 478.89348837209275,\n        \"content\": \"## 1. Download Bank Statement PDF\\n[Read more about Google Drive node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googledrive)\\n\\nFor this demonstration, we'll pull an example bank statement off Google Drive however, you can also swap this out for other triggers such as webhook.\\n\\nYou can use the example bank statement created specifically for this workflow here: https://drive.google.com/file/d/1wS9U7MQDthj57CvEcqG_Llkr-ek6RqGA/view?usp=sharing\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"8e68a295-ff35-4d28-86bb-c8ea5664b3c6\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -240,\n        3.173953488372149\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 848.0232558139535,\n        \"height\": 533.5469767441862,\n        \"content\": \"## 2. Split PDF Pages into Seperate Images\\n\\nCurrently, the vision model we'll be using can't accept raw PDFs so we'll have to convert our PDF to a image in order to use it. To achieve this, we'll use the free [Stirling PDF webservice](https://stirlingpdf.io/) for convenience but if we need data privacy (recommended!), we could self-host our own [Stirling PDF instance](https://github.com/Stirling-Tools/Stirling-PDF/) instead. Alternatively, feel free to swap this service out for one of your own as long as it can convert PDFs into images!\\n\\nWe will ask the PDF service to return each page of our statement as separate images, which it does so as a zip file. Next steps is to just unzip the file and convert the output as a list of images.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"5286aa35-9687-4d5b-987c-79322a1ddc84\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        640,\n        -40\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 775.3441860465115,\n        \"height\": 636.0809302325588,\n        \"content\": \"## 3. Convert PDF Pages to Markdown Using Vision Model\\n[Learn more about using the Basic LLM node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm)\\n\\nUnlike traditional OCR, vision models (\\\"VLMs\\\") \\\"transcribe\\\" what they see so while we shouldn't expect an exact replication of a document, they may perform better making sense of complex document layouts ie. such as with horizontally stacked tables.\\n \\nIn this demonstration, we can transcribe our bank statement scans to markdown text for the purpose of further processing. With markdown, we can retain tables or columnar data found in the document. We'll employ two optimisations however as a workaround for token and timeout limits (1) we'll only transcribe one page at a time and (2) we'll shrink the pages just a little just enough to speed up processing but not enough to reduce our required resolution.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"49deef00-4617-4b19-a56f-08fd195dfb82\",\n      \"name\": \"Google Gemini Chat Model1\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\n      \"position\": [\n        1760,\n        480\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"safetySettings\": {\n            \"values\": [\n              {\n                \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n                \"threshold\": \"BLOCK_NONE\"\n              }\n            ]\n          }\n        },\n        \"modelName\": \"models/gemini-1.5-pro-latest\"\n      },\n      \"credentials\": {\n        \"googlePalmApi\": {\n          \"id\": \"dSxo6ns5wn658r8N\",\n          \"name\": \"Google Gemini(PaLM) Api account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"8e9c5d1d-d610-4bad-8feb-7ff0d5e1e64f\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1440,\n        80\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 719.7534883720941,\n        \"height\": 574.3134883720929,\n        \"content\": \"## 4. Extract Key Data Confidently From Statement\\n[Read more about the Information Extractor](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.information-extractor)\\n\\nWith our newly generated transcript, let's pull just the deposit line items from our statement. Processing all pages together as images may have been compute-extensive but as text, this is usually no problem at all for our LLM.\\n\\nFor our example bank statement PDF, the resulting extraction should be 8 table rows where a value exists in the \\\"deposits\\\" column.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f849ad3c-69ec-443c-b7cd-ab24e210af73\",\n      \"name\": \"Sticky Note6\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -640,\n        500\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 366.00558139534894,\n        \"height\": 125.41023255813957,\n        \"content\": \"### 💡 About the Example PDF\\nScanned PDFs (ie. where each page is a scanned image) are a use-case where extracting PDF text content will not work. Vision models are a great solution as this workflow aims to demonstrate!\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"be6f529b-8220-4879-bd99-4333b4d764b6\",\n      \"name\": \"Combine All Pages\",\n      \"type\": \"n8n-nodes-base.aggregate\",\n      \"position\": [\n        1580,\n        320\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fieldsToAggregate\": {\n          \"fieldToAggregate\": [\n            {\n              \"renameField\": true,\n              \"outputFieldName\": \"pages\",\n              \"fieldToAggregate\": \"text\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2b35755c-7bae-4896-b9f9-1e9110209526\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -190.1172093023256,\n        280\n      ],\n      \"parameters\": {\n        \"width\": 199.23348837209306,\n        \"height\": 374.95069767441856,\n        \"content\": \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n### Privacy Warning!\\nThis example uses a public third party service. If your data is senstive, please swap this out for the self-hosted version!\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f638ba05-9ae2-447f-82af-eb22d8b9d6f1\",\n      \"name\": \"Extract All Deposit Table Rows\",\n      \"type\": \"@n8n/n8n-nodes-langchain.informationExtractor\",\n      \"position\": [\n        1760,\n        320\n      ],\n      \"parameters\": {\n        \"text\": \"= {{ $json.pages.join('---') }}\",\n        \"options\": {\n          \"systemPromptTemplate\": \"This statement contains tables with rows showing deposit and withdrawal made to the user's account. Deposits and withdrawals are identified by have the amount in their respective columns. What are the deposits to the account found in this statement?\"\n        },\n        \"schemaType\": \"manual\",\n        \"inputSchema\": \"{\\n  \\\"type\\\": \\\"array\\\",\\n  \\\"items\\\": {\\n\\t\\\"type\\\": \\\"object\\\",\\n\\t\\\"properties\\\": {\\n      \\\"date\\\": { \\\"type\\\": \\\"string\\\" },\\n      \\\"description\\\": { \\\"type\\\": \\\"string\\\" },\\n      \\\"amount\\\": { \\\"type\\\": \\\"number\\\" }\\n\\t}\\n  }\\n}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"cf1e8d85-5c92-469d-98af-7bdd5f469167\",\n      \"name\": \"Sticky Note7\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        913.9944186046506,\n        620\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 498.18790697674433,\n        \"height\": 130.35162790697677,\n        \"content\": \"### 💡 Don't use Google?\\nFeel free to swap the model out for any state-of-the-art multimodal model which supports image inputs such as GPT4o(-mini) or Claude Sonnet/Opus. Note, I've found Gemini to produce the most accurate and consistent for this example use-case so no guarantees if you switch!\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"20f33372-a6b6-4f4d-987d-a94c85313fa8\",\n      \"name\": \"Transcribe to Markdown\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chainLlm\",\n      \"position\": [\n        980,\n        280\n      ],\n      \"parameters\": {\n        \"text\": \"transcribe the image to markdown.\",\n        \"messages\": {\n          \"messageValues\": [\n            {\n              \"message\": \"=You help transcribe documents to markdown, keeping faithful to all text printed and visible to the best of your ability. Ensure you capture all headings, subheadings, titles as well as small print.\\nFor any tables found with the document, convert them to markdown tables. If table row descriptions overflow into more than 1 row, concatanate and fit them into a single row. If two or more tables are adjacent horizontally, stack the tables vertically instead. There should be a newline after every markdown table.\\nFor any graphics, use replace with a description of the image. Images of scanned checks should be converted to the phrase \\\"<scanned image of check>\\\".\"\n            },\n            {\n              \"type\": \"HumanMessagePromptTemplate\",\n              \"messageType\": \"imageBinary\"\n            }\n          ]\n        },\n        \"promptType\": \"define\"\n      },\n      \"typeVersion\": 1.4\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Sort Pages\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Resize Images For AI\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Images To List\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Sort Pages\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Extract Zip File\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Images To List\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Combine All Pages\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Extract All Deposit Table Rows\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Bank Statement\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split PDF into Images\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Resize Images For AI\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Transcribe to Markdown\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Split PDF into Images\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Extract Zip File\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Transcribe to Markdown\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Combine All Pages\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Google Gemini Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Transcribe to Markdown\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Google Gemini Chat Model1\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Extract All Deposit Table Rows\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When clicking ‘Test workflow’\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Bank Statement\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.manualTrigger",
      "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "n8n-nodes-base.sort",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.googleDrive",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.compression",
      "n8n-nodes-base.code",
      "n8n-nodes-base.editImage",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.aggregate",
      "n8n-nodes-base.stickyNote",
      "@n8n/n8n-nodes-langchain.informationExtractor",
      "n8n-nodes-base.stickyNote",
      "@n8n/n8n-nodes-langchain.chainLlm"
    ],
    "trigger": null
  }
}