{
  "source": "1993_Splitout_Code_Automation_Triggered.json",
  "index": 1,
  "content": "{\n  \"id\": \"vssVsRO0FW6InbaY\",\n  \"meta\": {\n    \"instanceId\": \"12aa4b47b8cf3d835676e10b2bf760a80a1ff52932c9898603f7b21fc5376f59\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"Translate\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"7e55613e-c304-47cb-a017-2d912014ea8e\",\n      \"name\": \"Split Out\",\n      \"type\": \"n8n-nodes-base.splitOut\",\n      \"position\": [\n        1180,\n        140\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fieldToSplitOut\": \"txt\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"1ab3e545-e7a1-4b3d-a190-d38cb55ebf96\",\n      \"name\": \"Google Translate\",\n      \"type\": \"n8n-nodes-base.googleTranslate\",\n      \"position\": [\n        1620,\n        140\n      ],\n      \"parameters\": {\n        \"text\": \"={{ JSON.stringify($json.parts.secondPart) }}\",\n        \"translateTo\": \"={{ $json.language }}\"\n      },\n      \"credentials\": {\n        \"googleTranslateOAuth2Api\": {\n          \"id\": \"ssWzCSWk0cvCXZtz\",\n          \"name\": \"Google Translate account\"\n        }\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"07de7be3-5477-4e6c-b709-f632a3d5f162\",\n      \"name\": \"Aggregate\",\n      \"type\": \"n8n-nodes-base.aggregate\",\n      \"position\": [\n        520,\n        340\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"aggregate\": \"aggregateAllItemData\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"cbe5892e-3661-42fb-a850-1e0448a53e0a\",\n      \"name\": \"Edit Fields\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        960,\n        340\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"498c663a-f372-40fb-9ac9-79f7a60875cc\",\n              \"name\": \"complete_text\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.complete_text }}\"\n            },\n            {\n              \"id\": \"34f3bc06-151d-4819-b6b8-515cf9c05c60\",\n              \"name\": \"file\",\n              \"type\": \"object\",\n              \"value\": \"={{$('Receive SRT File to Translate').first().json}}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"a4e1cc2e-bd2f-4cf7-af03-73e43cda83d3\",\n      \"name\": \"Convert to File\",\n      \"type\": \"n8n-nodes-base.convertToFile\",\n      \"position\": [\n        1400,\n        340\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"fileName\": \"={{ $json['Upload SRT file'].filename.replaceAll('.srt',` ${$('Prep Parts for Translate').first().json.language}.srt`)}}\",\n          \"mimeType\": \"={{ $json['Upload SRT file'].mimetype }}\"\n        },\n        \"operation\": \"toBinary\",\n        \"sourceProperty\": \"=data\",\n        \"binaryPropertyName\": \"file\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"380bc679-4e08-4d5d-a263-d3d873f4f38f\",\n      \"name\": \"Split SRT Lines\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        960,\n        140\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"let text = $json.data\\n\\ndelete $json.base64\\ndelete $json.binary\\n\\n\\n// Split by single newlines\\nconst lines = text.split('\\\\n')\\n\\n// Create an array to hold grouped subtitle entries\\nlet subtitleGroups = []\\nlet currentGroup = []\\n\\n// Process each line\\nfor (let i = 0; i < lines.length; i++) {\\n  const line = lines[i].trim()\\n  \\n  // If line is empty and we have content in currentGroup, \\n  // it's the end of a subtitle entry\\n  if (line === '' && currentGroup.length > 0) {\\n    subtitleGroups.push(currentGroup.join('\\\\n'))\\n    currentGroup = []\\n  } \\n  // If line is not empty, add to current group\\n  else if (line !== '') {\\n    currentGroup.push(line)\\n  }\\n}\\n\\n// Add the last group if it has content\\nif (currentGroup.length > 0) {\\n  subtitleGroups.push(currentGroup.join('\\\\n'))\\n}\\n\\n// Remove any quotes at the beginning and end of the first and last entries\\nif (subtitleGroups.length > 0) {\\n  subtitleGroups[0] = subtitleGroups[0].replace(/^\\\"/, '')\\n  subtitleGroups[subtitleGroups.length - 1] = subtitleGroups[subtitleGroups.length - 1].replace(/\\\"$/, '')\\n}\\n\\n// Store the result\\n$input.item.json.txt = subtitleGroups\\n\\nreturn $input.item;\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"08215886-05f6-4ecc-9c1f-55c0e4cb6194\",\n      \"name\": \"Generate Binary\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1180,\n        340\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"function encodeBase64(text) {\\n  try {\\n    // For browser environments\\n    if (typeof window !== 'undefined') {\\n      // First, create a UTF-8 encoded string\\n      const utf8String = encodeURIComponent(text)\\n        .replace(/%([0-9A-F]{2})/g, (_, hex) => {\\n          return String.fromCharCode(parseInt(hex, 16));\\n        });\\n      \\n      // Then encode to Base64\\n      return btoa(utf8String);\\n    } \\n    // For Node.js environments\\n    else if (typeof Buffer !== 'undefined') {\\n      return Buffer.from(text).toString('base64');\\n    }\\n    \\n    throw new Error('Environment not supported for Base64 encoding');\\n  } catch (error) {\\n    console.error('Error encoding to Base64:', error);\\n    return null;\\n  }\\n}\\n\\nlet data = encodeBase64($json.complete_text);\\n\\nconsole.log(data)\\n\\nlet file = $json.file\\n\\nfile.data = data;\\n\\nlet paddingCount = 0;\\nif (data.endsWith('==')) paddingCount = 2;\\nelse if (data.endsWith('=')) paddingCount = 1;\\n\\n// Calculate the decoded size (in bytes)\\nfile.size = Math.floor(data.length * 3 / 4) - paddingCount;\\n\\n\\nreturn file\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"299122c1-61d1-4ce4-81b9-ce15d22cd49c\",\n      \"name\": \"Prep Parts for Translate\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1400,\n        140\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"function splitBySecondNewline(text) {\\n  // Find the position of the first newline\\n  const firstNewlinePos = text.indexOf('\\\\n');\\n  \\n  if (firstNewlinePos === -1) {\\n    return { firstPart: text, secondPart: '' }; // No newlines found\\n  }\\n  \\n  // Find the position of the second newline\\n  const secondNewlinePos = text.indexOf('\\\\n', firstNewlinePos + 1);\\n  \\n  if (secondNewlinePos === -1) {\\n    return { firstPart: text, secondPart: '' }; // Only one newline found\\n  }\\n  \\n  // Split the string at the second newline\\n  const firstPart = text.substring(0, secondNewlinePos);\\n  const secondPart = text.substring(secondNewlinePos + 1);\\n  \\n  return { firstPart, secondPart };\\n}\\n\\nlet lang = $('Receive SRT File to Translate').first().json['Translate to Language']\\n\\nreturn {\\n  parts: splitBySecondNewline($json.txt),\\n  language: lang\\n}\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"8a810ef3-febe-42f7-91c9-6c82dddcc93a\",\n      \"name\": \"Clean Translations & Group Titles\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        300,\n        340\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"let translated = $json.translatedText.replaceAll(\\\"\\\\\\\\n\\\",\\\"\\\\n\\\").replaceAll('&quot;',\\\"\\\").replaceAll('&#39;',\\\"'\\\");\\n\\nfunction splitIntoTwoLines(text, maxLength = 40) {\\n  // If text already contains a newline or is short enough, return as is\\n  if (text.includes('\\\\n') || text.length <= maxLength) {\\n    return text;\\n  }\\n  \\n  // Find the last space before or at the maxLength\\n  let splitIndex = text.lastIndexOf(' ', maxLength);\\n  \\n  // If no space was found (rare case with very long words)\\n  if (splitIndex === -1) {\\n    splitIndex = maxLength; // Force split at maxLength\\n  }\\n  \\n  // Split the text and join with a newline\\n  const firstLine = text.substring(0, splitIndex);\\n  const secondLine = text.substring(splitIndex + 1); // +1 to skip the space\\n  \\n  return firstLine + '\\\\n' + secondLine;\\n}\\n\\n// Add a new field called 'myNewField' to the JSON of the item\\n$input.item.json.complete = `${$('Prep Parts for Translate').item.json.parts.firstPart}\\\\n` + splitIntoTwoLines(translated)\\n\\nreturn $input.item;\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"15b2781c-4b6f-43e7-9ca9-6d6114e5fdab\",\n      \"name\": \"Join completed text with double new line\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        740,\n        340\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"let texts = $json.data.map(item=>{\\n  return item.complete\\n})\\n\\n\\n$input.item.json.complete_text = texts.join('\\\\n\\\\n')\\n\\nreturn $input.item;\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"c43efbb6-3fe8-4aa3-8d65-ed3064bcc948\",\n      \"name\": \"Respond with file\",\n      \"type\": \"n8n-nodes-base.form\",\n      \"position\": [\n        1620,\n        340\n      ],\n      \"webhookId\": \"b783b857-21b3-41a3-85da-2dbf2d85da54\",\n      \"parameters\": {\n        \"options\": {},\n        \"operation\": \"completion\",\n        \"respondWith\": \"returnBinary\",\n        \"completionTitle\": \"Done\",\n        \"inputDataFieldName\": \"file\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"13103a23-3b1a-46d1-9731-c281ff1cac06\",\n      \"name\": \"Receive SRT File to Translate\",\n      \"type\": \"n8n-nodes-base.formTrigger\",\n      \"position\": [\n        300,\n        140\n      ],\n      \"webhookId\": \"8f3c089f-4cbe-4994-9d0e-d86518ef855c\",\n      \"parameters\": {\n        \"options\": {\n          \"appendAttribution\": false\n        },\n        \"formTitle\": \"upload srt\",\n        \"formFields\": {\n          \"values\": [\n            {\n              \"fieldType\": \"dropdown\",\n              \"fieldLabel\": \"Translate to Language\",\n              \"fieldOptions\": {\n                \"values\": [\n                  {\n                    \"option\": \"EN\"\n                  },\n                  {\n                    \"option\": \"JP\"\n                  }\n                ]\n              },\n              \"requiredField\": true\n            },\n            {\n              \"fieldType\": \"file\",\n              \"fieldLabel\": \"Upload SRT file\",\n              \"multipleFiles\": false,\n              \"requiredField\": true,\n              \"acceptFileTypes\": \".srt\"\n            }\n          ]\n        },\n        \"responseMode\": \"lastNode\"\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"7e0f06f4-1e9d-436f-9310-325214e74bb9\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        280,\n        -280\n      ],\n      \"parameters\": {\n        \"width\": 760,\n        \"height\": 300,\n        \"content\": \"## Required Credentials\\nhttps://docs.n8n.io/integrations/builtin/credentials/google/\\n\\n## Selecting Language\\nYou can update the form to include your preferred language code (that you are translating to), by updating the dropdown field with a new option. \\nOr update the Google Translate node language option back to 'fixed' and select your desired language. This will ignore the form option, but is safe to do.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"29f9621e-3756-48ee-b6f0-e26a9f7aa247\",\n      \"name\": \"Extract text from Binary File\",\n      \"type\": \"n8n-nodes-base.extractFromFile\",\n      \"position\": [\n        740,\n        140\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"operation\": \"text\",\n        \"binaryPropertyName\": \"Upload_SRT_file\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0924754e-6d1f-4d82-bb58-f64ebeac7b05\",\n      \"name\": \"Expose Binary\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        520,\n        140\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"// Add a new field called 'myNewField' to the JSON of the item\\n$input.item.json.binary = $binary;\\n\\nreturn $input.item;\"\n      },\n      \"typeVersion\": 2\n    }\n  ],\n  \"active\": true,\n  \"pinData\": {\n    \"Receive SRT File to Translate\": [\n      {\n        \"json\": {\n          \"formMode\": \"production\",\n          \"submittedAt\": \"2025-04-20T05:46:13.787-04:00\",\n          \"Upload SRT file\": {\n            \"size\": 7748,\n            \"filename\": \"example_file.srt\",\n            \"mimetype\": \"application/octet-stream\"\n          },\n          \"Translate to Language\": \"EN\"\n        }\n      }\n    ]\n  },\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"824adb39-806e-4d28-8e41-efd9f2e179a8\",\n  \"connections\": {\n    \"Aggregate\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Join completed text with double new line\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Split Out\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Prep Parts for Translate\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Edit Fields\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Generate Binary\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Expose Binary\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Extract text from Binary File\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Convert to File\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Respond with file\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Generate Binary\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Convert to File\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Split SRT Lines\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split Out\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Google Translate\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Clean Translations & Group Titles\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Prep Parts for Translate\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Google Translate\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Extract text from Binary File\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split SRT Lines\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Receive SRT File to Translate\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Expose Binary\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Clean Translations & Group Titles\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Aggregate\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Join completed text with double new line\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Edit Fields\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.splitOut",
      "n8n-nodes-base.googleTranslate",
      "n8n-nodes-base.aggregate",
      "n8n-nodes-base.set",
      "n8n-nodes-base.convertToFile",
      "n8n-nodes-base.code",
      "n8n-nodes-base.code",
      "n8n-nodes-base.code",
      "n8n-nodes-base.code",
      "n8n-nodes-base.code",
      "n8n-nodes-base.form",
      "n8n-nodes-base.formTrigger",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.extractFromFile",
      "n8n-nodes-base.code"
    ],
    "trigger": null
  }
}