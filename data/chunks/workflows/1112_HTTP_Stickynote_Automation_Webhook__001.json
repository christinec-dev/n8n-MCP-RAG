{
  "source": "1112_HTTP_Stickynote_Automation_Webhook.json",
  "index": 1,
  "content": "{\n  \"id\": \"6yNJxDjV9rSiOkj9\",\n  \"meta\": {\n    \"instanceId\": \"f4f5d195bb2162a0972f737368404b18be694648d365d6c6771d7b4909d28167\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"AI Agent with charts capabilities using OpenAI Structured Output\",\n  \"tags\": [\n    {\n      \"id\": \"9tRfTc35T5pruw03\",\n      \"name\": \"experiment\",\n      \"createdAt\": \"2024-03-18T15:32:10.504Z\",\n      \"updatedAt\": \"2024-03-18T15:32:10.504Z\"\n    }\n  ],\n  \"nodes\": [\n    {\n      \"id\": \"4b7c314a-d7c5-46cb-af6f-b3ff02a182b7\",\n      \"name\": \"OpenAI Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        980,\n        600\n      ],\n      \"parameters\": {\n        \"model\": \"gpt-4o-mini-2024-07-18\",\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"WqzqjezKh8VtxdqA\",\n          \"name\": \"OpenAi account - Baptiste\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"cf4ffa49-8830-4db2-9a7d-b8931e806947\",\n      \"name\": \"Window Buffer Memory\",\n      \"type\": \"@n8n/n8n-nodes-langchain.memoryBufferWindow\",\n      \"position\": [\n        1120,\n        600\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"22d36226-ca37-4ccc-a2d6-826b78c2f1f3\",\n      \"name\": \"Generate a chart\",\n      \"type\": \"@n8n/n8n-nodes-langchain.toolWorkflow\",\n      \"position\": [\n        1260,\n        600\n      ],\n      \"parameters\": {\n        \"name\": \"generate_a_chart\",\n        \"schemaType\": \"manual\",\n        \"workflowId\": \"={{ $workflow.id }}\",\n        \"description\": \"Call this tool whenever you need to generate a chart.\",\n        \"inputSchema\": \"{\\n\\\"type\\\": \\\"object\\\",\\n\\\"properties\\\": {\\n\\t\\\"query\\\": {\\n\\t\\t\\\"type\\\": \\\"string\\\",\\n\\t\\t\\\"description\\\": \\\"a query describing the chart to generate\\\"\\n\\t\\t}\\n\\t}\\n}\",\n        \"specifyInputSchema\": true\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"d9ea85d7-3a56-4a95-88c8-60e5c95014e7\",\n      \"name\": \"Execute \\\"Generate a chart\\\" tool\",\n      \"type\": \"n8n-nodes-base.executeWorkflowTrigger\",\n      \"position\": [\n        580,\n        1100\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"68d538f7-acce-447f-9ab1-6975639e05f7\",\n      \"name\": \"OpenAI - Generate Chart definition with Structured Output\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        880,\n        1100\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.openai.com/v1/chat/completions\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n    \\\"model\\\": \\\"gpt-4o-2024-08-06\\\",\\n    \\\"messages\\\": [\\n        {\\n            \\\"role\\\": \\\"system\\\",\\n            \\\"content\\\": \\\"Based on the user request, generate a valid Chart.js definition. Important: - Be careful with the data scale and beginatzero that all data are visible. Example if ploted data 2 and 3 on a bar chart, the baseline should be 0. - Charts colors should be different only if there are multiple datasets. - Output valid JSON. In scales, min and max are numbers. Example: `{scales:{yAxes:[{ticks:{min:0,max:3}`\\\"\\n        },\\n        {\\n            \\\"role\\\": \\\"user\\\",\\n            \\\"content\\\": \\\"{{ $json.query.query }}\\\"\\n        }\\n    ],\\n    \\\"response_format\\\": {\\n  \\\"type\\\": \\\"json_schema\\\",\\n  \\\"json_schema\\\": {\\n    \\\"name\\\": \\\"chart_configuration\\\",\\n    \\\"description\\\": \\\"Configuration schema for Chart.js charts\\\",\\n    \\\"strict\\\": true,\\n    \\\"schema\\\": {\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"type\\\": {\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"enum\\\": [\\\"bar\\\", \\\"line\\\", \\\"radar\\\", \\\"pie\\\", \\\"doughnut\\\", \\\"polarArea\\\", \\\"bubble\\\", \\\"scatter\\\", \\\"area\\\"]\\n    },\\n    \\\"data\\\": {\\n      \\\"type\\\": \\\"object\\\",\\n      \\\"properties\\\": {\\n        \\\"labels\\\": {\\n          \\\"type\\\": \\\"array\\\",\\n          \\\"items\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          }\\n        },\\n        \\\"datasets\\\": {\\n          \\\"type\\\": \\\"array\\\",\\n          \\\"items\\\": {\\n            \\\"type\\\": \\\"object\\\",\\n            \\\"properties\\\": {\\n              \\\"label\\\": {\\n                \\\"type\\\": [\\\"string\\\", \\\"null\\\"]\\n              },\\n              \\\"data\\\": {\\n                \\\"type\\\": \\\"array\\\",\\n                \\\"items\\\": {\\n                  \\\"type\\\": \\\"number\\\"\\n                }\\n              },\\n              \\\"backgroundColor\\\": {\\n                \\\"type\\\": [\\\"array\\\", \\\"null\\\"],\\n                \\\"items\\\": {\\n                  \\\"type\\\": \\\"string\\\"\\n                }\\n              },\\n              \\\"borderColor\\\": {\\n                \\\"type\\\": [\\\"array\\\", \\\"null\\\"],\\n                \\\"items\\\": {\\n                  \\\"type\\\": \\\"string\\\"\\n                }\\n              },\\n              \\\"borderWidth\\\": {\\n                \\\"type\\\": [\\\"number\\\", \\\"null\\\"]\\n              }\\n            },\\n            \\\"required\\\": [\\\"data\\\", \\\"label\\\", \\\"backgroundColor\\\", \\\"borderColor\\\", \\\"borderWidth\\\"],\\n            \\\"additionalProperties\\\": false\\n          }\\n        }\\n      },\\n      \\\"required\\\": [\\\"labels\\\", \\\"datasets\\\"],\\n      \\\"additionalProperties\\\": false\\n    },\\n    \\\"options\\\": {\\n      \\\"type\\\": \\\"object\\\",\\n      \\\"properties\\\": {\\n        \\\"scales\\\": {\\n          \\\"type\\\": [\\\"object\\\", \\\"null\\\"],\\n          \\\"properties\\\": {\\n            \\\"yAxes\\\": {\\n              \\\"type\\\": \\\"array\\\",\\n              \\\"items\\\": {\\n                \\\"type\\\": [\\\"object\\\", \\\"null\\\"],\\n                \\\"properties\\\": {\\n                  \\\"ticks\\\": {\\n                    \\\"type\\\": [\\\"object\\\", \\\"null\\\"],\\n                    \\\"properties\\\": {\\n                      \\\"max\\\": {\\n                        \\\"type\\\": [\\\"number\\\", \\\"null\\\"]\\n                      },\\n                      \\\"min\\\": {\\n                        \\\"type\\\": [\\\"number\\\", \\\"null\\\"]\\n                      },\\n                      \\\"stepSize\\\": {\\n                        \\\"type\\\": [\\\"number\\\", \\\"null\\\"]\\n                      },\\n                      \\\"beginAtZero\\\": {\\n                        \\\"type\\\": [\\\"boolean\\\", \\\"null\\\"]\\n                      }\\n                    },\\n                    \\\"required\\\": [\\\"max\\\", \\\"min\\\", \\\"stepSize\\\", \\\"beginAtZero\\\"],\\n                    \\\"additionalProperties\\\": false\\n                  },\\n                  \\\"stacked\\\": {\\n                    \\\"type\\\": [\\\"boolean\\\", \\\"null\\\"]\\n                  }\\n                },\\n                \\\"required\\\": [\\\"ticks\\\", \\\"stacked\\\"],\\n                \\\"additionalProperties\\\": false\\n              }},\\n              \\\"xAxes\\\": {\\n                \\\"type\\\": [\\\"object\\\", \\\"null\\\"],\\n                \\\"properties\\\": {\\n                  \\\"stacked\\\": {\\n                    \\\"type\\\": [\\\"boolean\\\", \\\"null\\\"]\\n                  }\\n                },\\n                \\\"required\\\": [\\\"stacked\\\"],\\n                \\\"additionalProperties\\\": false\\n              }\\n          },\\n          \\\"required\\\": [\\\"yAxes\\\", \\\"xAxes\\\"],\\n          \\\"additionalProperties\\\": false\\n        },\\n        \\\"plugins\\\": {\\n          \\\"type\\\": [\\\"object\\\", \\\"null\\\"],\\n          \\\"properties\\\": {\\n            \\\"title\\\": {\\n              \\\"type\\\": [\\\"object\\\", \\\"null\\\"],\\n              \\\"properties\\\": {\\n                \\\"display\\\": {\\n                  \\\"type\\\": [\\\"boolean\\\", \\\"null\\\"]\\n                },\\n                \\\"text\\\": {\\n                  \\\"type\\\": [\\\"string\\\", \\\"null\\\"]\\n                }\\n              },\\n              \\\"required\\\": [\\\"display\\\", \\\"text\\\"],\\n              \\\"additionalProperties\\\": false\\n            },\\n            \\\"legend\\\": {\\n              \\\"type\\\": [\\\"object\\\", \\\"null\\\"],\\n              \\\"properties\\\": {\\n                \\\"display\\\": {\\n                  \\\"type\\\": [\\\"boolean\\\", \\\"null\\\"]\\n                },\\n                \\\"position\\\": {\\n                  \\\"type\\\": [\\\"string\\\", \\\"null\\\"],\\n                  \\\"enum\\\": [\\\"top\\\", \\\"left\\\", \\\"bottom\\\", \\\"right\\\", null]\\n                }\\n              },\\n              \\\"required\\\": [\\\"display\\\", \\\"position\\\"],\\n              \\\"additionalProperties\\\": false\\n            }\\n          },\\n          \\\"required\\\": [\\\"title\\\", \\\"legend\\\"],\\n          \\\"additionalProperties\\\": false\\n        }\\n      },\\n      \\\"required\\\": [\\\"scales\\\", \\\"plugins\\\"],\\n      \\\"additionalProperties\\\": false\\n    }\\n  },\\n  \\\"required\\\": [\\\"type\\\", \\\"data\\\", \\\"options\\\"],\\n  \\\"additionalProperties\\\": false\\n}\\n}\\n}\\n}\",\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"=Content-Type\",\n              \"value\": \"application/json\"\n            }\n          ]\n        },\n        \"nodeCredentialType\": \"openAiApi\"\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"WqzqjezKh8VtxdqA\",\n          \"name\": \"OpenAi account - Baptiste\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"0fd4ad08-ad85-4d0b-b75f-0e59f789cbfd\",\n      \"name\": \"Set response\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1120,\n        1100\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"37512e1a-8376-4ba0-bdcd-34bb9329ae4b\",\n              \"name\": \"response\",\n              \"type\": \"string\",\n              \"value\": \"={{ encodeURIComponent(\\\"https://quickchart.io/chart?width=200&c=\\\"+$json.choices[0].message.content) }}\\n\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"6785cadb-4875-47ac-9b57-29b583c53937\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        20,\n        260\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 680.7609104727082,\n        \"height\": 619.3187860363884,\n        \"content\": \"## Workflow: AI Agent with charts capabilities using OpenAI Structured Output\\n\\n**Overview**\\n- This workflow is a experiment to integrate charts into an AI Agent\\n- The AI Agent has normal AI conversation and can invoke a tool to integrate a graph in the conversation.\\n- It uses OpenAI Structured Output to generate a chart definition according to Quickchart specifications.\\n\\n\\n**How it works**\\n- Activate the workflow\\n- Start chatting with the AI Agent.\\n- When the AI Agent detects that the user needs a chat, it calls the tool\\n- The tool calls the sub-workflow with a query.\\n- The sub-workflow calls the HTTP Request node (calling OpenAI) to retrieve a chart definition\\n- In the \\\"set response\\\" node, he chat definition is added at the end of a quickchart.io url - the URL to the chart image. It is sent back to the AI Agent.\\n- The AI Agent uses this image in its response.\\n- For example, you can ask the AI Agent to generate a chart about the top 5 movies at the box office\\n\\n\\n**Notes**\\n- The full Quickchart.io specifications have not been integrated, thus there are some possible glitches (e.g due to the size of the graph, radar graphs are not displayed properly)\\n- This could be provided to any automation, not only AI Agents.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"fd507ff6-2d16-4498-ba2b-d91b02079311\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        740,\n        800\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 768.8586342909368,\n        \"height\": 503,\n        \"content\": \"## Generate a Quickchart definition\\n\\n**HTTP Request node**\\n- Send the chart query to OpenAI, with a defined JSON response format - *using HTTP Request node as it has not yet been implemented in the OpenAI nodes*\\n- The JSON structure is based on ChartJS and Quickchart.io definitions, that let us create nice looking graphs.\\n- The output is a JSON containing the chart definition that is passed to the next node.\\n\\n**Set Response node**\\n- Adds the chart definition at the end of a Quickchart.io URL ([see documentation](https://quickchart.io/documentation/usage/parameters/))\\n- Note that in the parameters, we specify the width to 250 in order to be properly displayed in the chart interface.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"7f14532a-75ee-40f8-a45b-0f037af7cb05\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        740,\n        260\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 768,\n        \"height\": 485.8165429718969,\n        \"content\": \"### Chat Agent\\n- This is agent is mostly here to demonstrate how to use the sub workflow.\\n- This is a basic agent with a tool \\\"generate a chart\\\"\\n- The tool calls the sub-workflow\\n- The sub-workflow responds with the Quickchart URL that is displayed in the conversation\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"7793a567-c4d4-4745-83c9-adf5397755e9\",\n      \"name\": \"AI Agent\",\n      \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n      \"position\": [\n        1020,\n        400\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"systemMessage\": \"You're a general purpose ai. Using markdown, you can display images in the conversation. Don't change the width of the chart\"\n        }\n      },\n      \"typeVersion\": 1.6\n    },\n    {\n      \"id\": \"71bd2cb5-7b20-4d83-adba-c1fd57511155\",\n      \"name\": \"When chat message received\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chatTrigger\",\n      \"position\": [\n        840,\n        400\n      ],\n      \"webhookId\": \"1281cd48-08a0-431d-9bf5-9bb60e6b7a77\",\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 1.1\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"3af7cf64-60dc-4ba6-9ac6-f7ed2453812c\",\n  \"connections\": {\n    \"Generate a chart\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Window Buffer Memory\": {\n      \"ai_memory\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_memory\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When chat message received\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Execute \\\"Generate a chart\\\" tool\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"OpenAI - Generate Chart definition with Structured Output\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI - Generate Chart definition with Structured Output\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "@n8n/n8n-nodes-langchain.toolWorkflow",
      "n8n-nodes-base.executeWorkflowTrigger",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.set",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "@n8n/n8n-nodes-langchain.agent",
      "@n8n/n8n-nodes-langchain.chatTrigger"
    ],
    "trigger": null
  }
}