{
  "source": "1381_Splitout_Code_Automation_Webhook.json",
  "index": 1,
  "content": "{\n  \"nodes\": [\n    {\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        880,\n        540\n      ],\n      \"parameters\": {\n        \"content\": \"## Edit your own prompt \\u2b07\\ufe0f\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -380,\n        580\n      ],\n      \"parameters\": {\n        \"content\": \"## Filter comments and customize your trigger words \\u2b07\\ufe0f\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -120,\n        560\n      ],\n      \"parameters\": {\n        \"content\": \"## Replace your gitlab URL and token \\u2b07\\ufe0f\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Webhook\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        -540,\n        760\n      ],\n      \"webhookId\": \"6cfd2f23-6f45-47d4-9fe0-8f6f1c05829a\",\n      \"parameters\": {\n        \"path\": \"e21095c0-1876-4cd9-9e92-a2eac737f03e\",\n        \"options\": {},\n        \"httpMethod\": \"POST\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"name\": \"Code\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        720,\n        540\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"// Loop over input items and add a new field called 'myNewField' to the JSON of each one\\nvar diff = $input.item.json.gitDiff\\n\\nlet lines = diff.trimEnd().split('\\\\n');\\n\\nlet originalCode = '';\\nlet newCode = '';\\n\\nlines.forEach(line => {\\n console.log(line)\\n if (line.startsWith('-')) {\\n originalCode += line + \\\"\\\\n\\\";\\n } else if (line.startsWith('+')) {\\n newCode += line + \\\"\\\\n\\\";\\n } else {\\n originalCode += line + \\\"\\\\n\\\";\\n newCode += line + \\\"\\\\n\\\";\\n }\\n});\\n\\nreturn {\\n originalCode:originalCode,\\n newCode:newCode\\n};\\n\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"name\": \"Split Out1\",\n      \"type\": \"n8n-nodes-base.splitOut\",\n      \"position\": [\n        140,\n        740\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fieldToSplitOut\": \"changes\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"OpenAI Chat Model1\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        900,\n        860\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"baseURL\": \"\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Get Changes1\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        -60,\n        740\n      ],\n      \"parameters\": {\n        \"url\": \"=https://gitlab.com/api/v4/projects/{{ $json[\\\"body\\\"][\\\"project_id\\\"] }}/merge_requests/{{ $json[\\\"body\\\"][\\\"merge_request\\\"][\\\"iid\\\"] }}/changes\",\n        \"options\": {},\n        \"sendHeaders\": true,\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"PRIVATE-TOKEN\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.1\n    },\n    {\n      \"name\": \"Skip File Change1\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        340,\n        740\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"false\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.renamed_file }}\",\n              \"rightValue\": \"\"\n            },\n            {\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"false\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.deleted_file }}\",\n              \"rightValue\": \"\"\n            },\n            {\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"startsWith\"\n              },\n              \"leftValue\": \"={{ $json.diff }}\",\n              \"rightValue\": \"@@\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"name\": \"Parse Last Diff Line1\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        540,\n        540\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"const parseLastDiff = (gitDiff) => {\\n gitDiff = gitDiff.replace(/\\\\n\\\\\\\\ No newline at end of file/, '')\\n \\n const diffList = gitDiff.trimEnd().split('\\\\n').reverse();\\n const lastLineFirstChar = diffList?.[0]?.[0];\\n const lastDiff =\\n diffList.find((item) => {\\n return /^@@ \\\\-\\\\d+,\\\\d+ \\\\+\\\\d+,\\\\d+ @@/g.test(item);\\n }) || '';\\n\\n const [lastOldLineCount, lastNewLineCount] = lastDiff\\n .replace(/@@ \\\\-(\\\\d+),(\\\\d+) \\\\+(\\\\d+),(\\\\d+) @@.*/g, ($0, $1, $2, $3, $4) => {\\n return `${+$1 + +$2},${+$3 + +$4}`;\\n })\\n .split(',');\\n \\n if (!/^\\\\d+$/.test(lastOldLineCount) || !/^\\\\d+$/.test(lastNewLineCount)) {\\n return {\\n lastOldLine: -1,\\n lastNewLine: -1,\\n gitDiff,\\n };\\n }\\n\\n\\n const lastOldLine = lastLineFirstChar === '+' ? null : (parseInt(lastOldLineCount) || 0) - 1;\\n const lastNewLine = lastLineFirstChar === '-' ? null : (parseInt(lastNewLineCount) || 0) - 1;\\n\\n return {\\n lastOldLine,\\n lastNewLine,\\n gitDiff,\\n };\\n};\\n\\nreturn parseLastDiff($input.item.json.diff)\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"name\": \"Post Discussions1\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1280,\n        720\n      ],\n      \"parameters\": {\n        \"url\": \"=https://gitlab.com/api/v4/projects/{{ $('Webhook').item.json[\\\"body\\\"][\\\"project_id\\\"] }}/merge_requests/{{ $('Webhook').item.json[\\\"body\\\"][\\\"merge_request\\\"][\\\"iid\\\"] }}/discussions\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"sendBody\": true,\n        \"contentType\": \"multipart-form-data\",\n        \"sendHeaders\": true,\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"body\",\n              \"value\": \"={{ $('Basic LLM Chain1').item.json[\\\"text\\\"] }}\"\n            },\n            {\n              \"name\": \"position[position_type]\",\n              \"value\": \"text\"\n            },\n            {\n              \"name\": \"position[old_path]\",\n              \"value\": \"={{ $('Split Out1').item.json.old_path }}\"\n            },\n            {\n              \"name\": \"position[new_path]\",\n              \"value\": \"={{ $('Split Out1').item.json.new_path }}\"\n            },\n            {\n              \"name\": \"position[start_sha]\",\n              \"value\": \"={{ $('Get Changes1').item.json.diff_refs.start_sha }}\"\n            },\n            {\n              \"name\": \"position[head_sha]\",\n              \"value\": \"={{ $('Get Changes1').item.json.diff_refs.head_sha }}\"\n            },\n            {\n              \"name\": \"position[base_sha]\",\n              \"value\": \"={{ $('Get Changes1').item.json.diff_refs.base_sha }}\"\n            },\n            {\n              \"name\": \"position[new_line]\",\n              \"value\": \"={{ $('Parse Last Diff Line1').item.json.lastNewLine || '' }}\"\n            },\n            {\n              \"name\": \"position[old_line]\",\n              \"value\": \"={{ $('Parse Last Diff Line1').item.json.lastOldLine || '' }}\"\n            }\n          ]\n        },\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"PRIVATE-TOKEN\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.1\n    },\n    {\n      \"name\": \"Need Review1\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        -320,\n        760\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"operator\": {\n                \"name\": \"filter.operator.equals\",\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $json.body.object_attributes.note }}\",\n              \"rightValue\": \"+0\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"name\": \"Basic LLM Chain1\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chainLlm\",\n      \"position\": [\n        880,\n        720\n      ],\n      \"parameters\": {\n        \"prompt\": \"=File path\\uff1a{{ $('Skip File Change1').item.json.new_path }}\\n\\n```Original code\\n {{ $json.originalCode }}\\n```\\nchange to\\n```New code\\n {{ $json.newCode }}\\n```\\nPlease review the code changes in this section:\",\n        \"messages\": {\n          \"messageValues\": [\n            {\n              \"message\": \"# Overview:\\n You are a senior programming expert Bot, responsible for reviewing code changes and providing review recommendations.\\n At the beginning of the suggestion, it is necessary to clearly make a decision to \\\"reject\\\" or \\\"accept\\\" the code change, and rate the change in the format \\\"Change Score: Actual Score\\\", with a score range of 0-100 points.\\n Then, point out the existing problems in concise language and a stern tone.\\n If you feel it is necessary, you can directly provide the modified content.\\n Your review proposal must use rigorous Markdown format.\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1200,\n        540\n      ],\n      \"parameters\": {\n        \"content\": \"## Replace your gitlab URL and token \\u2b07\\ufe0f\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Code\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Basic LLM Chain1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Webhook\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Need Review1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Split Out1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Skip File Change1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Changes1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split Out1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Need Review1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Changes1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Basic LLM Chain1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Post Discussions1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Skip File Change1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Parse Last Diff Line1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model1\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Basic LLM Chain1\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Parse Last Diff Line1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Code\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.webhook",
      "n8n-nodes-base.code",
      "n8n-nodes-base.splitOut",
      "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.if",
      "n8n-nodes-base.code",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.if",
      "@n8n/n8n-nodes-langchain.chainLlm",
      "n8n-nodes-base.stickyNote"
    ],
    "trigger": null
  }
}