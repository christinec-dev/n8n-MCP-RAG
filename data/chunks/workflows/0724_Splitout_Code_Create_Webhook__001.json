{
  "source": "0724_Splitout_Code_Create_Webhook.json",
  "index": 1,
  "content": "{\n  \"meta\": {\n    \"instanceId\": \"ce110ceecbd52a55e2f86f58f176c40bfe61a2a2c6b384a681009bc6b9ef0dd4\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"nodes\": [\n    {\n      \"id\": \"dd049dd7-3f85-4c36-a4ec-d5df856fed14\",\n      \"name\": \"Notion Trigger\",\n      \"type\": \"n8n-nodes-base.notionTrigger\",\n      \"position\": [\n        -100,\n        360\n      ],\n      \"parameters\": {\n        \"event\": \"pagedUpdatedInDatabase\",\n        \"pollTimes\": {\n          \"item\": [\n            {\n              \"mode\": \"everyMinute\"\n            }\n          ]\n        },\n        \"databaseId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"f50f830b-cadd-4d9c-9a38-bb22e284193e\",\n          \"cachedResultUrl\": \"https://www.notion.so/f50f830bcadd4d9c9a38bb22e284193e\",\n          \"cachedResultName\": \"Journal\"\n        }\n      },\n      \"credentials\": {\n        \"notionApi\": {\n          \"id\": \"C26NOhx95lnHIdzV\",\n          \"name\": \"Notion account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"4bedb493-7a17-4d3f-8b00-93d7134e74ca\",\n      \"name\": \"Notion\",\n      \"type\": \"n8n-nodes-base.notion\",\n      \"position\": [\n        320,\n        220\n      ],\n      \"parameters\": {\n        \"blockId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $json.id }}\"\n        },\n        \"resource\": \"block\",\n        \"operation\": \"getAll\",\n        \"returnAll\": true\n      },\n      \"credentials\": {\n        \"notionApi\": {\n          \"id\": \"C26NOhx95lnHIdzV\",\n          \"name\": \"Notion account\"\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"8994422e-8b71-4638-be36-d105557a20d8\",\n      \"name\": \"Notion Node Blocks to Md\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        760,\n        220\n      ],\n      \"parameters\": {\n        \"jsCode\": \"function notionToMarkdown(blocks) {\\n  return blocks\\n    .map(block => {\\n      if (!block.json.content) return \\\"\\\"; // Skip empty content\\n      \\n      switch (block.json.type) {\\n        case \\\"heading_1\\\":\\n          return `# ${block.json.content}`;\\n        case \\\"heading_2\\\":\\n          return `## ${block.json.content}`;\\n        case \\\"heading_3\\\":\\n          return `### ${block.json.content}`;\\n        case \\\"bulleted_list_item\\\":\\n          return `- ${block.json.content}`;\\n        case \\\"to_do\\\":\\n          return `- [ ] ${block.json.content}`;\\n        case \\\"paragraph\\\":\\n          return `${block.json.content}`;\\n        default:\\n          return \\\"\\\"; // Ignore unsupported types\\n      }\\n    })\\n    .filter(line => line.trim() !== \\\"\\\") // Remove empty lines\\n    .join(\\\"\\\\n\\\\n\\\"); // Ensure proper spacing\\n}\\nconsole.log($input.all())\\nreturn [ {\\\"md\\\": notionToMarkdown($input.all())} ]\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"4321475e-3eac-4aea-bcd6-11d764af0f02\",\n      \"name\": \"Split Out\",\n      \"type\": \"n8n-nodes-base.splitOut\",\n      \"position\": [\n        560,\n        540\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fieldToSplitOut\": \"results\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b0f9b62c-009e-4d00-9d5d-5e1ea3f1314b\",\n      \"name\": \"Full Notion Blocks to Md\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        760,\n        540\n      ],\n      \"parameters\": {\n        \"jsCode\": \"function jsonToMarkdown(blocks) {\\n    let markdown = \\\"\\\";\\n\\n    function parseRichText(richTextArray) {\\n        return richTextArray.map(text => {\\n            let content = text.text.content;\\n            if (text.annotations.bold) content = `**${content}**`;\\n            if (text.annotations.italic) content = `*${content}*`;\\n            if (text.annotations.strikethrough) content = `~~${content}~~`;\\n            if (text.annotations.underline) content = `_${content}_`;\\n            if (text.annotations.code) content = `\\\\`${content}\\\\``;\\n            if (text.text.link) content = `[${content}](${text.text.link.url})`;\\n            return content;\\n        }).join(\\\"\\\");\\n    }\\n\\n    blocks.forEach(block => {\\n        switch (block.json.type) {\\n            case \\\"heading_1\\\":\\n                markdown += `\\\\n# ${parseRichText(block.json.heading_1.rich_text)}\\\\n`;\\n                break;\\n            case \\\"heading_2\\\":\\n                markdown += `\\\\n## ${parseRichText(block.json.heading_2.rich_text)}\\\\n`;\\n                break;\\n            case \\\"heading_3\\\":\\n                markdown += `\\\\n### ${parseRichText(block.json.heading_3.rich_text)}\\\\n`;\\n                break;\\n            case \\\"paragraph\\\":\\n                markdown += `\\\\n${parseRichText(block.json.paragraph.rich_text)}\\\\n`;\\n                break;\\n            case \\\"bulleted_list_item\\\":\\n                markdown += `- ${parseRichText(block.json.bulleted_list_item.rich_text)}\\\\n`;\\n                break;\\n            case \\\"numbered_list_item\\\":\\n                markdown += `1. ${parseRichText(block.json.numbered_list_item.rich_text)}\\\\n`;\\n                break;\\n            case \\\"to_do\\\":\\n                let checked = block.json.to_do.checked ? \\\"[x]\\\" : \\\"[ ]\\\";\\n                markdown += `- ${checked} ${parseRichText(block.json.to_do.rich_text)}\\\\n`;\\n                break;\\n            case \\\"quote\\\":\\n                markdown += `\\\\n> ${parseRichText(block.json.quote.rich_text)}\\\\n`;\\n                break;\\n            case \\\"code\\\":\\n                markdown += `\\\\n\\\\\\n\\\\`${block.code.language}\\\\`\\\\n\\\\\\n${parseRichText(block.json.code.rich_text)}\\\\n\\\\\\n\\\\n`;\\n                break;\\n            case \\\"unsupported\\\":\\n                break;\\n        }\\n    });\\n\\n    return markdown.trim();\\n}\\n\\nreturn [ { \\\"md\\\": jsonToMarkdown($input.all()) }];\\n\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"b3224aea-ca82-4e11-9e7f-df062f20512d\",\n      \"name\": \"Md to Notion Blocks v3\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1100,\n        340\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"function markdownToNotionBlocks(markdown) {\\n    const lines = markdown.split('\\\\n');\\n    const blocks = [];\\n    let currentList = null;\\n    \\n    function parseRichText(text) {\\n        const richText = [];\\n        const regex = /(\\\\*\\\\*|__)(.*?)\\\\1|(_|\\\\*)(.*?)\\\\3|(`)(.*?)\\\\5|(\\\\[)(.*?)\\\\]\\\\((.*?)\\\\)/g;\\n        let lastIndex = 0;\\n        \\n        text.replace(regex, (match, bold1, boldText, italic1, italicText, code1, codeText, link1, linkText, linkUrl, index) => {\\n            if (index > lastIndex) {\\n                richText.push({ text: { content: text.slice(lastIndex, index) } });\\n            }\\n            \\n            if (boldText) {\\n                richText.push({ text: { content: boldText }, annotations: { bold: true } });\\n            } else if (italicText) {\\n                richText.push({ text: { content: italicText }, annotations: { italic: true } });\\n            } else if (codeText) {\\n                richText.push({ text: { content: codeText }, annotations: { code: true } });\\n            } else if (linkText) {\\n                richText.push({ text: { content: linkText, link: { url: linkUrl } } });\\n            }\\n            \\n            lastIndex = index + match.length;\\n        });\\n        \\n        if (lastIndex < text.length) {\\n            richText.push({ text: { content: text.slice(lastIndex) } });\\n        }\\n        \\n        return richText.length > 0 ? richText : [{ text: { content: text } }];\\n    }\\n    \\n    for (const line of lines) {\\n        if (line.startsWith('# ')) {\\n            blocks.push({ type: 'heading_1', heading_1: { rich_text: parseRichText(line.slice(2)) } });\\n        } else if (line.startsWith('## ')) {\\n            blocks.push({ type: 'heading_2', heading_2: { rich_text: parseRichText(line.slice(3)) } });\\n        } else if (line.startsWith('### ')) {\\n            blocks.push({ type: 'heading_3', heading_3: { rich_text: parseRichText(line.slice(4)) } });\\n        } else if (line.startsWith('- ')) {\\n            if (!currentList) {\\n                currentList = { type: 'bulleted_list_item', bulleted_list_item: { rich_text: parseRichText(line.slice(2)) } };\\n                blocks.push(currentList);\\n            } else {\\n                blocks.push({ type: 'bulleted_list_item', bulleted_list_item: { rich_text: parseRichText(line.slice(2)) } });\\n            }\\n        } else if (line.startsWith('> ')) {\\n            blocks.push({ type: 'quote', quote: { rich_text: parseRichText(line.slice(2)) } });\\n        } else if (line.startsWith('```')) {\\n            const codeLines = [];\\n            while (lines.length && !lines[0].startsWith('```')) {\\n                codeLines.push(lines.shift());\\n            }\\n            blocks.push({ type: 'code', code: { rich_text: [{ text: { content: codeLines.join('\\\\n') } }] } });\\n        } else if (line.trim()) {\\n            blocks.push({ type: 'paragraph', paragraph: { rich_text: parseRichText(line) } });\\n        }\\n    }\\n    \\n    return blocks;\\n}\\n\\n\\nreturn { \\\"blocks\\\" : markdownToNotionBlocks($json.md)};\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"1af23a39-132a-45c5-8e71-090d0c4cf7df\",\n      \"name\": \"Add blocks as Children\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1340,\n        340\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api.notion.com/v1/blocks/{{ $('Notion Trigger').first().json.id }}/children\",\n        \"method\": \"PATCH\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n  \\\"children\\\": {{ $json.blocks.toJsonString() }}\\n} \",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"notionApi\"\n      },\n      \"credentials\": {\n        \"notionApi\": {\n          \"id\": \"C26NOhx95lnHIdzV\",\n          \"name\": \"Notion account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"89883f62-11f6-49ff-bbcf-f9e45399e73e\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        280,\n        100\n      ],\n      \"parameters\": {\n        \"width\": 640,\n        \"height\": 300,\n        \"content\": \"## Either use the official Notion getAll: Blocks node\\nThis removes formatting like bold and links. \"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"c3c10d91-1380-4525-a1d7-0fc9c8218f2b\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        280,\n        440\n      ],\n      \"parameters\": {\n        \"width\": 640,\n        \"height\": 260,\n        \"content\": \"## ... or get block rich text data\\nwith custom HTTP request.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"7be73933-e515-4273-adeb-59832313bbf3\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -180,\n        220\n      ],\n      \"parameters\": {\n        \"width\": 340,\n        \"height\": 340,\n        \"content\": \"## Configure a notion connection.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"55e20cdd-d567-4f67-96bf-15db71a92060\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1040,\n        200\n      ],\n      \"parameters\": {\n        \"height\": 320,\n        \"content\": \"## This will triple the content by way of demo.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"bc62cd3b-cc4b-4e4d-b617-e4012494a03b\",\n      \"name\": \"Get Child blocks\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        340,\n        540\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api.notion.com/v1/blocks/{{ $json.id }}/children\",\n        \"options\": {},\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"notionApi\"\n      },\n      \"credentials\": {\n        \"notionApi\": {\n          \"id\": \"C26NOhx95lnHIdzV\",\n          \"name\": \"Notion account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Notion\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Notion Node Blocks to Md\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Split Out\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Full Notion Blocks to Md\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Notion Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Notion\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Get Child blocks\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Child blocks\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split Out\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Md to Notion Blocks v3\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Add blocks as Children\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Full Notion Blocks to Md\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Md to Notion Blocks v3\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Notion Node Blocks to Md\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Md to Notion Blocks v3\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.notionTrigger",
      "n8n-nodes-base.notion",
      "n8n-nodes-base.code",
      "n8n-nodes-base.splitOut",
      "n8n-nodes-base.code",
      "n8n-nodes-base.code",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.httpRequest"
    ],
    "trigger": "notion trigger"
  }
}