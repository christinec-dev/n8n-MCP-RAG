{
  "source": "0066_Webhook_Cron_Automate_Scheduled.json",
  "index": 1,
  "content": "{\n  \"id\": 114,\n  \"name\": \"Standup Bot - Worker\",\n  \"nodes\": [\n    {\n      \"name\": \"publish report\",\n      \"type\": \"n8n-nodes-base.mattermost\",\n      \"position\": [\n        1840,\n        1040\n      ],\n      \"parameters\": {\n        \"message\": \"={{$node[\\\"Prep Report\\\"].json[\\\"post\\\"]}}\",\n        \"channelId\": \"={{$node[\\\"Prep Report\\\"].json[\\\"channel\\\"]}}\",\n        \"attachments\": [],\n        \"otherOptions\": {}\n      },\n      \"credentials\": {\n        \"mattermostApi\": {\n          \"id\": \"2\",\n          \"name\": \"Mattermost account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"get user data\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1400,\n        1040\n      ],\n      \"parameters\": {\n        \"url\": \"={{$node[\\\"Read Config 2\\\"].json[\\\"config\\\"][\\\"mattermostBaseUrl\\\"]}}/api/v4/users/{{$node[\\\"Action from MM\\\"].json[\\\"body\\\"][\\\"user_id\\\"]}}\",\n        \"options\": {},\n        \"jsonParameters\": true,\n        \"headerParametersJson\": \"={\\n\\\"Authorization\\\": \\\"Bearer {{$item(0).$node[\\\"Read Config 2\\\"].json[\\\"config\\\"][\\\"botUserToken\\\"]}}\\\"\\n}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"open-standup-dialog?\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        1180,\n        1260\n      ],\n      \"parameters\": {\n        \"conditions\": {\n          \"string\": [\n            {\n              \"value1\": \"={{$node[\\\"Action from MM\\\"].json[\\\"body\\\"][\\\"context\\\"][\\\"action\\\"]}}\",\n              \"value2\": \"open-standup-dialog\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Action from MM\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        520,\n        820\n      ],\n      \"webhookId\": \"6a28d86b-9f74-4825-9785-57e0d43b198f\",\n      \"parameters\": {\n        \"path\": \"standup-bot/action/f6f9b174745fa4651f750c36957d674c\",\n        \"options\": {},\n        \"httpMethod\": \"POST\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Slash Cmd from MM\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        520,\n        600\n      ],\n      \"webhookId\": \"72732516-1143-430f-8465-d193fe657311\",\n      \"parameters\": {\n        \"path\": \"standup-bot/slashCmd\",\n        \"options\": {},\n        \"httpMethod\": \"POST\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"config?\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        740,\n        600\n      ],\n      \"parameters\": {\n        \"conditions\": {\n          \"string\": [\n            {\n              \"value1\": \"={{$node[\\\"Slash Cmd from MM\\\"].json[\\\"body\\\"][\\\"text\\\"]}}\",\n              \"value2\": \"config\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"open config dialog\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1360,\n        580\n      ],\n      \"parameters\": {\n        \"url\": \"={{$node[\\\"Read Config 1\\\"].json[\\\"config\\\"][\\\"mattermostBaseUrl\\\"]}}/api/v4/actions/dialogs/open\",\n        \"options\": {\n          \"bodyContentType\": \"json\"\n        },\n        \"requestMethod\": \"POST\",\n        \"jsonParameters\": true,\n        \"bodyParametersJson\": \"={{$json}}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Prep Config Dialog\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"position\": [\n        1160,\n        580\n      ],\n      \"parameters\": {\n        \"functionCode\": \"const channelId =\\n  $item(0).$node['Slash Cmd from MM'].json['body']['channel_id'];\\n\\nconst configuredStandups =\\n  $item(0).$node['Read Config 1'].json['standups'] ?? [];\\n\\nlet standup = configuredStandups.find(\\n  (standup) => standup.channelId == channelId\\n);\\n\\n// define default values:\\nif (!standup) {\\n  standup = {\\n    title: 'Team Standup',\\n    time: '09:00',\\n    days: [1, 2, 3, 4, 5],\\n    questions: [\\n      'What have you accomplished since your last report?',\\n      'What do you want to accomplish until your next report?',\\n      'Is anything blocking your progress?',\\n    ],\\n    users: [],\\n  };\\n}\\n\\nconst payload = {\\n  trigger_id: $item(0).$node['Slash Cmd from MM'].json['body']['trigger_id'],\\n  url: $item(0).$node['Read Config 1'].json['config']['n8nWebhookUrl'],\\n  dialog: {\\n    callback_id: 'standup-config',\\n    title: 'Standup Configuration',\\n    submit_label: 'Save',\\n    notify_on_cancel: false,\\n    state: JSON.stringify({ standupId: channelId }),\\n    elements: [\\n      {\\n        display_name: 'Standup title',\\n        name: 'title',\\n        type: 'text',\\n        placeholder: 'Team Standup',\\n        default: standup.title,\\n        optional: true,\\n        help_text:\\n          'ðŸ’¡ The standup can be deleted by setting its title to an empty string!',\\n      },\\n      {\\n        display_name: 'Time',\\n        name: 'time',\\n        type: 'select',\\n        default: standup.time,\\n        options: [\\n          {\\n            text: '06:00',\\n            value: '06:00',\\n          },\\n          {\\n            text: '07:00',\\n            value: '07:00',\\n          },\\n          {\\n            text: '08:00',\\n            value: '08:00',\\n          },\\n          {\\n            text: '09:00',\\n            value: '09:00',\\n          },\\n          {\\n            text: '10:00',\\n            value: '10:00',\\n          },\\n          {\\n            text: '11:00',\\n            value: '11:00',\\n          },\\n          {\\n            text: '12:00',\\n            value: '12:00',\\n          },\\n          {\\n            text: '13:00',\\n            value: '13:00',\\n          },\\n          {\\n            text: '14:00',\\n            value: '14:00',\\n          },\\n          {\\n            text: '15:00',\\n            value: '15:00',\\n          },\\n          {\\n            text: '16:00',\\n            value: '16:00',\\n          },\\n          {\\n            text: '17:00',\\n            value: '17:00',\\n          },\\n        ],\\n      },\\n      {\\n        display_name: 'Days',\\n        name: 'days',\\n        type: 'text',\\n        placeholder: '1,2,3,4,5',\\n        help_text:\\n          'comma-separated; 0=Sun | 1=Mon | 2=Tue | 3=Wed | 4=Thu | 5=Fri | 6=Sat',\\n        default: standup.days.join(','),\\n      },\\n      {\\n        display_name: 'Questions',\\n        name: 'questions',\\n        type: 'textarea',\\n        help_text: 'Max 5 questions, one question per line;',\\n        default: standup.questions.join('\\\\n'),\\n      },\\n      {\\n        display_name: 'Users',\\n        name: 'users',\\n        type: 'textarea',\\n        help_text: 'One user per line',\\n        default: standup.users.join('\\\\n'),\\n      },\\n    ],\\n  },\\n};\\n\\nreturn [{ json: payload }];\\n\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"callback ID?\",\n      \"type\": \"n8n-nodes-base.switch\",\n      \"position\": [\n        960,\n        820\n      ],\n      \"parameters\": {\n        \"rules\": {\n          \"rules\": [\n            {\n              \"value2\": \"standup-config\"\n            },\n            {\n              \"output\": 1,\n              \"value2\": \"standup-answers\"\n            }\n          ]\n        },\n        \"value1\": \"={{$node[\\\"Action from MM\\\"].json[\\\"body\\\"][\\\"callback_id\\\"]}}\",\n        \"dataType\": \"string\",\n        \"fallbackOutput\": 3\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"standup-config\",\n      \"type\": \"n8n-nodes-base.noOp\",\n      \"position\": [\n        1180,\n        820\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"standup-answers\",\n      \"type\": \"n8n-nodes-base.noOp\",\n      \"position\": [\n        1180,\n        1040\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Prep Config Override\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"position\": [\n        1400,\n        820\n      ],\n      \"parameters\": {\n        \"functionCode\": \"const mattermostInput = $item(0).$node['Action from MM'].json['body'];\\nconst config = $item(0).$node['Read Config 2'].json;\\n\\n// ensure there is a \\\"standups\\\" array:\\nconfig['standups'] = config['standups'] ?? [];\\n\\n// remove the standup from the list:\\nconfig['standups'] = config['standups'].filter(\\n  (standup) => standup.channelId != mattermostInput.channel_id\\n);\\n\\nconst textToArray = (text, separator) => {\\n  return text\\n    .split(separator)\\n    .map((e) => e.trim())\\n    .filter((e) => e.length > 0);\\n};\\n\\n// a standup can be deleted by updating its title to \\\"\\\"\\nif (mattermostInput.submission.title.length > 0) {\\n  const newStandup = {\\n    channelId: mattermostInput.channel_id,\\n    title: mattermostInput.submission.title,\\n    time: mattermostInput.submission.time,\\n    days: textToArray(mattermostInput.submission.days, ',').map((e) =>\\n      parseInt(e)\\n    ),\\n    users: textToArray(mattermostInput.submission.users, '\\\\n'),\\n    questions: textToArray(mattermostInput.submission.questions, '\\\\n'),\\n  };\\n\\n  config['standups'].push(newStandup);\\n}\\n\\nreturn [{ json: config }];\\n\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Override Config\",\n      \"type\": \"n8n-nodes-base.executeWorkflow\",\n      \"position\": [\n        1620,\n        820\n      ],\n      \"parameters\": {\n        \"workflowId\": \"1005\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Read Config 1\",\n      \"type\": \"n8n-nodes-base.executeWorkflow\",\n      \"position\": [\n        960,\n        580\n      ],\n      \"parameters\": {\n        \"workflowId\": \"1004\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Read Config 2\",\n      \"type\": \"n8n-nodes-base.executeWorkflow\",\n      \"position\": [\n        740,\n        820\n      ],\n      \"parameters\": {\n        \"workflowId\": \"1004\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"confirm success\",\n      \"type\": \"n8n-nodes-base.mattermost\",\n      \"position\": [\n        1840,\n        820\n      ],\n      \"parameters\": {\n        \"userId\": \"={{$node[\\\"Action from MM\\\"].json[\\\"body\\\"][\\\"user_id\\\"]}}\",\n        \"message\": \"new standup config was saved successfully\",\n        \"channelId\": \"={{$node[\\\"Action from MM\\\"].json[\\\"body\\\"][\\\"channel_id\\\"]}}\",\n        \"operation\": \"postEphemeral\"\n      },\n      \"credentials\": {\n        \"mattermostApi\": {\n          \"id\": \"2\",\n          \"name\": \"Mattermost account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Read Config 3\",\n      \"type\": \"n8n-nodes-base.executeWorkflow\",\n      \"position\": [\n        740,\n        380\n      ],\n      \"parameters\": {\n        \"workflowId\": \"1004\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Filter Due Standups\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"position\": [\n        960,\n        380\n      ],\n      \"parameters\": {\n        \"functionCode\": \"const config = $item(0).$node['Read Config 3'].json;\\n\\n// ensure there is a \\\"standups\\\" array:\\nconfig['standups'] = config['standups'] ?? [];\\n\\nconst now = new Date();\\nconst duePattern = `${now.getDay()}_${now\\n  .getHours()\\n  .toString()\\n  .padStart(2, '0')}:00`; // e.g. 1_13:00 => Monday 1 p.m.\\n  \\nconsole.log(duePattern);\\n\\n// filter standups that are due now:\\nconst dueStandups = config.standups.filter((standup) =>\\n  //true\\n  standup.days.map((day) => `${day}_${standup.time}`).includes(duePattern)\\n);\\n\\nreturn dueStandups.map((standup) => ({\\n  json: standup,\\n}));\\n\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Prep Request Standup\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"position\": [\n        1180,\n        380\n      ],\n      \"parameters\": {\n        \"functionCode\": \"const reminders = items.reduce((prev, curr) => {\\n  return prev.concat(\\n    curr.json.users.map((user) => ({\\n      channelId: curr.json.channelId,\\n      title: curr.json.title,\\n      user: user,\\n    }))\\n  );\\n}, []);\\n\\nreturn reminders.map((reminder) => ({\\n  json: reminder,\\n}));\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Create Channel\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1620,\n        380\n      ],\n      \"parameters\": {\n        \"url\": \"={{$item(0).$node[\\\"Read Config 3\\\"].json[\\\"config\\\"][\\\"mattermostBaseUrl\\\"]}}/api/v4/channels/direct\",\n        \"options\": {},\n        \"requestMethod\": \"POST\",\n        \"jsonParameters\": true,\n        \"bodyParametersJson\": \"=[\\\"{{$node[\\\"Get User\\\"].json[\\\"id\\\"]}}\\\", \\\"{{$item(0).$node[\\\"Read Config 3\\\"].json[\\\"config\\\"][\\\"botUserId\\\"]}}\\\"]\",\n        \"headerParametersJson\": \"={\\n  \\\"Authorization\\\": \\\"Bearer {{$item(0).$node[\\\"Read Config 3\\\"].json[\\\"config\\\"][\\\"botUserToken\\\"]}}\\\"\\n}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Remind Users\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2060,\n        380\n      ],\n      \"parameters\": {\n        \"url\": \"={{$item(0).$node[\\\"Read Config 3\\\"].json[\\\"config\\\"][\\\"mattermostBaseUrl\\\"]}}/api/v4/posts\",\n        \"options\": {},\n        \"requestMethod\": \"POST\",\n        \"jsonParameters\": true,\n        \"bodyParametersJson\": \"={{$json}}\",\n        \"headerParametersJson\": \"={\\n\\\"Authorization\\\": \\\"Bearer {{$item(0).$node[\\\"Read Config 3\\\"].json[\\\"config\\\"][\\\"botUserToken\\\"]}}\\\"\\n}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Get User\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1400,\n        380\n      ],\n      \"parameters\": {\n        \"url\": \"={{$item(0).$node[\\\"Read Config 3\\\"].json[\\\"config\\\"][\\\"mattermostBaseUrl\\\"]}}/api/v4/users/username/{{$node[\\\"Prep Request Standup\\\"].json[\\\"user\\\"]}}\",\n        \"options\": {},\n        \"jsonParameters\": true,\n        \"headerParametersJson\": \"={\\n  \\\"Authorization\\\": \\\"Bearer {{$item(0).$node[\\\"Read Config 3\\\"].json[\\\"config\\\"][\\\"botUserToken\\\"]}}\\\"\\n}\"\n      },\n      \"typeVersion\": 1,\n      \"continueOnFail\": true\n    },\n    {\n      \"name\": \"Prep Reminder\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"position\": [\n        1840,\n        380\n      ],\n      \"parameters\": {\n        \"functionCode\": \"const webhookUrl =\\n  $item(0).$node['Read Config 3'].json['config']['n8nWebhookUrl']; // e.g. https://xyz.app.n8n.cloud/webhook-test/standup-bot/action/top-secret-api-key\\n\\nconst botUserToken =\\n  $item(0).$node['Read Config 3'].json['config']['botUserToken'];\\n\\nlet itemIndex = 0;\\n\\nfor (item of items) {\\n  const directChannelId = item.json.id;\\n\\n  const payload = {\\n    channel_id: directChannelId,\\n    props: {\\n      attachments: [\\n        {\\n          pretext: \\\"Hi there! It's time for standup!\\\",\\n          text: `Please provide your input for: **${\\n            $item(itemIndex).$node['Prep Request Standup'].json['title']\\n          }**`,\\n          actions: [\\n            {\\n              id: webhookUrl.includes('test') ? 'webhook-test' : 'webhook',\\n              name: 'Provide Update',\\n              integration: {\\n                url: webhookUrl,\\n                context: {\\n                  action: 'open-standup-dialog',\\n                  secret: botUserToken, // not ideal but good enough for now...\\n                  standupId:\\n                    $item(itemIndex).$node['Prep Request Standup'].json[\\n                      'channelId'\\n                    ],\\n                },\\n              },\\n            },\\n          ],\\n        },\\n      ],\\n    },\\n  };\\n\\n  item.json = payload;\\n\\n  itemIndex++;\\n}\\n\\nreturn items;\\n\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Prep Standup Dialog\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"position\": [\n        1400,\n        1240\n      ],\n      \"parameters\": {\n        \"functionCode\": \"const standupId =\\n  $item(0).$node['Action from MM'].json['body']['context']['standupId'];\\n\\nconst postId = $item(0).$node['Action from MM'].json['body']['post_id'];\\n\\nconst configuredStandups =\\n  $item(0).$node['Read Config 2'].json['standups'] ?? [];\\n\\nlet standup = configuredStandups.find(\\n  (standup) => (standup.channelId == standupId)\\n);\\n\\nconst renderQuestions = (questions) => {\\n  let questionId = 1;\\n\\n  return questions.map((question) => ({\\n    display_name: question,\\n    name: `q${questionId++}`,\\n    type: 'textarea',\\n  }));\\n};\\n\\nconst payload = {\\n  trigger_id: $item(0).$node['Action from MM'].json['body']['trigger_id'],\\n  url: $item(0).$node['Read Config 2'].json['config']['n8nWebhookUrl'],\\n  dialog: {\\n    callback_id: 'standup-answers',\\n    title: `Report for: ${standup.title}`,\\n    submit_label: 'Submit',\\n    notify_on_cancel: false,\\n    state: JSON.stringify({ standupId, reminderPostId: postId }),\\n    elements: renderQuestions(standup.questions),\\n  },\\n};\\n\\nreturn [{ json: payload }];\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"open standup dialog\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1600,\n        1240\n      ],\n      \"parameters\": {\n        \"url\": \"={{$node[\\\"Read Config 2\\\"].json[\\\"config\\\"][\\\"mattermostBaseUrl\\\"]}}/api/v4/actions/dialogs/open\",\n        \"options\": {\n          \"bodyContentType\": \"json\"\n        },\n        \"requestMethod\": \"POST\",\n        \"jsonParameters\": true,\n        \"bodyParametersJson\": \"={{$json}}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Prep Report\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"position\": [\n        1620,\n        1040\n      ],\n      \"parameters\": {\n        \"functionCode\": \"const { standupId, reminderPostId } = JSON.parse(\\n  $item(0).$node['Action from MM'].json['body']['state']\\n);\\nconst submission = $item(0).$node['Action from MM'].json['body']['submission'];\\n\\nconst configuredStandups = $item(0).$node['Read Config 2'].json['standups'];\\n\\nconst standup = configuredStandups.find(\\n  (standup) => standup.channelId == standupId\\n);\\n\\nconst emptyAnswers = [\\n  '-',\\n  '/',\\n  ' ',\\n  'x',\\n  'n/a',\\n  'nope',\\n  'nopes',\\n  'no',\\n  'none',\\n  'no.',\\n  'nothing',\\n];\\n\\nfunction capitalize(text) {\\n  return text.charAt(0).toUpperCase() + text.slice(1);\\n}\\n\\nconst renderPost = (submission, standup) => {\\n  let postText = `### ${capitalize(\\n    $item(0).$node['get user data'].json['username']\\n  )}\\\\n`;\\n\\n  let questionIndex = 0;\\n\\n  postText += standup.questions\\n    .map((question) => {\\n      questionIndex++;\\n\\n      if (\\n        !submission[`q${questionIndex}`] ||\\n        emptyAnswers.includes(submission[`q${questionIndex}`].toLowerCase())\\n      ) {\\n        return '';\\n      }\\n\\n      return `#### ${question}\\\\n${submission[`q${questionIndex}`]}`;\\n    })\\n    .join('\\\\n');\\n\\n  return postText;\\n};\\n\\nreturn [\\n  {\\n    json: {\\n      post: renderPost(submission, standup),\\n      channel: standupId,\\n      reminderPostId,\\n      standupTitle: standup.title,\\n    },\\n  },\\n];\\n\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Delete ReminderPost\",\n      \"type\": \"n8n-nodes-base.mattermost\",\n      \"position\": [\n        2280,\n        1040\n      ],\n      \"parameters\": {\n        \"postId\": \"={{$node[\\\"Prep Report\\\"].json[\\\"reminderPostId\\\"]}}\",\n        \"operation\": \"delete\"\n      },\n      \"credentials\": {\n        \"mattermostApi\": {\n          \"id\": \"2\",\n          \"name\": \"Mattermost account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Update Post\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2060,\n        1040\n      ],\n      \"parameters\": {\n        \"url\": \"={{$node[\\\"Read Config 2\\\"].json[\\\"config\\\"][\\\"mattermostBaseUrl\\\"]}}/api/v4/posts/{{$node[\\\"Prep Report\\\"].json[\\\"reminderPostId\\\"]}}\",\n        \"options\": {},\n        \"requestMethod\": \"PUT\",\n        \"jsonParameters\": true,\n        \"bodyParametersJson\": \"={\\n\\\"id\\\":\\\"{{$node[\\\"Prep Report\\\"].json[\\\"reminderPostId\\\"]}}\\\",\\n\\\"message\\\": \\\"Thank you for providing your report for {{$node[\\\"Prep Report\\\"].json[\\\"standupTitle\\\"]}}\\\"\\n}\",\n        \"headerParametersJson\": \"={\\n\\\"Content-Type\\\":\\\"application/json\\\",\\n\\\"Authorization\\\": \\\"Bearer {{$item(0).$node[\\\"Read Config 2\\\"].json[\\\"config\\\"][\\\"botUserToken\\\"]}}\\\"\\n}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Every hour\",\n      \"type\": \"n8n-nodes-base.cron\",\n      \"position\": [\n        520,\n        380\n      ],\n      \"parameters\": {\n        \"triggerTimes\": {\n          \"item\": [\n            {\n              \"mode\": \"custom\",\n              \"cronExpression\": \"0 0 6-12 * * 1-5\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": false,\n  \"settings\": {},\n  \"connections\": {\n    \"config?\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Read Config 1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get User\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Create Channel\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Every hour\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Read Config 3\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Prep Report\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"publish report\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"callback ID?\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"standup-config\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"standup-answers\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [],\n        [\n          {\n            \"node\": \"open-standup-dialog?\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Prep Reminder\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Remind Users\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Read Config 1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Prep Config Dialog\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Read Config 2\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"callback ID?\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Read Config 3\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Filter Due Standups\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"get user data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Prep Report\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Action from MM\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Read Config 2\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Create Channel\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Prep Reminder\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"publish report\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Update Post\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"standup-config\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Prep Config Override\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Override Config\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"confirm success\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"standup-answers\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"get user data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Slash Cmd from MM\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"config?\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Prep Config Dialog\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"open config dialog\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Filter Due Standups\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Prep Request Standup\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Prep Standup Dialog\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"open standup dialog\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Prep Config Override\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Override Config\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Prep Request Standup\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get User\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"open-standup-dialog?\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Prep Standup Dialog\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.mattermost",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.if",
      "n8n-nodes-base.webhook",
      "n8n-nodes-base.webhook",
      "n8n-nodes-base.if",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.function",
      "n8n-nodes-base.switch",
      "n8n-nodes-base.noOp",
      "n8n-nodes-base.noOp",
      "n8n-nodes-base.function",
      "n8n-nodes-base.executeWorkflow",
      "n8n-nodes-base.executeWorkflow",
      "n8n-nodes-base.executeWorkflow",
      "n8n-nodes-base.mattermost",
      "n8n-nodes-base.executeWorkflow",
      "n8n-nodes-base.function",
      "n8n-nodes-base.function",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.function",
      "n8n-nodes-base.function",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.function",
      "n8n-nodes-base.mattermost",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.cron"
    ],
    "trigger": null
  }
}