{
  "source": "1249_Postgres_Webhook_Automation_Webhook.json",
  "index": 1,
  "content": "{\n  \"nodes\": [\n    {\n      \"id\": \"d44489b8-8cb7-4776-8c16-a8bb01e52171\",\n      \"name\": \"OpenAI1\",\n      \"type\": \"@n8n/n8n-nodes-langchain.openAi\",\n      \"position\": [\n        300,\n        -300\n      ],\n      \"parameters\": {\n        \"text\": \"={{ \\n JSON.parse($('Insert Transcription Part').item.json.dialog)\\n .filter(item => item.date_updated && new Date(item.date_updated) >= new Date($('Insert Transcription Part').item.json.date_updated))\\n .sort((a, b) => a.order - b.order)\\n .map(item => `${item.words}\\\\n${item.speaker}`)\\n .join('\\\\n\\\\n')\\n}}\",\n        \"memory\": \"threadId\",\n        \"prompt\": \"define\",\n        \"options\": {},\n        \"resource\": \"assistant\",\n        \"threadId\": \"={{ $json.thread_id }}\",\n        \"assistantId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"asst_D5t6bNnNpenmfC7PmvywMqyR\",\n          \"cachedResultName\": \"5minAI - Realtime Agent\"\n        }\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"SphXAX7rlwRLkiox\",\n          \"name\": \"Test club key\"\n        }\n      },\n      \"typeVersion\": 1.6\n    },\n    {\n      \"id\": \"3425f1c1-ad68-495e-bb9a-95ea92e7cf23\",\n      \"name\": \"Insert Transcription Part\",\n      \"type\": \"n8n-nodes-base.postgres\",\n      \"position\": [\n        -120,\n        -300\n      ],\n      \"parameters\": {\n        \"query\": \"UPDATE public.data\\nSET output = jsonb_set(\\n output,\\n '{dialog}', \\n (\\n COALESCE(\\n (output->'dialog')::jsonb, \\n '[]'::jsonb -- Initialize as empty array if dialog does not exist\\n ) || jsonb_build_object(\\n 'order', (COALESCE(jsonb_array_length(output->'dialog'), 0) + 1), -- Calculate the next order\\n 'words', '{{ $('Webhook2').item.json.body.data.transcript.words.map(word => word.text.replace(/'/g, \\\"''\\\")).join(\\\" \\\") }}',\\n 'speaker', '{{ $('Webhook2').item.json.body.data.transcript.speaker }}',\\n 'language', '{{ $('Webhook2').item.json.body.data.transcript.language }}',\\n 'speaker_id', ('{{ $('Webhook2').item.json.body.data.transcript.speaker_id }}')::int,\\n 'date_updated', to_jsonb('{{ $now }}'::text)\\n )\\n )\\n)\\nWHERE input->>'recall_bot_id' = $1\\nReturning input->>'openai_thread_id' as thread_id;\",\n        \"options\": {\n          \"queryReplacement\": \"={{ $('Scenario 2 Start - Webhook').item.json.body.data.bot_id }}\"\n        },\n        \"operation\": \"executeQuery\"\n      },\n      \"credentials\": {\n        \"postgres\": {\n          \"id\": \"AO9cER6p8uX7V07T\",\n          \"name\": \"Postgres 5minai\"\n        }\n      },\n      \"typeVersion\": 2.5\n    },\n    {\n      \"id\": \"9bcc0605-fc35-4842-a3f4-30ef902f35c1\",\n      \"name\": \"Create Note\",\n      \"type\": \"n8n-nodes-base.postgresTool\",\n      \"position\": [\n        180,\n        -120\n      ],\n      \"parameters\": {\n        \"query\": \"UPDATE public.data\\nSET output = jsonb_set(\\n output,\\n '{notes}', \\n (\\n COALESCE(\\n (output->'notes')::jsonb, \\n '[]'::jsonb -- Initialize as empty array if dialog does not exist\\n ) || jsonb_build_object(\\n 'order', (COALESCE(jsonb_array_length(output->'notes'), 0) + 1), -- Calculate the next order\\n 'text', '{{ $fromAI(\\\"note\\\",\\\"Text of note.\\\") }}'\\n )\\n )\\n)\\nWHERE input->>'recall_bot_id' = $1\",\n        \"options\": {\n          \"queryReplacement\": \"={{ $('Scenario 2 Start - Webhook').item.json.body.data.bot_id }}\"\n        },\n        \"operation\": \"executeQuery\",\n        \"descriptionType\": \"manual\",\n        \"toolDescription\": \"Create note record.\"\n      },\n      \"credentials\": {\n        \"postgres\": {\n          \"id\": \"AO9cER6p8uX7V07T\",\n          \"name\": \"Postgres 5minai\"\n        }\n      },\n      \"typeVersion\": 2.5\n    },\n    {\n      \"id\": \"0831c139-ca4b-4b4c-aa7f-7495c4ca0110\",\n      \"name\": \"Create Recall bot\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        -60,\n        -980\n      ],\n      \"parameters\": {\n        \"url\": \"https://us-west-2.recall.ai/api/v1/bot\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n \\\"meeting_url\\\":\\\"{{ $json.meeting_url }}\\\",\\n \\\"transcription_options\\\": {\\n \\\"provider\\\": \\\"assembly_ai\\\"\\n }\\n,\\n\\\"real_time_transcription\\\": {\\n \\\"destination_url\\\": \\\"https://n8n.lowcoding.dev/webhook/d074ca1e-52f9-47af-8587-8c24d431f9cd\\\"\\n },\\n\\\"automatic_leave\\\": {\\n \\\"silence_detection\\\": {\\n \\\"timeout\\\": 300, \\n \\\"activate_after\\\": 600\\n },\\n \\\"bot_detection\\\": {\\n \\\"using_participant_events\\\": {\\n \\\"timeout\\\": 600, \\n \\\"activate_after\\\": 1200\\n }\\n },\\n \\\"waiting_room_timeout\\\": 600,\\n \\\"noone_joined_timeout\\\": 600,\\n \\\"everyone_left_timeout\\\": 2,\\n \\\"in_call_not_recording_timeout\\\": 600,\\n \\\"recording_permission_denied_timeout\\\": 600\\n}\\n}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\"\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"lfHu7Kn7L7SH3LAF\",\n          \"name\": \"Recall\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"e1122b5b-3af5-4836-802c-40c3a0eb3c93\",\n      \"name\": \"Create OpenAI thread\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        140,\n        -980\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.openai.com/v1/threads\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"sendHeaders\": true,\n        \"authentication\": \"predefinedCredentialType\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"OpenAI-Beta\",\n              \"value\": \"assistants=v2\"\n            }\n          ]\n        },\n        \"nodeCredentialType\": \"openAiApi\"\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"SphXAX7rlwRLkiox\",\n          \"name\": \"Test club key\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"784c123d-adbb-4265-9485-2c88dd3091c2\",\n      \"name\": \"Create data record\",\n      \"type\": \"n8n-nodes-base.supabase\",\n      \"position\": [\n        320,\n        -980\n      ],\n      \"parameters\": {\n        \"tableId\": \"data\",\n        \"fieldsUi\": {\n          \"fieldValues\": [\n            {\n              \"fieldId\": \"input\",\n              \"fieldValue\": \"={{ {\\\"openai_thread_id\\\": $('Create OpenAI thread').item.json.id, \\\"recall_bot_id\\\": $('Create Recall bot').item.json.id, \\\"meeting_url\\\":$('Webhook').item.json.body.meeting_url } }}\"\n            },\n            {\n              \"fieldId\": \"output\",\n              \"fieldValue\": \"={{ {\\\"dialog\\\":[]} }}\"\n            }\n          ]\n        }\n      },\n      \"credentials\": {\n        \"supabaseApi\": {\n          \"id\": \"iVKNf5qv3ZFhq0ZV\",\n          \"name\": \"Supabase 5minAI\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f455c7de-1e64-4a28-9eef-11d19c982813\",\n      \"name\": \"Sticky Note9\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -900,\n        -380\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 330.5152611046425,\n        \"height\": 239.5888196628349,\n        \"content\": \"### ... or watch set up video [10 min]\\n[![Youtube Thumbnail](https://res.cloudinary.com/de9jgixzm/image/upload/v1739773273/Youtube%20Thumbs/Realtim%20AI%20Agent.png)](https://www.youtube.com/watch?v=rtaX6BMiTeo)\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"ea90c110-18ad-4f4b-90ab-fcb88b92e709\",\n      \"name\": \"Sticky Note7\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1200,\n        -1060\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 636,\n        \"height\": 657,\n        \"content\": \"![5min Logo](https://res.cloudinary.com/de9jgixzm/image/upload/v1739773200/Skool%20Assets/ejm3hqnvhgwpnu2fv92s.png)\\n## AI Agent for realtime insights on meetings\\n**Made by [Mark Shcherbakov](https://www.linkedin.com/in/marklowcoding/) from community [5minAI](https://www.skool.com/5minai)**\\n\\nTranscribing meetings manually can be tedious and prone to error. This workflow automates the transcription process in real-time, ensuring that key discussions and decisions are accurately captured and easily accessible for later review, thus enhancing productivity and clarity in communications.\\n\\nThe workflow employs an AI-powered assistant to join virtual meetings and capture discussions through real-time transcription. Key functionalities include:\\n- Automatic joining of meetings on platforms like Zoom, Google Meet, and others with the ability to provide real-time transcription.\\n- Integration with transcription APIs (e.g., AssemblyAI) to deliver seamless and accurate capture of dialogue.\\n- Structuring and storing transcriptions efficiently in a database for easy retrieval and analysis.\\n\\n1. **Real-Time Transcription**: The assistant captures audio during meetings and transcribes it in real-time, allowing participants to focus on discussions.\\n2. **Keyword Recognition**: Key phrases can trigger specific actions, such as noting important points or making prompts to the assistant.\\n3. **Structured Data Management**: The assistant maintains a database of transcriptions linked to meeting details for organized storage and quick access later.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"378c19bb-0e4a-43d3-9ba5-2a77ebfb5b83\",\n      \"name\": \"Sticky Note6\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1200,\n        -380\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 280,\n        \"height\": 626,\n        \"content\": \"### Set up steps\\n\\n#### Preparation\\n\\n1. **Create Recall.ai API key**\\n2. **Setup Supabase account and table**\\n```\\ncreate table\\n public.data (\\n id uuid not null default gen_random_uuid (),\\n date_created timestamp with time zone not null default (now() at time zone 'utc'::text),\\n input jsonb null,\\n output jsonb null,\\n constraint data_pkey primary key (id),\\n ) tablespace pg_default;\\n\\n```\\n3. **Create OpenAI API key**\\n\\n#### Development\\n\\n1. **Bot Creation**: \\n - Use a node to create the bot that will join meetings. Provide the meeting URL and set transcription options within the API request.\\n\\n2. **Authentication**: \\n - Configure authentication settings via a Bearer token for interacting with your transcription service.\\n\\n3. **Webhook Setup**: \\n - Create a webhook to receive real-time transcription updates, ensuring timely data capture during meetings.\\n\\n4. **Join Meeting**: \\n - Set the bot to join the specified meeting and actively listen to capture conversations.\\n\\n5. **Transcription Handling**: \\n - Combine transcription fragments into cohesive sentences and manage dialog arrays for coherence.\\n\\n6. **Trigger Actions on Keywords**: \\n - Set up keyword recognition that can initiate requests to the OpenAI API for additional interactions based on captured dialogue.\\n\\n7. **Output and Summary Generation**: \\n - Produce insights and summary notes from the transcriptions that can be stored back into the database for future reference.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"9a4ff741-ccfd-42e9-883e-43297a73e2c3\",\n      \"name\": \"Scenario 1 Start - Edit Fields\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -260,\n        -980\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"4891fa6e-2dd5-4433-925c-5497ec82e8ab\",\n              \"name\": \"meeting_url\",\n              \"type\": \"string\",\n              \"value\": \"https://meet.google.com/iix-vrav-kuc\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"a4368763-b96e-45e7-884d-aa0cbae2d276\",\n      \"name\": \"Scenario 2 Start - Webhook\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        -320,\n        -300\n      ],\n      \"webhookId\": \"7f176935-cb83-4147-ac14-48c8d747863a\",\n      \"parameters\": {\n        \"path\": \"d074ca1e-52f9-47af-8587-8c24d431f9cd\",\n        \"options\": {},\n        \"httpMethod\": \"POST\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"107b26af-d1d2-40c7-ad4f-7193d3ae9b70\",\n      \"name\": \"If Jimmy word\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        80,\n        -300\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"ba6c2ae5-d0f4-4242-9cf8-97cb84335a93\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"contains\"\n              },\n              \"leftValue\": \"={{ $('Scenario 2 Start - Webhook').item.json.body.data.transcript.words.map(word => word.text.replace(/'/g, \\\"''\\\")).join(\\\" \\\") }}\",\n              \"rightValue\": \"=Jimmy\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"49cf34f6-86cf-42cc-9da4-3efb37e6f565\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -380,\n        -1040\n      ],\n      \"parameters\": {\n        \"width\": 920,\n        \"height\": 400,\n        \"content\": \"## Scenario 1\\n\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"34660f39-6ecc-4f2d-98e8-a2c529255e98\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -380,\n        -360\n      ],\n      \"parameters\": {\n        \"width\": 1020,\n        \"height\": 420,\n        \"content\": \"## Scenario 2\\n\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"5027e72d-2b2c-40b4-921e-c4f40d85f251\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -200,\n        -120\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 270,\n        \"height\": 80,\n        \"content\": \"### Replace Supabase credentials\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"dddea341-da40-4b6a-ae25-a8417e869cc9\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -100,\n        -780\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 200,\n        \"height\": 80,\n        \"content\": \"### Replace server location\\n\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e8e76c2a-f949-400e-92b2-39da8034b471\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        340,\n        -100\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 270,\n        \"height\": 80,\n        \"content\": \"### Replace OpenAI credentials\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"729a5f6e-5aea-4908-9a82-2a7d7bea1322\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        140,\n        -780\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 290,\n        \"height\": 80,\n        \"content\": \"### Replace credentials\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"31178e90-62ce-4bf8-8381-dc8138088889\",\n      \"name\": \"Sticky Note8\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -320,\n        -780\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 200,\n        \"height\": 80,\n        \"content\": \"### Replace meeting url\\n\\n\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"pinData\": {\n    \"Create Recall bot\": [\n      {\n        \"id\": \"ab35fa56-e42b-47c6-b716-eac8d12af601\",\n        \"join_at\": null,\n        \"metadata\": {},\n        \"recording\": null,\n        \"video_url\": null,\n        \"recordings\": [],\n        \"meeting_url\": {\n          \"platform\": \"google_meet\",\n          \"meeting_id\": \"zst-ymag-zoa\"\n        },\n        \"status_changes\": [\n          {\n            \"code\": \"ready\",\n            \"message\": null,\n            \"sub_code\": null,\n            \"created_at\": \"2024-11-01T11:29:32.364684Z\"\n          }\n        ],\n        \"meeting_metadata\": null,\n        \"calendar_meetings\": [],\n        \"meeting_participants\": []\n      }\n    ],\n    \"Insert Transcription Part\": [\n      {\n        \"dialog\": \"[{\\\"order\\\": 1, \\\"words\\\": \\\"Wait.\\\", \\\"speaker\\\": \\\"Mark S.\\\", \\\"language\\\": null, \\\"speaker_id\\\": 100}, {\\\"order\\\": 2, \\\"words\\\": \\\"A bit.\\\", \\\"speaker\\\": \\\"Mark S.\\\", \\\"language\\\": null, \\\"speaker_id\\\": 100}, {\\\"order\\\": 3, \\\"words\\\": \\\"It's not even subtitles and it's not even a real. It's. A Google Meet.\\\", \\\"speaker\\\": \\\"Mark S.\\\", \\\"language\\\": null, \\\"speaker_id\\\": 100}, {\\\"order\\\": 4, \\\"words\\\": \\\"Same story. I wasn't prepared. I don't know what to tell you. Maybe my AI body can help me.\\\", \\\"speaker\\\": \\\"Mark S.\\\", \\\"language\\\": null, \\\"speaker_id\\\": 100}, {\\\"order\\\": 5, \\\"words\\\": \\\"What truth?\\\", \\\"speaker\\\": \\\"Mark S.\\\", \\\"language\\\": null, \\\"speaker_id\\\": 100}, {\\\"order\\\": 6, \\\"words\\\": \\\"You can get the same AI body in one day. Just drop AI in comment and I will. Send you a guide.\\\", \\\"speaker\\\": \\\"Mark S.\\\", \\\"language\\\": null, \\\"speaker_id\\\": 100}, {\\\"order\\\": 7, \\\"words\\\": \\\"As it works well.\\\", \\\"speaker\\\": \\\"Mark S.\\\", \\\"language\\\": \\\"null\\\", \\\"speaker_id\\\": 100}, {\\\"order\\\": 8, \\\"words\\\": \\\"As it works well.\\\", \\\"speaker\\\": \\\"Mark S.\\\", \\\"language\\\": \\\"null\\\", \\\"speaker_id\\\": 100}, {\\\"order\\\": 9, \\\"words\\\": \\\"As it works well.\\\", \\\"speaker\\\": \\\"Mark S.\\\", \\\"language\\\": \\\"null\\\", \\\"speaker_id\\\": 100}, {\\\"order\\\": 10, \\\"words\\\": \\\"Let's it works well.\\\", \\\"speaker\\\": \\\"Mark S.\\\", \\\"language\\\": \\\"null\\\", \\\"speaker_id\\\": 100}, {\\\"order\\\": 11, \\\"words\\\": \\\"Let's it works well.\\\", \\\"speaker\\\": \\\"Mark S.\\\", \\\"language\\\": \\\"null\\\", \\\"speaker_id\\\": 100}, {\\\"order\\\": 12, \\\"words\\\": \\\"Let's it works well.\\\", \\\"speaker\\\": \\\"Mark S.\\\", \\\"language\\\": \\\"null\\\", \\\"speaker_id\\\": 100, \\\"date_updated\\\": \\\"2024-11-22T08:41:24.164+01:00\\\"}, {\\\"order\\\": 13, \\\"words\\\": \\\"Let's it works well.\\\", \\\"speaker\\\": \\\"Mark S.\\\", \\\"language\\\": \\\"null\\\", \\\"speaker_id\\\": 100, \\\"date_updated\\\": \\\"2024-11-22T08:50:11.330+01:00\\\"}]\",\n        \"thread_id\": \"thread_0g7p3iE7MYmDPiUuPiZP5vfR\",\n        \"date_updated\": \"2024-11-22T08:37:55.751+01:00\"\n      }\n    ],\n    \"Scenario 2 Start - Webhook\": [\n      {\n        \"body\": {\n          \"data\": {\n            \"bot_id\": \"0032c6e2-78e9-46e7-a2ef-41d7b853ef48\",\n            \"transcript\": {\n              \"words\": [\n                {\n                  \"text\": \"Let's\",\n                  \"end_time\": 11.88,\n                  \"start_time\": 11.68\n                },\n                {\n                  \"text\": \"it\",\n                  \"end_time\": 12.12,\n                  \"start_time\": 11.88\n                },\n                {\n                  \"text\": \"works\",\n                  \"end_time\": 12.44,\n                  \"start_time\": 12.12\n                },\n                {\n                  \"text\": \"well.\",\n                  \"end_time\": 12.48,\n                  \"start_time\": 12.44\n                }\n              ],\n              \"source\": \"smart_annotator\",\n              \"speaker\": \"Mark S.\",\n              \"is_final\": true,\n              \"language\": null,\n              \"speaker_id\": 100,\n              \"original_transcript_id\": 32\n            },\n            \"recording_id\": \"ee1ad589-39fe-4ed5-b96f-cd14c63f3bc2\"\n          },\n          \"event\": \"bot.transcription\"\n        },\n        \"query\": {},\n        \"params\": {},\n        \"headers\": {\n          \"host\": \"n8n.lowcoding.dev\",\n          \"accept\": \"*/*\",\n          \"content-type\": \"application/json\",\n          \"content-length\": \"495\",\n          \"accept-encoding\": \"gzip\",\n          \"x-forwarded-for\": \"52.10.191.34\",\n          \"x-forwarded-host\": \"n8n.lowcoding.dev\",\n          \"x-forwarded-proto\": \"https\"\n        },\n        \"webhookUrl\": \"https://n8n.lowcoding.dev/webhook/d074ca1e-52f9-47af-8587-8c24d431f9cd\",\n        \"executionMode\": \"production\"\n      }\n    ]\n  },\n  \"connections\": {\n    \"OpenAI1\": {\n      \"main\": [\n        []\n      ]\n    },\n    \"Create Note\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"OpenAI1\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"If Jimmy word\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"OpenAI1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Create Recall bot\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Create OpenAI thread\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        []\n      ]\n    },\n    \"Create data record\": {\n      \"main\": [\n        []\n      ]\n    },\n    \"Create OpenAI thread\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Create data record\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Insert Transcription Part\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"If Jimmy word\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Scenario 2 Start - Webhook\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Insert Transcription Part\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Scenario 1 Start - Edit Fields\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Create Recall bot\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "@n8n/n8n-nodes-langchain.openAi",
      "n8n-nodes-base.postgres",
      "n8n-nodes-base.postgresTool",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.supabase",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.set",
      "n8n-nodes-base.webhook",
      "n8n-nodes-base.if",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote"
    ],
    "trigger": null
  }
}