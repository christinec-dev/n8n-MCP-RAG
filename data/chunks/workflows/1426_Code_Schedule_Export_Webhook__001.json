{
  "source": "1426_Code_Schedule_Export_Webhook.json",
  "index": 1,
  "content": "{\n  \"id\": \"Ef2uEM6H19K2DGUO\",\n  \"meta\": {\n    \"templateId\": \"2532\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"Backup workflows to git repository on Gitea\",\n  \"tags\": [\n    {\n      \"id\": \"UWNX4AzSneYNvTQI\",\n      \"name\": \"Gitea\",\n      \"createdAt\": \"2025-01-28T23:10:06.823Z\",\n      \"updatedAt\": \"2025-01-28T23:10:06.823Z\"\n    },\n    {\n      \"id\": \"4b7Bs9T0Cagsg5tT\",\n      \"name\": \"Git\",\n      \"createdAt\": \"2025-01-28T23:10:26.545Z\",\n      \"updatedAt\": \"2025-01-28T23:10:26.545Z\"\n    },\n    {\n      \"id\": \"HiN3ehC2KkAp5kVs\",\n      \"name\": \"Backup\",\n      \"createdAt\": \"2025-01-28T23:10:38.878Z\",\n      \"updatedAt\": \"2025-01-28T23:10:38.878Z\"\n    }\n  ],\n  \"nodes\": [\n    {\n      \"id\": \"639582ef-f13e-4844-bd10-647718079121\",\n      \"name\": \"Globals\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        600,\n        240\n      ],\n      \"parameters\": {\n        \"values\": {\n          \"string\": [\n            {\n              \"name\": \"repo.url\",\n              \"value\": \"https://git.vdm.dev\"\n            },\n            {\n              \"name\": \"repo.name\",\n              \"value\": \"workflows\"\n            },\n            {\n              \"name\": \"repo.owner\",\n              \"value\": \"n8n\"\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"9df89713-220e-43b9-b234-b8f5612629cf\",\n      \"name\": \"n8n\",\n      \"type\": \"n8n-nodes-base.n8n\",\n      \"position\": [\n        840,\n        240\n      ],\n      \"parameters\": {\n        \"filters\": {},\n        \"requestOptions\": {}\n      },\n      \"credentials\": {\n        \"n8nApi\": {\n          \"id\": \"ZjfxOLTTHX2CzbKa\",\n          \"name\": \"Main N8N Account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"4b2d375c-a339-404c-babd-555bd2fc4091\",\n      \"name\": \"Schedule Trigger\",\n      \"type\": \"n8n-nodes-base.scheduleTrigger\",\n      \"position\": [\n        380,\n        240\n      ],\n      \"parameters\": {\n        \"rule\": {\n          \"interval\": [\n            {\n              \"field\": \"minutes\",\n              \"minutesInterval\": 45\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"ea026e96-0db1-41fd-b003-2f2bf4662696\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2620,\n        300\n      ],\n      \"parameters\": {\n        \"height\": 80,\n        \"content\": \"Workflow changes committed to the repository\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"9c402daa-6d03-485d-b8a0-58f1b65d396d\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2260,\n        180\n      ],\n      \"parameters\": {\n        \"height\": 80,\n        \"content\": \"Check if there are any changes in the workflow\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"1d9216d9-bf8d-4945-8a58-22fb1ffc9be8\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1800,\n        580\n      ],\n      \"parameters\": {\n        \"height\": 80,\n        \"content\": \"Create a new file for the workflow\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"60a3953b-d9f1-4afd-b299-e314116b96c6\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1300,\n        200\n      ],\n      \"parameters\": {\n        \"height\": 80,\n        \"content\": \"Check if file exists in the repository\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f2340ad0-71a1-4c74-8d90-bcb974b8b305\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        780,\n        180\n      ],\n      \"parameters\": {\n        \"height\": 80,\n        \"content\": \"Get all workflows\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"617bea19-341a-4e9d-b6fd-6b417e58d756\",\n      \"name\": \"Sticky Note6\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        500,\n        180\n      ],\n      \"parameters\": {\n        \"height\": 80,\n        \"content\": \"Set variables\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"72f806d7-e30a-470b-9ba2-37fdc35de3c8\",\n      \"name\": \"SetDataUpdateNode\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1920,\n        240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"0a6b769a-c66d-4784-92c7-a70caa28e1ba\",\n              \"name\": \"item\",\n              \"type\": \"object\",\n              \"value\": \"={{ $node[\\\"ForEach\\\"].json }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"bca5e2c4-7aa3-48df-9e5f-b31977970c28\",\n      \"name\": \"SetDataCreateNode\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1220,\n        640\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"0a6b769a-c66d-4784-92c7-a70caa28e1ba\",\n              \"name\": \"item\",\n              \"type\": \"object\",\n              \"value\": \"={{ $node[\\\"ForEach\\\"].json }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"bf74b1ea-e066-462b-9c3d-ed4a44a09a33\",\n      \"name\": \"Base64EncodeUpdate\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        2140,\n        240\n      ],\n      \"parameters\": {\n        \"language\": \"python\",\n        \"pythonCode\": \"import json\\nimport base64\\nfrom js import Object\\n\\n# Assuming _input.all() returns a JavaScript object\\njs_object = _input.all()\\n\\n# Convert the JsProxy object to a Python dictionary\\ndef js_to_py(js_obj):\\n    if isinstance(js_obj, (str, int, float, bool)) or js_obj is None:\\n        # Base types are already Python-compatible\\n        return js_obj\\n    elif isinstance(js_obj, list):\\n        # Convert lists recursively\\n        return [js_to_py(item) for item in js_obj]\\n    elif hasattr(js_obj, \\\"__iter__\\\") and not isinstance(js_obj, str):\\n        # Handle JsProxy objects (JavaScript objects or arrays)\\n        if hasattr(js_obj, \\\"keys\\\"):\\n            # If it has keys, treat it as a dictionary\\n            return {key: js_to_py(js_obj[key]) for key in Object.keys(js_obj)}\\n        else:\\n            # Otherwise, treat it as a list\\n            return [js_to_py(item) for item in js_obj]\\n    else:\\n        # Fallback for other types\\n        return js_obj\\n\\n# Convert the JavaScript object to a Python dictionary\\ninput_dict = js_to_py(js_object)\\n\\n# Step 0: get the correct data set of the workflow\\ninner_data = input_dict[0].get('json').get('item')\\n\\n# Step 1: Convert the dictionary to a pretty-printed JSON string\\njson_string = json.dumps(inner_data, indent=4)\\n\\n# Step 2: Encode the JSON string to bytes\\njson_bytes = json_string.encode('utf-8')\\n\\n# Step 3: Convert the bytes to a base64 string\\nbase64_string = base64.b64encode(json_bytes).decode('utf-8')\\n\\n# Step 5: Create the return object with the base64 string and its SHA-256 hash\\nreturn_object = {\\n    \\\"item\\\": base64_string\\n}\\n\\n# Return the object\\nreturn return_object\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"2d817c66-5aa0-45c9-b851-4b5e3dbecca4\",\n      \"name\": \"Base64EncodeCreate\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1520,\n        640\n      ],\n      \"parameters\": {\n        \"language\": \"python\",\n        \"pythonCode\": \"import json\\nimport base64\\nfrom js import Object\\n\\n# Assuming _input.all() returns a JavaScript object\\njs_object = _input.all()\\n\\n# Convert the JsProxy object to a Python dictionary\\ndef js_to_py(js_obj):\\n    if isinstance(js_obj, (str, int, float, bool)) or js_obj is None:\\n        # Base types are already Python-compatible\\n        return js_obj\\n    elif isinstance(js_obj, list):\\n        # Convert lists recursively\\n        return [js_to_py(item) for item in js_obj]\\n    elif hasattr(js_obj, \\\"__iter__\\\") and not isinstance(js_obj, str):\\n        # Handle JsProxy objects (JavaScript objects or arrays)\\n        if hasattr(js_obj, \\\"keys\\\"):\\n            # If it has keys, treat it as a dictionary\\n            return {key: js_to_py(js_obj[key]) for key in Object.keys(js_obj)}\\n        else:\\n            # Otherwise, treat it as a list\\n            return [js_to_py(item) for item in js_obj]\\n    else:\\n        # Fallback for other types\\n        return js_obj\\n\\n# Convert the JavaScript object to a Python dictionary\\ninput_dict = js_to_py(js_object)\\n\\n# Step 0: get the correct data set of the workflow\\ninner_data = input_dict[0].get('json').get('item')\\n\\n# Step 1: Convert the dictionary to a pretty-printed JSON string\\njson_string = json.dumps(inner_data, indent=4)\\n\\n# Step 2: Encode the JSON string to bytes\\njson_bytes = json_string.encode('utf-8')\\n\\n# Step 3: Convert the bytes to a base64 string\\nbase64_string = base64.b64encode(json_bytes).decode('utf-8')\\n\\n# Step 4: Create the return object with the base64 string in 'item'\\nreturn_object = {\\n    \\\"item\\\": base64_string\\n}\\n\\n# Return the object\\nreturn return_object\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"41a7da89-1c8c-4100-8c30-d0788962efc1\",\n      \"name\": \"Exist\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        1640,\n        260\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"ignoreCase\": false\n        },\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"or\",\n          \"conditions\": [\n            {\n              \"id\": \"16a9182d-059d-4774-ba95-654fb4293fdb\",\n              \"operator\": {\n                \"type\": \"object\",\n                \"operation\": \"notExists\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.error }}\",\n              \"rightValue\": 404\n            }\n          ]\n        }\n      },\n      \"executeOnce\": false,\n      \"typeVersion\": 2.2,\n      \"alwaysOutputData\": false\n    },\n    {\n      \"id\": \"ab9246eb-a253-4d76-b33b-5f8f12342542\",\n      \"name\": \"Changed\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        2360,\n        240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"e0c66624-429a-4f1f-bf7b-1cc1b32bad7b\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"notEquals\"\n              },\n              \"leftValue\": \"={{ $json.item }}\",\n              \"rightValue\": \"={{ $('GetGitea').item.json.content }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"4278a176-6496-4817-82f8-591539619673\",\n      \"name\": \"PutGitea\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2700,\n        360\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Globals').item.json.repo.url }}/api/v1/repos/{{ $('Globals').item.json.repo.owner }}/{{ $('Globals').item.json.repo.name }}/contents/{{ encodeURIComponent($('GetGitea').item.json.name) }}\",\n        \"method\": \"PUT\",\n        \"options\": {},\n        \"sendBody\": true,\n        \"authentication\": \"genericCredentialType\",\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"content\",\n              \"value\": \"={{ $('Base64EncodeUpdate').item.json.item }}\"\n            },\n            {\n              \"name\": \"sha\",\n              \"value\": \"={{ $('GetGitea').item.json.sha }}\"\n            }\n          ]\n        },\n        \"genericAuthType\": \"httpHeaderAuth\"\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"gTvBAgkOmqhl5Nmr\",\n          \"name\": \"Gitea Token\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"12307a61-e7cc-42f9-a7c7-8abbcab9e3ab\",\n      \"name\": \"GetGitea\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        1380,\n        260\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Globals').item.json.repo.url }}/api/v1/repos/{{ encodeURIComponent($('Globals').item.json.repo.owner) }}/{{ encodeURIComponent($('Globals').item.json.repo.name) }}/contents/{{ encodeURIComponent($json.name) }}.json\",\n        \"options\": {},\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\"\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"gTvBAgkOmqhl5Nmr\",\n          \"name\": \"Gitea Token\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"24fda439-bb23-4392-a297-d8070907f9e6\",\n      \"name\": \"PostGitea\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1920,\n        640\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Globals').item.json.repo.url }}/api/v1/repos/{{ $('Globals').item.json.repo.owner }}/{{ $('Globals').item.json.repo.name }}/contents/{{ encodeURIComponent($('ForEach').item.json.name) }}.json\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"sendBody\": true,\n        \"authentication\": \"genericCredentialType\",\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"content\",\n              \"value\": \"={{ $json.item }}\"\n            }\n          ]\n        },\n        \"genericAuthType\": \"httpHeaderAuth\"\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"gTvBAgkOmqhl5Nmr\",\n          \"name\": \"Gitea Token\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"43a60315-d381-4ac4-be4c-f6a158651a00\",\n      \"name\": \"ForEach\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [\n        1060,\n        240\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"executeOnce\": false,\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"88578dc4-2398-48d0-b0ba-2198b35bb994\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        380,\n        440\n      ],\n      \"parameters\": {\n        \"width\": 560,\n        \"height\": 1620,\n        \"content\": \"### **📌 Setup Guide for Backup Workflows to Git Repository on Gitea**\\n\\n#### **🔧 1. Configure Global Variables**\\nGo to the **Globals** node and update the following:\\n- **`repo.url`** → `https://your-gitea-instance.com` *(Replace with your actual Gitea URL)*\\n- **`repo.name`** → `workflows` *(Repository name where backups will be stored)*\\n- **`repo.owner`** → `octoleo` *(Gitea account that owns the repository)*\\n\\n📌 **These settings define where workflows will be backed up.**\\n\\n---\\n\\n#### **🔑 2. Set Up Gitea Authentication**\\n1️⃣ **In Gitea:**\\n- Generate a **Personal Access Token** under **Settings → Applications → Generate Token**\\n- Ensure the token has **repo read/write permissions**\\n\\n2️⃣ **In the Credentials Manager:**\\n- Create a new **Gitea Token** credential\\n- Set the **Name** as `Authorization`\\n- Set the **Value** as:\\n```\\nBearer YOUR_PERSONAL_ACCESS_TOKEN\\n```\\n📌 **Ensure there is a space after `Bearer` before the token!**\\n\\n---\\n\\n#### **🔗 3. Connect Gitea Credentials to Git Nodes**\\n- Open each of these **three Git nodes**:\\n- **GetGitea** → Retrieves existing repository data\\n- **PutGitea** → Updates workflows\\n- **PostGitea** → Adds new workflows\\n\\n- Assign the **Gitea Token** credential to each node.\\n\\n📌 **These nodes handle pushing your workflows to Gitea.**\\n\\n---\\n\\n#### **🌐 4. Set Up API Credentials for Workflow Retrieval**\\n- Locate the API request node that **fetches workflows**.\\n- Add your **API authentication credentials** (Token or Basic Auth).\\n\\n📌 **This ensures the workflow can fetch all available workflows from your system.**\\n\\n---\\n\\n#### **🛠️ 5. Test & Activate the Workflow**\\n✅ **Run the workflow manually** → Check that workflows are being backed up correctly.\\n✅ **Review the Gitea repository** → Ensure the files are updated.\\n✅ **Enable the scheduled trigger** → Automates backups at defined intervals.\\n\\n📌 **The workflow automatically checks for changes before committing updates!**\\n\\n---\\n\\n### **🚀 Done! Your Workflows Are Now Backed Up Securely!**\\n💬 Have issues? **Reach out on the forum for help!**\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"84ba3f3f-fbc8-4792-8e28-198f515fef4e\",\n  \"staticData\": {\n    \"node:Schedule Trigger\": {\n      \"recurrenceRules\": []\n    }\n  },\n  \"connections\": {\n    \"n8n\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"ForEach\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Exist\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SetDataUpdateNode\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"SetDataCreateNode\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Changed\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"PutGitea\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"ForEach\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"ForEach\": {\n      \"main\": [\n        [],\n        [\n          {\n            \"node\": \"GetGitea\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Globals\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"n8n\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"GetGitea\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Exist\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"PutGitea\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"ForEach\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"PostGitea\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"ForEach\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Schedule Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Globals\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"SetDataCreateNode\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Base64EncodeCreate\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"SetDataUpdateNode\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Base64EncodeUpdate\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Base64EncodeCreate\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"PostGitea\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Base64EncodeUpdate\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Changed\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  },\n  \"triggerCount\": 1\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.set",
      "n8n-nodes-base.n8n",
      "n8n-nodes-base.scheduleTrigger",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.code",
      "n8n-nodes-base.code",
      "n8n-nodes-base.if",
      "n8n-nodes-base.if",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.splitInBatches",
      "n8n-nodes-base.stickyNote"
    ],
    "trigger": "schedule trigger"
  }
}