{
  "source": "1825_Code_Webhook_Automation_Webhook.json",
  "index": 1,
  "content": "{\n  \"id\": \"cY8OVKzHS0ScRhP9\",\n  \"meta\": {\n    \"instanceId\": \"ffb0782f8b2cf4278577cb919e0cd26141bc9ff8774294348146d454633aa4e3\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"puq-docker-n8n-deploy\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"fc30f537-51d2-45df-b1c4-5d4cd9d80a0e\",\n      \"name\": \"If\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        -2060,\n        -320\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"or\",\n          \"conditions\": [\n            {\n              \"id\": \"b702e607-888a-42c9-b9a7-f9d2a64dfccd\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $json.server_domain }}\",\n              \"rightValue\": \"={{ $('API').item.json.body.server_domain }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"6152fc38-2e50-4db5-b6f6-6e7d2492bbb1\",\n      \"name\": \"Parametrs\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -2280,\n        -320\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"a6328600-7ee0-4031-9bdb-fcee99b79658\",\n              \"name\": \"server_domain\",\n              \"type\": \"string\",\n              \"value\": \"d01-test.uuq.pl\"\n            },\n            {\n              \"id\": \"370ddc4e-0fc0-48f6-9b30-ebdfba72c62f\",\n              \"name\": \"clients_dir\",\n              \"type\": \"string\",\n              \"value\": \"/opt/docker/clients\"\n            },\n            {\n              \"id\": \"92202bb8-6113-4bc5-9a29-79d238456df2\",\n              \"name\": \"mount_dir\",\n              \"type\": \"string\",\n              \"value\": \"/mnt\"\n            },\n            {\n              \"id\": \"baa52df2-9c10-42b2-939f-f05ea85ea2be\",\n              \"name\": \"screen_left\",\n              \"type\": \"string\",\n              \"value\": \"{{\"\n            },\n            {\n              \"id\": \"2b19ed99-2630-412a-98b6-4be44d35d2e7\",\n              \"name\": \"screen_right\",\n              \"type\": \"string\",\n              \"value\": \"}}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"cf1b3eea-0439-418b-8c68-f7e45ddfbc7e\",\n      \"name\": \"API\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        -2600,\n        -320\n      ],\n      \"webhookId\": \"4e8168b3-2cad-462a-9750-152986331ce2\",\n      \"parameters\": {\n        \"path\": \"docker-n8n\",\n        \"options\": {},\n        \"httpMethod\": [\n          \"POST\"\n        ],\n        \"responseMode\": \"responseNode\",\n        \"authentication\": \"basicAuth\",\n        \"multipleMethods\": true\n      },\n      \"credentials\": {\n        \"httpBasicAuth\": {\n          \"id\": \"fiFY4Gv1SsaJfJvv\",\n          \"name\": \"n8n\"\n        }\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"516ac020-add2-4b08-ae91-bfb95dec2f88\",\n      \"name\": \"422-Invalid server domain\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        -2100,\n        0\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"responseCode\": 422\n        },\n        \"respondWith\": \"json\",\n        \"responseBody\": \"[{\\n  \\\"status\\\": \\\"error\\\",\\n  \\\"error\\\": \\\"Invalid server domain\\\"\\n}]\"\n      },\n      \"typeVersion\": 1.1,\n      \"alwaysOutputData\": false\n    },\n    {\n      \"id\": \"4e50cf8e-cfa7-4249-a847-9f8ff27664e4\",\n      \"name\": \"Code1\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        100,\n        100\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"try {\\n  if ($json.stdout === 'success') {\\n    return {\\n      json: {\\n        status: 'success',\\n        message: '',\\n        data: '',\\n      }\\n    };\\n  }\\n\\n  const parsedData = JSON.parse($json.stdout);\\n\\n  return {\\n    json: {\\n      status: parsedData.status === 'error' ? 'error' : 'success',\\n      message: parsedData.message || (parsedData.status === 'error' ? 'An error occurred' : ''),\\n      data: parsedData || '',\\n    }\\n  };\\n\\n} catch (error) {\\n  return {\\n    json: {\\n      status: 'error',\\n      message: $json.stdout,\\n      data: '',\\n    }\\n  };\\n}\"\n      },\n      \"executeOnce\": false,\n      \"retryOnFail\": false,\n      \"typeVersion\": 2,\n      \"alwaysOutputData\": false\n    },\n    {\n      \"id\": \"c7575c21-00dc-4238-95aa-3e20ff5d21a3\",\n      \"name\": \"SSH\",\n      \"type\": \"n8n-nodes-base.ssh\",\n      \"onError\": \"continueErrorOutput\",\n      \"position\": [\n        -180,\n        100\n      ],\n      \"parameters\": {\n        \"cwd\": \"=/\",\n        \"command\": \"={{ $json.sh }}\"\n      },\n      \"credentials\": {\n        \"sshPassword\": {\n          \"id\": \"Cyjy61UWHwD2Xcd8\",\n          \"name\": \"d01-test.uuq.pl-puq\"\n        }\n      },\n      \"executeOnce\": true,\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2e017042-f991-45c7-afc4-ffdfcded4003\",\n      \"name\": \"Container Actions\",\n      \"type\": \"n8n-nodes-base.switch\",\n      \"position\": [\n        -1680,\n        580\n      ],\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"outputKey\": \"start\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"66ad264d-5393-410c-bfa3-011ab8eb234a\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"container_start\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"stop\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"b48957a0-22c0-4ac0-82ef-abd9e7ab0207\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"container_stop\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"mount_disk\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"727971bf-4218-41c1-9b07-22df4b947852\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"container_mount_disk\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"unmount_disk\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"0c80b1d9-e7ca-4cf3-b3ac-b40fdf4dd8f8\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"container_unmount_disk\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"container_get_acl\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"138c5436-dd66-48d4-bca4-6af6c80cd903\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"container_get_acl\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"container_set_acl\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"fa39e80b-4aa4-4cd3-af3c-14acfa9cf2d8\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"container_set_acl\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"container_get_net\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"46b0d65f-20d6-467a-94fb-407370d967f7\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"container_get_net\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"typeVersion\": 3.2\n    },\n    {\n      \"id\": \"2fdb7b98-d6f8-44b4-917b-1ed2bb0e65f8\",\n      \"name\": \"Service Actions\",\n      \"type\": \"n8n-nodes-base.switch\",\n      \"position\": [\n        -1240,\n        -1140\n      ],\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"outputKey\": \"test_connection\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"3afdd2f1-fe93-47c2-95cd-bac9b1d94eeb\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"test_connection\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"create\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"102f10e9-ec6c-4e63-ba95-0fe6c7dc0bd1\",\n                    \"operator\": {\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"create\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"suspend\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"f62dfa34-6751-4b34-adcc-3d6ba1b21a8c\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"suspend\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"unsuspend\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"384d2026-b753-4c27-94c2-8f4fc189eb5f\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"unsuspend\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"terminate\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"0e190a97-827a-4e87-8222-093ff7048b21\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"terminate\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"change_package\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"6f7832f3-b61d-4517-ab6b-6007998136dd\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"change_package\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"typeVersion\": 3.2\n    },\n    {\n      \"id\": \"ac5541f1-94e4-4c7e-a3a5-58b56b9e1ea8\",\n      \"name\": \"Container Stats\",\n      \"type\": \"n8n-nodes-base.switch\",\n      \"position\": [\n        -1680,\n        -340\n      ],\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"outputKey\": \"inspect\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"66ad264d-5393-410c-bfa3-011ab8eb234a\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"container_information_inspect\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"stats\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"b48957a0-22c0-4ac0-82ef-abd9e7ab0207\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"container_information_stats\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"log\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"50ede522-af22-4b7a-b1fd-34b27fd3fadd\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"container_log\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"typeVersion\": 3.2\n    },\n    {\n      \"id\": \"33dab9ef-121f-4b8a-af2b-7e1151ebd95f\",\n      \"name\": \"API answer\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        400,\n        100\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"responseCode\": 200\n        },\n        \"respondWith\": \"allIncomingItems\"\n      },\n      \"typeVersion\": 1.1,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"3b8ae835-901c-44b5-9635-7c1d92509704\",\n      \"name\": \"Inspect\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1360,\n        -540\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/{{ $('API').item.json.body.domain }}\\\"\\nCONTAINER_NAME=\\\"{{ $('API').item.json.body.domain }}\\\"\\n\\nINSPECT_JSON=\\\"{}\\\"\\nif sudo docker ps -a --filter \\\"name=$CONTAINER_NAME\\\" | grep -q \\\"$CONTAINER_NAME\\\"; then\\n  INSPECT_JSON=$(sudo docker inspect \\\"$CONTAINER_NAME\\\")\\nfi\\n\\necho \\\"{\\\\\\\"inspect\\\\\\\": $INSPECT_JSON}\\\"\\n\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"8193cb7c-50eb-49d3-a4d3-1c0b7686a1b1\",\n      \"name\": \"Stat\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1360,\n        -340\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/{{ $('API').item.json.body.domain }}\\\"\\nSTATUS_FILE=\\\"$COMPOSE_DIR/status.json\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/{{ $('API').item.json.body.domain }}\\\"\\nCONTAINER_NAME=\\\"{{ $('API').item.json.body.domain }}\\\"\\n\\n# Initialize empty container data\\nINSPECT_JSON=\\\"{}\\\"\\nSTATS_JSON=\\\"{}\\\"\\n\\n# Check if container is running\\nif sudo docker ps -a --filter \\\"name=$CONTAINER_NAME\\\" | grep -q \\\"$CONTAINER_NAME\\\"; then\\n  # Get Docker inspect info in JSON (as raw string)\\n  INSPECT_JSON=$(sudo docker inspect \\\"$CONTAINER_NAME\\\")\\n\\n  # Get Docker stats info in JSON (as raw string)\\n  STATS_JSON=$(sudo docker stats --no-stream --format \\\"{{ $('Parametrs').item.json.screen_left }}json .{{ $('Parametrs').item.json.screen_right }}\\\" \\\"$CONTAINER_NAME\\\")\\n  STATS_JSON=${STATS_JSON:-'{}'}\\nfi\\n\\n# Initialize disk info variables\\nMOUNT_USED=\\\"N/A\\\"\\nMOUNT_FREE=\\\"N/A\\\"\\nMOUNT_TOTAL=\\\"N/A\\\"\\nMOUNT_PERCENT=\\\"N/A\\\"\\nIMG_SIZE=\\\"N/A\\\"\\nIMG_PERCENT=\\\"N/A\\\"\\nDISK_STATS_IMG=\\\"N/A\\\"\\n\\n# Check if mount directory exists and is accessible\\nif [ -d \\\"$MOUNT_DIR\\\" ]; then\\n  if mount | grep -q \\\"$MOUNT_DIR\\\"; then\\n    # Get disk usage for mounted directory\\n    DISK_STATS_MOUNT=$(df -h \\\"$MOUNT_DIR\\\" | tail -n 1)\\n    MOUNT_USED=$(echo \\\"$DISK_STATS_MOUNT\\\" | awk '{print $3}')\\n    MOUNT_FREE=$(echo \\\"$DISK_STATS_MOUNT\\\" | awk '{print $4}')\\n    MOUNT_TOTAL=$(echo \\\"$DISK_STATS_MOUNT\\\" | awk '{print $2}')\\n    MOUNT_PERCENT=$(echo \\\"$DISK_STATS_MOUNT\\\" | awk '{print $5}')\\n  fi\\nfi\\n\\n# Check if image file exists\\nif [ -f \\\"$IMG_FILE\\\" ]; then\\n  # Get disk usage for image file\\n  IMG_SIZE=$(du -sh \\\"$IMG_FILE\\\" | awk '{print $1}')\\nfi\\n\\n# Manually create a combined JSON object\\nFINAL_JSON=\\\"{\\\\\\\"inspect\\\\\\\": $INSPECT_JSON, \\\\\\\"stats\\\\\\\": $STATS_JSON, \\\\\\\"disk\\\\\\\": {\\\\\\\"mounted\\\\\\\": {\\\\\\\"used\\\\\\\": \\\\\\\"$MOUNT_USED\\\\\\\", \\\\\\\"free\\\\\\\": \\\\\\\"$MOUNT_FREE\\\\\\\", \\\\\\\"total\\\\\\\": \\\\\\\"$MOUNT_TOTAL\\\\\\\", \\\\\\\"percent\\\\\\\": \\\\\\\"$MOUNT_PERCENT\\\\\\\"}, \\\\\\\"img_file\\\\\\\": {\\\\\\\"size\\\\\\\": \\\\\\\"$IMG_SIZE\\\\\\\"}}}\\\"\\n\\n# Output the result\\necho \\\"$FINAL_JSON\\\"\\n\\nexit 0\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"1888734f-11a9-47a1-8353-c6b2862ff437\",\n      \"name\": \"Start\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1200,\n        240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/{{ $('API').item.json.body.domain }}\\\"\\nSTATUS_FILE=\\\"$COMPOSE_DIR/status.json\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/{{ $('API').item.json.body.domain }}\\\"\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\nif ! df -h | grep -q \\\"$MOUNT_DIR\\\"; then\\n    handle_error \\\"The file $IMG_FILE is not mounted to $MOUNT_DIR\\\"\\nfi\\n\\nif sudo docker ps --filter \\\"name={{ $('API').item.json.body.domain }}\\\" --filter \\\"status=running\\\" -q | grep -q .; then\\n    handle_error \\\"{{ $('API').item.json.body.domain }} container is running\\\"\\nfi\\n\\n# Change to the compose directory\\ncd \\\"$COMPOSE_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to change directory to $COMPOSE_DIR\\\"\\n\\n# Start the Docker containers\\nif ! sudo docker-compose up -d > /dev/null 2>error.log; then\\n    ERROR_MSG=$(tail -n 10 error.log)\\n    handle_error \\\"Docker-compose failed: $ERROR_MSG\\\"\\nfi\\n\\n# Success\\necho \\\"success\\\"\\n\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"e9886d6a-c537-4a1e-b2d4-1c4bfaf379e3\",\n      \"name\": \"Stop\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1080,\n        340\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/{{ $('API').item.json.body.domain }}\\\"\\nSTATUS_FILE=\\\"$COMPOSE_DIR/status.json\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/{{ $('API').item.json.body.domain }}\\\"\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Check if Docker container is running\\nif ! sudo docker ps --filter \\\"name={{ $('API').item.json.body.domain }}\\\" --filter \\\"status=running\\\" -q | grep -q .; then\\n    handle_error \\\"{{ $('API').item.json.body.domain }} container is not running\\\"\\nfi\\n\\n# Stop and remove the Docker containers (also remove associated volumes)\\nif ! sudo docker-compose -f \\\"$COMPOSE_DIR/docker-compose.yml\\\" down > /dev/null 2>&1; then\\n    handle_error \\\"Failed to stop and remove docker-compose containers\\\"\\nfi\\n\\necho \\\"success\\\"\\n\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"07ff56b6-6b49-4215-9801-2c13124e0023\",\n      \"name\": \"Test Connection1\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -660,\n        -1140\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\n# Function to log an error, print to console\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Check if Docker is installed\\nif ! command -v docker &> /dev/null; then\\n    handle_error \\\"Docker is not installed\\\"\\nfi\\n\\n# Check if Docker service is running\\nif ! systemctl is-active --quiet docker; then\\n    handle_error \\\"Docker service is not running\\\"\\nfi\\n\\n# Check if nginx-proxy container is running\\nif ! sudo docker ps --filter \\\"name=nginx-proxy\\\" --filter \\\"status=running\\\" -q > /dev/null; then\\n    handle_error \\\"nginx-proxy container is not running\\\"\\nfi\\n\\n# Check if letsencrypt-nginx-proxy-companion container is running\\nif ! sudo docker ps --filter \\\"name=letsencrypt-nginx-proxy-companion\\\" --filter \\\"status=running\\\" -q > /dev/null; then\\n    handle_error \\\"letsencrypt-nginx-proxy-companion container is not running\\\"\\nfi\\n\\n# If everything is successful\\necho \\\"success\\\"\\n\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"e8ad165b-fb70-41fe-938d-5f600c57d1d0\",\n      \"name\": \"Deploy\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -660,\n        -980\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\n# Get values for variables from templates\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nCOMPOSE_FILE=\\\"$COMPOSE_DIR/docker-compose.yml\\\"\\nSTATUS_FILE=\\\"$COMPOSE_DIR/status\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\nVHOST_DIR=\\\"/opt/docker/nginx-proxy/nginx/vhost.d\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/$DOMAIN\\\"\\nDOCKER_COMPOSE_TEXT='{{ $('Deploy-docker-compose').item.json[\\\"docker-compose\\\"] }}'\\n\\nNGINX_MAIN_ACL_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_acl\\n\\nNGINX_MAIN_TEXT='{{ $('nginx').item.json['main'] }}'\\nNGINX_MAIN_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"\\nVHOST_MAIN_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"\\n\\nNGINX_MAIN_LOCATION_TEXT='{{ $('nginx').item.json['main_location'] }}'\\nNGINX_MAIN_LOCATION_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_location\\nVHOST_MAIN_LOCATION_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"_location\\n\\nDISK_SIZE=\\\"{{ $('API').item.json.body.disk }}\\\"\\n\\n# Function to handle errors: write to the status file and print the message to console\\nhandle_error() {\\n    STATUS_JSON=\\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    echo \\\"$STATUS_JSON\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null  # Write error to the status file\\n    echo \\\"error: $1\\\"  # Print the error message to the console\\n    exit 1  # Exit the script with an error code\\n}\\n\\n# Check if the directory already exists. If yes, exit with an error.\\nif [ -d \\\"$COMPOSE_DIR\\\" ]; then\\n    echo \\\"error: Directory $COMPOSE_DIR already exists\\\"\\n    exit 1\\nfi\\n\\n# Create necessary directories with permissions\\nsudo mkdir -p \\\"$COMPOSE_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $COMPOSE_DIR\\\"\\nsudo mkdir -p \\\"$NGINX_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_DIR\\\"\\nsudo mkdir -p \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $MOUNT_DIR\\\"\\n\\n# Set permissions on the created directories\\nsudo chmod -R 777 \\\"$COMPOSE_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to set permissions on $COMPOSE_DIR\\\"\\nsudo chmod -R 777 \\\"$NGINX_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to set permissions on $NGINX_DIR\\\"\\nsudo chmod -R 777 \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to set permissions on $MOUNT_DIR\\\"\\n\\n# Create docker-compose.yml file\\necho \\\"$DOCKER_COMPOSE_TEXT\\\" | sudo tee \\\"$COMPOSE_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $COMPOSE_FILE\\\"\\n\\n# Create NGINX configuration files\\necho \\\"\\\" | sudo tee \\\"$NGINX_MAIN_ACL_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_MAIN_ACL_FILE\\\"\\n\\necho \\\"$NGINX_MAIN_TEXT\\\" | sudo tee \\\"$NGINX_MAIN_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_MAIN_FILE\\\"\\necho \\\"$NGINX_MAIN_LOCATION_TEXT\\\" | sudo tee \\\"$NGINX_MAIN_LOCATION_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_MAIN_LOCATION_FILE\\\"\\n\\n# Change to the compose directory\\ncd \\\"$COMPOSE_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to change directory to $COMPOSE_DIR\\\"\\n\\n# Create data.img file if it doesn't exist\\nif [ ! -f \\\"$IMG_FILE\\\" ]; then\\n    sudo fallocate -l \\\"$DISK_SIZE\\\"G \\\"$IMG_FILE\\\" > /dev/null 2>&1 || sudo truncate -s \\\"$DISK_SIZE\\\"G \\\"$IMG_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $IMG_FILE\\\"\\n    sudo mkfs.ext4 \\\"$IMG_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to format $IMG_FILE\\\"  # Format the image as ext4\\n    sync  # Synchronize the data to disk\\nfi\\n\\n# Add an entry to /etc/fstab for mounting if not already present\\nif ! grep -q \\\"$IMG_FILE\\\" /etc/fstab; then\\n    echo \\\"$IMG_FILE $MOUNT_DIR ext4 loop 0 0\\\" | sudo tee -a /etc/fstab > /dev/null || handle_error \\\"Failed to add entry to /etc/fstab\\\"\\nfi\\n\\n# Mount all entries in /etc/fstab\\nsudo mount -a || handle_error \\\"Failed to mount entries from /etc/fstab\\\"\\n\\n# Set permissions on the mount directory\\nsudo chmod -R 777 \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to set permissions on $MOUNT_DIR\\\"\\n\\n# Copy NGINX configuration files instead of creating symbolic links\\nsudo cp -f \\\"$NGINX_MAIN_FILE\\\" \\\"$VHOST_MAIN_FILE\\\" || handle_error \\\"Failed to copy $NGINX_MAIN_FILE to $VHOST_MAIN_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_MAIN_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_MAIN_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_MAIN_LOCATION_FILE\\\" \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to copy $NGINX_MAIN_LOCATION_FILE to $VHOST_MAIN_LOCATION_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_MAIN_LOCATION_FILE\\\"\\n\\n# Start Docker containers using docker-compose\\nif ! sudo docker-compose up -d > /dev/null 2>error.log; then\\n    ERROR_MSG=$(tail -n 10 error.log)  # Read the last 10 lines from error.log\\n    handle_error \\\"Docker-compose failed: $ERROR_MSG\\\"\\nfi\\n\\n# If everything is successful, update the status file and print success message\\necho \\\"active\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null\\necho \\\"success\\\"\\n\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"a6346a99-545f-4873-ac41-8c25941f34e9\",\n      \"name\": \"Suspend\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -660,\n        -820\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nCOMPOSE_FILE=\\\"$COMPOSE_DIR/docker-compose.yml\\\"\\nSTATUS_FILE=\\\"$COMPOSE_DIR/status\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\nVHOST_DIR=\\\"/opt/docker/nginx-proxy/nginx/vhost.d\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/$DOMAIN\\\"\\n\\nVHOST_MAIN_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"\\nVHOST_MAIN_LOCATION_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"_location\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    STATUS_JSON=\\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    echo \\\"$STATUS_JSON\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Stop and remove Docker containers (also remove associated volumes)\\nif [ -f \\\"$COMPOSE_FILE\\\" ]; then\\n    if ! sudo docker-compose -f \\\"$COMPOSE_FILE\\\" down > /dev/null 2>&1; then\\n        handle_error \\\"Failed to stop and remove docker-compose containers\\\"\\n    fi\\nelse\\n    echo \\\"Warning: docker-compose.yml not found, skipping container stop.\\\"\\nfi\\n\\n# Remove mount entry from /etc/fstab if it exists\\nif grep -q \\\"$IMG_FILE\\\" /etc/fstab; then\\n    sudo sed -i \\\"\\\\|$(printf '%s\\\\n' \\\"$IMG_FILE\\\" | sed 's/[.[\\\\*^$]/\\\\\\\\&/g')|d\\\" /etc/fstab\\nfi\\n\\n# Unmount the image if it is mounted\\nif mount | grep -q \\\"$MOUNT_DIR\\\"; then\\n    sudo umount \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to unmount $MOUNT_DIR\\\"\\nfi\\n\\n# Remove the mount directory\\nif [ -d \\\"$MOUNT_DIR\\\" ]; then\\n    sudo rm -rf \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to remove $MOUNT_DIR\\\"\\nfi\\n\\n# Remove NGINX configuration files\\n[ -f \\\"$VHOST_MAIN_FILE\\\" ] && sudo rm -f \\\"$VHOST_MAIN_FILE\\\" || handle_error \\\"Warning: $VHOST_MAIN_FILE not found.\\\"\\n[ -f \\\"$VHOST_MAIN_LOCATION_FILE\\\" ] && sudo rm -f \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Warning: $VHOST_MAIN_LOCATION_FILE not found.\\\"\\n\\n# Update status\\necho \\\"suspended\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null\\n\\n# Success\\necho \\\"success\\\"\\nexit 0\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"61cba08a-a873-4a1c-98a4-75a3986d8e63\",\n      \"name\": \"Terminated\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -660,\n        -480\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nCOMPOSE_FILE=\\\"$COMPOSE_DIR/docker-compose.yml\\\"\\nSTATUS_FILE=\\\"$COMPOSE_DIR/status\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\nVHOST_DIR=\\\"/opt/docker/nginx-proxy/nginx/vhost.d\\\"\\n\\nVHOST_MAIN_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"\\nVHOST_MAIN_LOCATION_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"_location\\n\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/$DOMAIN\\\"\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    STATUS_JSON=\\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Stop and remove the Docker containers\\nif [ -f \\\"$COMPOSE_FILE\\\" ]; then\\n    sudo docker-compose -f \\\"$COMPOSE_FILE\\\" down > /dev/null 2>&1\\nfi\\n\\n# Remove the mount entry from /etc/fstab if it exists\\nif grep -q \\\"$IMG_FILE\\\" /etc/fstab; then\\n    sudo sed -i \\\"\\\\|$(printf '%s\\\\n' \\\"$IMG_FILE\\\" | sed 's/[.[\\\\*^$]/\\\\\\\\&/g')|d\\\" /etc/fstab\\nfi\\n\\n# Unmount the image if it is still mounted\\nif mount | grep -q \\\"$MOUNT_DIR\\\"; then\\n    sudo umount \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to unmount $MOUNT_DIR\\\"\\nfi\\n\\n# Remove all related directories and files\\nfor item in \\\"$COMPOSE_DIR\\\" \\\"$VHOST_MAIN_FILE\\\" \\\"$VHOST_MAIN_LOCATION_FILE\\\"; do\\n    if [ -e \\\"$item\\\" ]; then\\n        sudo rm -rf \\\"$item\\\" || handle_error \\\"Failed to remove $item\\\"\\n    fi\\ndone\\n\\necho \\\"success\\\"\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"a66a034f-970a-4cee-b324-f1b423625bd7\",\n      \"name\": \"Unsuspend\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -660,\n        -660\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nCOMPOSE_FILE=\\\"$COMPOSE_DIR/docker-compose.yml\\\"\\nSTATUS_FILE=\\\"$COMPOSE_DIR/status\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\nVHOST_DIR=\\\"/opt/docker/nginx-proxy/nginx/vhost.d\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/$DOMAIN\\\"\\nDOCKER_COMPOSE_TEXT='{{ $('Deploy-docker-compose').item.json[\\\"docker-compose\\\"] }}'\\n\\nNGINX_MAIN_ACL_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_acl\\n\\nNGINX_MAIN_TEXT='{{ $('nginx').item.json['main'] }}'\\nNGINX_MAIN_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"\\nVHOST_MAIN_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"\\n\\nNGINX_MAIN_LOCATION_TEXT='{{ $('nginx').item.json['main_location'] }}'\\nNGINX_MAIN_LOCATION_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_location\\nVHOST_MAIN_LOCATION_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"_location\\n\\nDISK_SIZE=\\\"{{ $('API').item.json.body.disk }}\\\"\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    STATUS_JSON=\\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    echo \\\"$STATUS_JSON\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\nupdate_nginx_acl() {\\n    ACL_FILE=$1\\n    LOCATION_FILE=$2\\n    \\n    if [ -s \\\"$ACL_FILE\\\" ]; then  # Проверяем, что файл существует и не пустой\\n        VALID_LINES=$(grep -vE '^\\\\s*$' \\\"$ACL_FILE\\\")  # Убираем пустые строки\\n        if [ -n \\\"$VALID_LINES\\\" ]; then  # Если есть непустые строки\\n            while IFS= read -r line; do\\n                echo \\\"allow $line;\\\" | sudo tee -a \\\"$LOCATION_FILE\\\" > /dev/null || handle_error \\\"Failed to update $LOCATION_FILE\\\"\\n            done <<< \\\"$VALID_LINES\\\"\\n            echo \\\"deny all;\\\" | sudo tee -a \\\"$LOCATION_FILE\\\" > /dev/null || handle_error \\\"Failed to update $LOCATION_FILE\\\"\\n        fi\\n    fi\\n}\\n\\n# Create necessary directories with permissions\\nfor dir in \\\"$COMPOSE_DIR\\\" \\\"$NGINX_DIR\\\" \\\"$MOUNT_DIR\\\"; do\\n    sudo mkdir -p \\\"$dir\\\" || handle_error \\\"Failed to create $dir\\\"\\n    sudo chmod -R 777 \\\"$dir\\\" || handle_error \\\"Failed to set permissions on $dir\\\"\\ndone\\n\\n# Check if the image is already mounted using fstab\\nif ! grep -q \\\"$IMG_FILE\\\" /etc/fstab; then\\n    echo \\\"$IMG_FILE $MOUNT_DIR ext4 loop 0 0\\\" | sudo tee -a /etc/fstab > /dev/null || handle_error \\\"Failed to add fstab entry for $IMG_FILE\\\"\\nfi\\n\\n# Apply the fstab changes and mount the image\\nif ! mount | grep -q \\\"$MOUNT_DIR\\\"; then\\n    sudo mount -a || handle_error \\\"Failed to mount image using fstab\\\"\\nfi\\n\\n# Create docker-compose.yml file\\necho \\\"$DOCKER_COMPOSE_TEXT\\\" | sudo tee \\\"$COMPOSE_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $COMPOSE_FILE\\\"\\n\\n# Create NGINX configuration files\\necho \\\"$NGINX_MAIN_TEXT\\\" | sudo tee \\\"$NGINX_MAIN_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_MAIN_FILE\\\"\\necho \\\"$NGINX_MAIN_LOCATION_TEXT\\\" | sudo tee \\\"$NGINX_MAIN_LOCATION_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_MAIN_FILE\\\"\\n\\n# Copy NGINX configuration files instead of creating symbolic links\\nsudo cp -f \\\"$NGINX_MAIN_FILE\\\" \\\"$VHOST_MAIN_FILE\\\" || handle_error \\\"Failed to copy $NGINX_MAIN_FILE to $VHOST_MAIN_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_MAIN_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_MAIN_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_MAIN_LOCATION_FILE\\\" \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to copy $NGINX_MAIN_LOCATION_FILE to $VHOST_MAIN_LOCATION_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_MAIN_LOCATION_FILE\\\"\\n\\nupdate_nginx_acl \\\"$NGINX_MAIN_ACL_FILE\\\" \\\"$VHOST_MAIN_LOCATION_FILE\\\"\\n\\n# Change to the compose directory\\ncd \\\"$COMPOSE_DIR\\\" || handle_error \\\"Failed to change directory to $COMPOSE_DIR\\\"\\n\\n# Start Docker containers using docker-compose\\n> error.log\\nif ! sudo docker-compose up -d > error.log 2>&1; then\\n    ERROR_MSG=$(tail -n 10 error.log)  # Read the last 10 lines from error.log\\n    handle_error \\\"Docker-compose failed: $ERROR_MSG\\\"\\nfi\\n\\n# If everything is successful, update the status file and print success message\\necho \\\"active\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null\\necho \\\"success\\\"\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"f05ac0c4-61b6-4546-9a39-1ef03e360c14\",\n      \"name\": \"Mount Disk\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1200,\n        460\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/{{ $('API').item.json.body.domain }}\\\"\\nSTATUS_FILE=\\\"$COMPOSE_DIR/status.json\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/{{ $('API').item.json.body.domain }}\\\"\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Create necessary directories with permissions\\nsudo mkdir -p \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $MOUNT_DIR\\\"\\nsudo chmod 777 \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to set permissions on $MOUNT_DIR\\\"\\n\\nif df -h | grep -q \\\"$MOUNT_DIR\\\"; then\\n    handle_error \\\"The file $IMG_FILE is mounted to $MOUNT_DIR\\\"\\nfi\\n\\nif ! grep -q \\\"$IMG_FILE\\\" /etc/fstab; then\\n    echo \\\"$IMG_FILE $MOUNT_DIR ext4 loop 0 0\\\" | sudo tee -a /etc/fstab > /dev/null || handle_error \\\"Failed to add entry to /etc/fstab\\\"\\nfi\\n\\nsudo mount -a || handle_error \\\"Failed to mount entries from /etc/fstab\\\"\\n\\necho \\\"success\\\"\\n\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"803652a7-b75c-4e58-a935-7899ef98815b\",\n      \"name\": \"Unmount Disk\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1080,\n        560\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/{{ $('API').item.json.body.domain }}\\\"\\nSTATUS_FILE=\\\"$COMPOSE_DIR/status.json\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/{{ $('API').item.json.body.domain }}\\\"\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\nif ! df -h | grep -q \\\"$MOUNT_DIR\\\"; then\\n    handle_error \\\"The file $IMG_FILE is not mounted to $MOUNT_DIR\\\"\\nfi\\n\\n# Remove the mount entry from /etc/fstab if it exists\\nif grep -q \\\"$IMG_FILE\\\" /etc/fstab; then\\n    sudo sed -i \\\"\\\\|$(printf '%s\\\\n' \\\"$IMG_FILE\\\" | sed 's/[.[\\\\*^$]/\\\\\\\\&/g')|d\\\" /etc/fstab\\nfi\\n\\n# Unmount the image if it is mounted (using fstab)\\nif mount | grep -q \\\"$MOUNT_DIR\\\"; then\\n    sudo umount \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to unmount $MOUNT_DIR\\\"\\nfi\\n\\n# Remove the mount directory (if needed)\\nif ! sudo rm -rf \\\"$MOUNT_DIR\\\" > /dev/null 2>&1; then\\n    handle_error \\\"Failed to remove $MOUNT_DIR\\\"\\nfi\\n\\necho \\\"success\\\"\\n\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"72f8b5bd-0826-4c21-b201-8714969bb6a4\",\n      \"name\": \"Log\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1360,\n        -160\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nCONTAINER_NAME=\\\"{{ $('API').item.json.body.domain }}\\\"\\nLOGS_JSON=\\\"{}\\\"\\n\\n# Function to return error in JSON format\\nhandle_error() {\\n    echo \\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    exit 1\\n}\\n\\n# Check if the container exists\\nif ! sudo docker ps -a | grep -q \\\"$CONTAINER_NAME\\\" > /dev/null 2>&1; then\\n    handle_error \\\"Container $CONTAINER_NAME not found\\\"\\nfi\\n\\n# Get logs of the container\\nLOGS=$(sudo docker logs --tail 1000 \\\"$CONTAINER_NAME\\\" 2>&1)\\nif [ $? -ne 0 ]; then\\n    handle_error \\\"Failed to retrieve logs for $CONTAINER_NAME\\\"\\nfi\\n\\n# Escape double quotes in logs for valid JSON\\nLOGS_ESCAPED=$(echo \\\"$LOGS\\\" | sed 's/\\\"/\\\\\\\\\\\"/g' | sed ':a;N;$!ba;s/\\\\n/\\\\\\\\n/g')\\n\\n# Format logs as JSON\\nLOGS_JSON=\\\"{\\\\\\\"logs\\\\\\\": \\\\\\\"$LOGS_ESCAPED\\\\\\\"}\\\"\\n\\necho \\\"$LOGS_JSON\\\"\\nexit 0\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"c170dd11-18bf-41c9-a07c-2f0c9d0fdb01\",\n      \"name\": \"ChangePackage\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -660,\n        -300\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\n# Get values for variables from templates\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nCOMPOSE_FILE=\\\"$COMPOSE_DIR/docker-compose.yml\\\"\\nSTATUS_FILE=\\\"$COMPOSE_DIR/status\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\nVHOST_DIR=\\\"/opt/docker/nginx-proxy/nginx/vhost.d\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/$DOMAIN\\\"\\nDOCKER_COMPOSE_TEXT='{{ $('Deploy-docker-compose').item.json[\\\"docker-compose\\\"] }}'\\n\\nNGINX_MAIN_TEXT='{{ $('nginx').item.json['main'] }}'\\nNGINX_MAIN_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"\\nVHOST_MAIN_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"\\n\\nNGINX_MAIN_LOCATION_TEXT='{{ $('nginx').item.json['main_location'] }}'\\nNGINX_MAIN_LOCATION_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_location\\nVHOST_MAIN_LOCATION_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"_location\\n\\nDISK_SIZE=\\\"{{ $('API').item.json.body.disk }}\\\"\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    STATUS_JSON=\\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    echo \\\"$STATUS_JSON\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Check if the compose file exists before stopping the container\\nif [ -f \\\"$COMPOSE_FILE\\\" ]; then\\n    sudo docker-compose -f \\\"$COMPOSE_FILE\\\" down > /dev/null 2>&1 || handle_error \\\"Failed to stop containers\\\"\\nelse\\n    handle_error \\\"docker-compose.yml not found\\\"\\nfi\\n\\n# Unmount the image if it is currently mounted\\nif mount | grep -q \\\"$MOUNT_DIR\\\"; then\\n    sudo umount \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to unmount $MOUNT_DIR\\\"\\nfi\\n\\n# Create docker-compose.yml file\\necho \\\"$DOCKER_COMPOSE_TEXT\\\" | sudo tee \\\"$COMPOSE_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $COMPOSE_FILE\\\"\\n\\n# Create NGINX configuration files\\necho \\\"$NGINX_MAIN_TEXT\\\" | sudo tee \\\"$NGINX_MAIN_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_MAIN_FILE\\\"\\necho \\\"$NGINX_MAIN_LOCATION_TEXT\\\" | sudo tee \\\"$NGINX_MAIN_LOCATION_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_MAIN_LOCATION_FILE\\\"\\n\\n# Resize the disk image if it exists\\nif [ -f \\\"$IMG_FILE\\\" ]; then\\n    sudo truncate -s \\\"$DISK_SIZE\\\"G \\\"$IMG_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to resize $IMG_FILE (truncate)\\\"\\n    sudo e2fsck -fy \\\"$IMG_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Filesystem check failed on $IMG_FILE\\\"\\n    sudo resize2fs \\\"$IMG_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to resize filesystem on $IMG_FILE\\\"\\nelse\\n    handle_error \\\"Disk image $IMG_FILE does not exist\\\"\\nfi\\n\\n# Mount the disk only if it is not already mounted\\nif ! mount | grep -q \\\"$MOUNT_DIR\\\"; then\\n    sudo mount -a || handle_error \\\"Failed to mount entries from /etc/fstab\\\"\\nfi\\n\\n# Change to the compose directory\\ncd \\\"$COMPOSE_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to change directory to $COMPOSE_DIR\\\"\\n\\n# Copy NGINX configuration files instead of creating symbolic links\\nsudo cp -f \\\"$NGINX_MAIN_FILE\\\" \\\"$VHOST_MAIN_FILE\\\" || handle_error \\\"Failed to copy $NGINX_MAIN_FILE to $VHOST_MAIN_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_MAIN_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_MAIN_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_MAIN_LOCATION_FILE\\\" \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to copy $NGINX_MAIN_LOCATION_FILE to $VHOST_MAIN_LOCATION_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_MAIN_LOCATION_FILE\\\"\\n\\n# Start Docker containers using docker-compose\\nif ! sudo docker-compose up -d > /dev/null 2>error.log; then\\n    ERROR_MSG=$(tail -n 10 error.log)  # Read the last 10 lines from error.log\\n    handle_error \\\"Docker-compose failed: $ERROR_MSG\\\"\\nfi\\n\\n# Update status file\\necho \\\"active\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null\\n\\necho \\\"success\\\"\\n\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"da927c27-bc27-4f1f-bd06-90cb273a423d\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -2640,\n        -1260\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"width\": 639,\n        \"height\": 909,\n        \"content\": \"## 👋 Welcome to PUQ Docker n8n deploy!\\n## Template for n8n: API Backend for WHMCS/WISECP by PUQcloud\\n\\nv.1\\n\\nThis is an n8n template that creates an API backend for the WHMCS/WISECP module developed by PUQcloud.\\n\\n## Setup Instructions\\n\\n### 1. Configure API Webhook and SSH Access\\n- Create a Credential (Basic Auth) for the **Webhook API Block** in n8n.\\n- Create a Credential for **SSH access** to a server with Docker installed (**SSH Block**).\\n\\n### 2. Modify Template Parameters\\nIn the **Parameters** block of the template, update the following settings:\\n\\n- `server_domain` – must match the domain of the WHMCS/WISECP Docker server.\\n- `clients_dir` – directory where user data related to Docker and disks will be stored.\\n- `mount_dir` – default mount point for the container disk (recommended not to change).\\n\\n**Do not modify** the following technical parameters:\\n\\n- `screen_left`\\n- `screen_right`\\n\\n## Additional Resources\\n- Documentation: [https://doc.puq.info/books/docker-n8n-whmcs-module/page/setting-up-n8n-workflow](https://doc.puq.info/books/docker-n8n-whmcs-module/page/setting-up-n8n-workflow)\\n- WHMCS module: [https://puqcloud.com/whmcs-module-docker-n8n.php](https://puqcloud.com/whmcs-module-docker-n8n.php)\\n\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"7d1edb5c-9836-4dad-9116-bd14a5e7ab2c\",\n      \"name\": \"n8n\",\n      \"type\": \"n8n-nodes-base.switch\",\n      \"position\": [\n        -1680,\n        1380\n      ],\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"outputKey\": \"version\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"66ad264d-5393-410c-bfa3-011ab8eb234a\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"app_version\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"users\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"b48957a0-22c0-4ac0-82ef-abd9e7ab0207\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"app_users\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"change_password\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"7c862a6f-5df1-499c-b9c6-9b266e2bebec\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"change_password\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"typeVersion\": 3.2\n    },\n    {\n      \"id\": \"dcc07564-d2e1-46a5-a1ad-662aff29c681\",\n      \"name\": \"Version\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1180,\n        1360\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nCONTAINER_NAME=\\\"{{ $('API').item.json.body.domain }}\\\"\\nVERSION_JSON=\\\"{}\\\"\\n\\n# Function to return error in JSON format\\nhandle_error() {\\n    echo \\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    exit 1\\n}\\n\\n# Check if the container exists\\nif ! sudo docker ps -a | grep -q \\\"$CONTAINER_NAME\\\" > /dev/null 2>&1; then\\n    handle_error \\\"Container $CONTAINER_NAME not found\\\"\\nfi\\n\\n# Get the n8n version from the container\\nVERSION=$(sudo docker exec \\\"$CONTAINER_NAME\\\" n8n --version 2>&1)\\nif [ $? -ne 0 ]; then\\n    handle_error \\\"Failed to retrieve version for $CONTAINER_NAME\\\"\\nfi\\n\\n# Escape double quotes in version string for valid JSON\\nVERSION_ESCAPED=$(echo \\\"$VERSION\\\" | sed 's/\\\"/\\\\\\\\\\\"/g')\\n\\n# Format version as JSON\\nVERSION_JSON=\\\"{\\\\\\\"version\\\\\\\": \\\\\\\"$VERSION_ESCAPED\\\\\\\"}\\\"\\n\\necho \\\"$VERSION_JSON\\\"\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"bb6f2cc2-861a-4c6f-9206-b3077fb98d06\",\n      \"name\": \"Users\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1060,\n        1460\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nCONTAINER_NAME=\\\"{{ $('API').item.json.body.domain }}\\\"\\nDB_PATH=\\\"/mnt/$CONTAINER_NAME/database.sqlite\\\"\\nUSERS_JSON=\\\"{}\\\"\\n\\n# Function to return error in JSON format\\nhandle_error() {\\n    echo \\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    exit 1\\n}\\n\\nif ! test -f \\\"$DB_PATH\\\"; then\\n    handle_error \\\"Database file $DB_PATH is not found or not mounted on the host\\\"\\nfi\\n\\nUSERS=$(sqlite3 \\\"$DB_PATH\\\" -json \\\"SELECT * FROM user;\\\" 2>&1)\\nif [ $? -ne 0 ]; then\\n    handle_error \\\"Failed to retrieve users from database\\\"\\nfi\\n\\nUSERS_ESCAPED=$(echo \\\"$USERS\\\" | sed 's/\\\"/\\\\\\\\\\\"/g')\\n\\nUSERS_JSON=\\\"{\\\\\\\"users\\\\\\\": $USERS}\\\"\\n\\necho \\\"$USERS_JSON\\\"\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"e9a08c32-28e6-461f-a620-869dcc5cb1e5\",\n      \"name\": \"Change Password\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1160,\n        1560\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nCONTAINER_NAME=\\\"{{ $('API').item.json.body.domain }}\\\"\\nUSER_EMAIL=\\\"{{ $('API').item.json.body.user_email }}\\\"\\nNEW_PASSWORD=\\\"{{ $('API').item.json.body.password }}\\\"\\n\\nDB_PATH=\\\"/mnt/$CONTAINER_NAME/database.sqlite\\\"\\n\\n# Function to return error in JSON format\\nhandle_error() {\\n    echo \\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    exit 1\\n}\\n\\nif ! test -f \\\"$DB_PATH\\\"; then\\n    handle_error \\\"Database file $DB_PATH is not found or not mounted on the host\\\"\\nfi\\n\\n# Generate bcrypt hash of the new password\\nHASH=$(htpasswd -bnB \\\"\\\" \\\"$NEW_PASSWORD\\\" | cut -c2-)\\n\\nif [ -z \\\"$HASH\\\" ]; then\\n    handle_error \\\"Failed to generate password hash\\\"\\nfi\\n\\n# Update password in the database\\nsudo sqlite3 \\\"$DB_PATH\\\" \\\"UPDATE user SET password = '$HASH' WHERE email = '$USER_EMAIL';\\\"\\nif [ $? -ne 0 ]; then\\n    handle_error \\\"Failed to update password in database\\\"\\nfi\\n\\necho \\\"{\\\\\\\"status\\\\\\\": \\\\\\\"success\\\\\\\"}\\\"\\nexit 0\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"60fafb1e-0f67-4759-8625-b08409c5b462\",\n      \"name\": \"If1\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        -1940,\n        -1100\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"or\",\n          \"conditions\": [\n            {\n              \"id\": \"8602bd4c-9693-4d5f-9e7d-5ee62210baca\",\n              \"operator\": {\n                \"name\": \"filter.operator.equals\",\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n              \"rightValue\": \"create\"\n            },\n            {\n              \"id\": \"1c630b59-0e5a-441d-8aa5-70b31338d897\",\n              \"operator\": {\n                \"name\": \"filter.operator.equals\",\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n              \"rightValue\": \"change_package\"\n            },\n            {\n              \"id\": \"b3eb7052-a70f-438e-befd-8c5240df32c7\",\n              \"operator\": {\n                \"name\": \"filter.operator.equals\",\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n              \"rightValue\": \"unsuspend\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"913d96ae-bd47-4db2-b83b-68c49b51b33a\",\n      \"name\": \"nginx\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -1740,\n        -1240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"main\",\n              \"type\": \"string\",\n              \"value\": \"=ignore_invalid_headers off;\\nclient_max_body_size 0;\\nproxy_buffering off;\\nproxy_request_buffering off;\"\n            },\n            {\n              \"id\": \"6507763a-21d4-4ff0-84d2-5dc9d21b7430\",\n              \"name\": \"main_location\",\n              \"type\": \"string\",\n              \"value\": \"=# Custom header\\n\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"5172c533-170f-4f08-95af-de090347c832\",\n      \"name\": \"Deploy-docker-compose\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -1500,\n        -1240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"docker-compose\",\n              \"type\": \"string\",\n              \"value\": \"=version: \\\"3\\\"\\nservices:\\n  n8n-{{ $('API').item.json.body.domain }}:\\n    image: n8nio/n8n\\n    restart: unless-stopped\\n    container_name: {{ $('API').item.json.body.domain }}\\n    environment:\\n      - VIRTUAL_HOST={{ $('API').item.json.body.domain }}\\n      - LETSENCRYPT_HOST={{ $('API').item.json.body.domain }}\\n      - WEBHOOK_URL=https://{{ $('API').item.json.body.domain }}\\n    volumes:\\n      - {{ $('Parametrs').item.json.mount_dir }}/{{ $('API').item.json.body.domain }}:/home/node/.n8n\\n    networks:\\n      - nginx-proxy_web\\n    mem_limit: {{ $('API').item.json.body.ram }}G\\n    cpus: \\\"{{ $('API').item.json.body.cpu }}\\\"\\n\\nnetworks:\\n  nginx-proxy_web:\\n    external: true\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"a9a52bcd-b9b8-436e-a2cc-1f11747626aa\",\n      \"name\": \"GET ACL\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1200,\n        680\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\n# Get values for variables from templates\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\n\\nNGINX_MAIN_ACL_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_acl\\n\\n# Function to log an error and exit\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Read files if they exist, else assign empty array\\nif [[ -f \\\"$NGINX_MAIN_ACL_FILE\\\" ]]; then\\n    MAIN_IPS=$(cat \\\"$NGINX_MAIN_ACL_FILE\\\" | jq -R -s 'split(\\\"\\\\n\\\") | map(select(length > 0))')\\nelse\\n    MAIN_IPS=\\\"[]\\\"\\nfi\\n\\n# Output JSON\\necho \\\"{ \\\\\\\"main_ips\\\\\\\": $MAIN_IPS }\\\"\\n\\nexit 0\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"b6535cd0-2264-4ede-9da6-03c128d54682\",\n      \"name\": \"SET ACL\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1100,\n        800\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\n# Get values for variables from templates\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\nVHOST_DIR=\\\"/opt/docker/nginx-proxy/nginx/vhost.d\\\"\\n\\nNGINX_MAIN_ACL_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_acl\\nNGINX_MAIN_ACL_TEXT=\\\"{{ $('API').item.json.body.main_ips }}\\\"\\nVHOST_MAIN_LOCATION_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"_location\\nNGINX_MAIN_LOCATION_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_location\\n\\n# Function to log an error and exit\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\nupdate_nginx_acl() {\\n    ACL_FILE=$1\\n    LOCATION_FILE=$2\\n    \\n    if [ -s \\\"$ACL_FILE\\\" ]; then\\n        VALID_LINES=$(grep -vE '^\\\\s*$' \\\"$ACL_FILE\\\")\\n        if [ -n \\\"$VALID_LINES\\\" ]; then\\n            while IFS= read -r line; do\\n                echo \\\"allow $line;\\\" | sudo tee -a \\\"$LOCATION_FILE\\\" > /dev/null || handle_error \\\"Failed to update $LOCATION_FILE\\\"\\n            done <<< \\\"$VALID_LINES\\\"\\n            echo \\\"deny all;\\\" | sudo tee -a \\\"$LOCATION_FILE\\\" > /dev/null || handle_error \\\"Failed to update $LOCATION_FILE\\\"\\n        fi\\n    fi\\n}\\n\\n# Create or overwrite the file with the content from variables\\necho \\\"$NGINX_MAIN_ACL_TEXT\\\" | sudo tee \\\"$NGINX_MAIN_ACL_FILE\\\" > /dev/null\\n\\nsudo cp -f \\\"$NGINX_MAIN_LOCATION_FILE\\\" \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to copy $NGINX_MAIN_LOCATION_FILE to $VHOST_MAIN_LOCATION_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_MAIN_LOCATION_FILE\\\"\\n\\nupdate_nginx_acl \\\"$NGINX_MAIN_ACL_FILE\\\" \\\"$VHOST_MAIN_LOCATION_FILE\\\"\\n\\n# Reload Nginx with sudo\\nif sudo docker exec nginx-proxy nginx -s reload; then\\n    echo \\\"success\\\"\\nelse\\n    handle_error \\\"Failed to reload Nginx.\\\"\\nfi\\n\\nexit 0\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"5b2452e4-3c2a-42e3-8855-dedd6c8f8ec9\",\n      \"name\": \"GET NET\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1220,\n        900\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\n# Get values for variables from templates\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\nNET_IN_FILE=\\\"$COMPOSE_DIR/net_in\\\"\\nNET_OUT_FILE=\\\"$COMPOSE_DIR/net_out\\\"\\n\\n# Function to log an error and exit\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Get current network statistics from container\\nSTATS=$(sudo docker exec \\\"$DOMAIN\\\" cat /proc/net/dev | grep eth0) || handle_error \\\"Failed to get network stats\\\"\\nNET_IN_NEW=$(echo \\\"$STATS\\\" | awk '{print $2}')  # RX bytes (received)\\nNET_OUT_NEW=$(echo \\\"$STATS\\\" | awk '{print $10}') # TX bytes (transmitted)\\n\\n# Ensure directory exists\\nmkdir -p \\\"$COMPOSE_DIR\\\"\\n\\n# Read old values, create files if they don't exist\\nif [[ -f \\\"$NET_IN_FILE\\\" ]]; then\\n    NET_IN_OLD=$(sudo cat \\\"$NET_IN_FILE\\\")\\nelse\\n    NET_IN_OLD=0\\nfi\\n\\nif [[ -f \\\"$NET_OUT_FILE\\\" ]]; then\\n    NET_OUT_OLD=$(sudo cat \\\"$NET_OUT_FILE\\\")\\nelse\\n    NET_OUT_OLD=0\\nfi\\n\\n# Save new values\\necho \\\"$NET_IN_NEW\\\" | sudo tee \\\"$NET_IN_FILE\\\" > /dev/null\\necho \\\"$NET_OUT_NEW\\\" | sudo tee \\\"$NET_OUT_FILE\\\" > /dev/null\\n\\n# Output JSON\\necho \\\"{ \\\\\\\"net_in_new\\\\\\\": $NET_IN_NEW, \\\\\\\"net_out_new\\\\\\\": $NET_OUT_NEW, \\\\\\\"net_in_old\\\\\\\": $NET_IN_OLD, \\\\\\\"net_out_old\\\\\\\": $NET_OUT_OLD }\\\"\\n\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    }\n  ],\n  \"active\": true,\n  \"pinData\": {},\n  \"settings\": {\n    \"timezone\": \"America/Winnipeg\",\n    \"callerPolicy\": \"workflowsFromSameOwner\",\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"08850dfe-ce0d-46e4-8eb7-6d1a830c8971\",\n  \"connections\": {\n    \"If\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Container Stats\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Container Actions\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"n8n\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"If1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"422-Invalid server domain\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"API\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Parametrs\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        []\n      ]\n    },\n    \"If1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"nginx\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Service Actions\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Log\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"SSH\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Code1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Code1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"n8n\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Version\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Users\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Change Password\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Stat\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Stop\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Code1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"API answer\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Start\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Users\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"nginx\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Deploy-docker-compose\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Deploy\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"GET ACL\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"GET NET\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Inspect\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"SET ACL\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Suspend\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Version\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Parametrs\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"If\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Unsuspend\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Mount Disk\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Terminated\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Unmount Disk\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"ChangePackage\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Change Password\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Container Stats\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Inspect\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Stat\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Log\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Service Actions\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Test Connection1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Deploy\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Suspend\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Unsuspend\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Terminated\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"ChangePackage\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Test Connection1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Container Actions\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Start\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Stop\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Mount Disk\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Unmount Disk\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"GET ACL\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"SET ACL\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"GET NET\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Deploy-docker-compose\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Service Actions\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.if",
      "n8n-nodes-base.set",
      "n8n-nodes-base.webhook",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.code",
      "n8n-nodes-base.ssh",
      "n8n-nodes-base.switch",
      "n8n-nodes-base.switch",
      "n8n-nodes-base.switch",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.switch",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.if",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set"
    ],
    "trigger": null
  }
}