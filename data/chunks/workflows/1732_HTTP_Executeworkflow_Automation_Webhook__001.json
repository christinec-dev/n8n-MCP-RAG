{
  "source": "1732_HTTP_Executeworkflow_Automation_Webhook.json",
  "index": 1,
  "content": "{\n  \"id\": \"G8jRDBvwsMkkMiLN\",\n  \"meta\": {\n    \"instanceId\": \"205b3bc06c96f2dc835b4f00e1cbf9a937a74eeb3b47c99d0c30b0586dbf85aa\"\n  },\n  \"name\": \"[3/3] Anomaly detection tool (crops dataset)\",\n  \"tags\": [\n    {\n      \"id\": \"spMntyrlE9ydvWFA\",\n      \"name\": \"anomaly-detection\",\n      \"createdAt\": \"2024-12-08T22:05:15.945Z\",\n      \"updatedAt\": \"2024-12-09T12:50:19.287Z\"\n    }\n  ],\n  \"nodes\": [\n    {\n      \"id\": \"e01bafec-eb24-44c7-b3c4-a60f91666350\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1200,\n        180\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"width\": 400,\n        \"height\": 740,\n        \"content\": \"We are working here with crops dataset: \\nExisting (so not anomalies) crops images in dataset are:\\n- 'pearl_millet(bajra)',\\n- 'tobacco-plant',\\n- 'cherry',\\n- 'cotton',\\n- 'banana',\\n- 'cucumber',\\n- 'maize',\\n- 'wheat',\\n- 'clove',\\n- 'jowar',\\n- 'olive-tree',\\n- 'soyabean',\\n- 'coffee-plant',\\n- 'rice',\\n- 'lemon',\\n- 'mustard-oil',\\n- 'vigna-radiati(mung)',\\n- 'coconut',\\n- 'gram',\\n- 'pineapple',\\n- 'sugarcane',\\n- 'sunflower',\\n- 'chilli',\\n- 'fox_nut(makhana)',\\n- 'jute',\\n- 'papaya',\\n- 'tea',\\n- 'cardamom',\\n- 'almond'\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b9943781-de1f-4129-9b81-ed836e9ebb11\",\n      \"name\": \"Embed image\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        680,\n        60\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.voyageai.com/v1/multimodalembeddings\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={{\\n{\\n \\\"inputs\\\": [\\n {\\n \\\"content\\\": [\\n {\\n \\\"type\\\": \\\"image_url\\\",\\n \\\"image_url\\\": $('Image URL hardcode').first().json.imageURL\\n }\\n ]\\n }\\n ],\\n \\\"model\\\": \\\"voyage-multimodal-3\\\",\\n \\\"input_type\\\": \\\"document\\\"\\n}\\n}}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\"\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"Vb0RNVDnIHmgnZOP\",\n          \"name\": \"Voyage API\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"47b72bc2-4817-48c6-b517-c1328e402468\",\n      \"name\": \"Get similarity of medoids\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        940,\n        60\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Variables for medoids').first().json.qdrantCloudURL }}/collections/{{ $('Variables for medoids').first().json.collectionName }}/points/query\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={{\\n{\\n \\\"query\\\": $json.data[0].embedding,\\n \\\"using\\\": \\\"voyage\\\",\\n \\\"limit\\\": $('Info About Crop Labeled Clusters').first().json.cropsNumber,\\n \\\"with_payload\\\": true,\\n \\\"filter\\\": {\\n \\\"must\\\": [\\n { \\n \\\"key\\\": $('Variables for medoids').first().json.clusterCenterType,\\n \\\"match\\\": {\\n \\\"value\\\": true\\n }\\n }\\n ]\\n }\\n}\\n}}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"qdrantApi\"\n      },\n      \"credentials\": {\n        \"qdrantApi\": {\n          \"id\": \"it3j3hP9FICqhgX6\",\n          \"name\": \"QdrantApi account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"42d7eb27-ec38-4406-b5c4-27eb45358e93\",\n      \"name\": \"Compare scores\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1140,\n        60\n      ],\n      \"parameters\": {\n        \"language\": \"python\",\n        \"pythonCode\": \"points = _input.first()['json']['result']['points']\\nthreshold_type = _('Variables for medoids').first()['json']['clusterThresholdCenterType']\\n\\nmax_score = -1\\ncrop_with_max_score = None\\nundefined = True\\n\\nfor center in points:\\n if center['score'] >= center['payload'][threshold_type]:\\n undefined = False\\n if center['score'] > max_score:\\n max_score = center['score']\\n crop_with_max_score = center['payload']['crop_name']\\n\\nif undefined:\\n result_message = \\\"ALERT, we might have a new undefined crop!\\\"\\nelse:\\n result_message = f\\\"Looks similar to {crop_with_max_score}\\\"\\n\\nreturn [{\\n \\\"json\\\": {\\n \\\"result\\\": result_message\\n }\\n}]\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"23aa604a-ff0b-4948-bcd5-af39300198c0\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1200,\n        -220\n      ],\n      \"parameters\": {\n        \"width\": 400,\n        \"height\": 380,\n        \"content\": \"## Crop Anomaly Detection Tool\\n### This is the tool that can be used directly for anomalous crops detection. \\nIt takes as input (any) **image URL** and returns a **text message** telling if whatever this image depicts is anomalous to the crop dataset stored in Qdrant. \\n\\n* An Image URL is received via the Execute Workflow Trigger which is used to generate embedding vectors via the Voyage.ai Embeddings API.\\n* The returned vectors are used to query the Qdrant collection to determine if the given crop is known by comparing it to **threshold scores** of each image class (crop type).\\n* If the image scores lower than all thresholds, then the image is considered an anomaly for the dataset.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"3a79eca2-44f9-4aee-8a0d-9c7ca2f9149d\",\n      \"name\": \"Variables for medoids\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -200,\n        60\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"dbbc1e7b-c63e-4ff1-9524-8ef3e9f6cd48\",\n              \"name\": \"clusterCenterType\",\n              \"type\": \"string\",\n              \"value\": \"is_medoid\"\n            },\n            {\n              \"id\": \"a994ce37-2530-4030-acfb-ec777a7ddb05\",\n              \"name\": \"qdrantCloudURL\",\n              \"type\": \"string\",\n              \"value\": \"https://152bc6e2-832a-415c-a1aa-fb529f8baf8d.eu-central-1-0.aws.cloud.qdrant.io\"\n            },\n            {\n              \"id\": \"12f0a9e6-686d-416e-a61b-72d034ec21ba\",\n              \"name\": \"collectionName\",\n              \"type\": \"string\",\n              \"value\": \"=agricultural-crops\"\n            },\n            {\n              \"id\": \"4c88a617-d44f-4776-b457-8a1dffb1d03c\",\n              \"name\": \"clusterThresholdCenterType\",\n              \"type\": \"string\",\n              \"value\": \"is_medoid_cluster_threshold\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"13b25434-bd66-4293-93f1-26c67b9ec7dd\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -340,\n        260\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"width\": 360,\n        \"height\": 200,\n        \"content\": \"**clusterCenterType** - either\\n* \\\"is_text_anchor_medoid\\\" or\\n* \\\"is_medoid\\\"\\n\\n\\n**clusterThresholdCenterType** - either\\n* \\\"is_text_anchor_medoid_cluster_threshold\\\" or\\n* \\\"is_medoid_cluster_threshold\\\"\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"869b0962-6cae-487d-8230-539a0cc4c14c\",\n      \"name\": \"Info About Crop Labeled Clusters\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        440,\n        60\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"5327b254-b703-4a34-a398-f82edb1d6d6b\",\n              \"name\": \"=cropsNumber\",\n              \"type\": \"number\",\n              \"value\": \"={{ $json.result.hits.length }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"5d3956f8-f43b-439e-b176-a594a21d8011\",\n      \"name\": \"Total Points in Collection\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        40,\n        60\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $json.qdrantCloudURL }}/collections/{{ $json.collectionName }}/points/count\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n \\\"exact\\\": true\\n}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"qdrantApi\"\n      },\n      \"credentials\": {\n        \"qdrantApi\": {\n          \"id\": \"it3j3hP9FICqhgX6\",\n          \"name\": \"QdrantApi account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"14ba3db9-3965-4b20-b333-145616d45c3a\",\n      \"name\": \"Each Crop Counts\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        240,\n        60\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Variables for medoids').first().json.qdrantCloudURL }}/collections/{{ $('Variables for medoids').first().json.collectionName }}/facet\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={{\\n{\\n \\\"key\\\": \\\"crop_name\\\",\\n \\\"limit\\\": $json.result.count,\\n \\\"exact\\\": true\\n}\\n}}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"qdrantApi\"\n      },\n      \"credentials\": {\n        \"qdrantApi\": {\n          \"id\": \"it3j3hP9FICqhgX6\",\n          \"name\": \"QdrantApi account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"e37c6758-0556-4a56-ab14-d4df663cb53a\",\n      \"name\": \"Image URL hardcode\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -480,\n        60\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"46ceba40-fb25-450c-8550-d43d8b8aa94c\",\n              \"name\": \"imageURL\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.query.imageURL }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"b24ad1a7-0cf8-4acc-9c18-6fe9d58b10f2\",\n      \"name\": \"Execute Workflow Trigger\",\n      \"type\": \"n8n-nodes-base.executeWorkflowTrigger\",\n      \"position\": [\n        -720,\n        60\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"50424f2b-6831-41bf-8de4-81f69d901ce1\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -240,\n        -80\n      ],\n      \"parameters\": {\n        \"width\": 180,\n        \"height\": 120,\n        \"content\": \"Variables to access Qdrant's collection we uploaded & prepared for anomaly detection in 2 previous pipelines\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2e8ed3ca-1bba-4214-b34b-376a237842ff\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        40,\n        -120\n      ],\n      \"parameters\": {\n        \"width\": 560,\n        \"height\": 140,\n        \"content\": \"These three nodes are needed just to figure out how many different classes (crops) we have in our Qdrant collection: **cropsNumber** (needed in *\\\"Get similarity of medoids\\\"* node. \\n[Note] *\\\"Total Points in Collection\\\"* -> *\\\"Each Crop Counts\\\"* were used&explained already in *\\\"[2/4] Set up medoids (2 types) for anomaly detection (crops dataset)\\\"* pipeline.\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e2fa5763-6e97-4ff5-8919-1cb85a3c6968\",\n      \"name\": \"Sticky Note6\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        620,\n        240\n      ],\n      \"parameters\": {\n        \"height\": 120,\n        \"content\": \"Here, we're embedding the image passed to this workflow tool with the Voyage embedding model to compare the image to all crop images in the database.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"cdb6b8d3-f7f4-4d66-850f-ce16c8ed98b9\",\n      \"name\": \"Sticky Note7\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        920,\n        220\n      ],\n      \"parameters\": {\n        \"width\": 400,\n        \"height\": 180,\n        \"content\": \"Checking how similar the image is to all the centres of clusters (crops).\\nIf it's more similar to the thresholds we set up and stored in centres in the previous workflow, the image probably belongs to this crop class; otherwise, it's anomalous to the class. \\nIf image is anomalous to all the classes, it's an anomaly.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"03b4699f-ba43-4f5f-ad69-6f81deea2641\",\n      \"name\": \"Sticky Note22\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -620,\n        580\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 540,\n        \"height\": 300,\n        \"content\": \"### For anomaly detection\\n1. The first pipeline is uploading (crops) dataset to Qdrant's collection.\\n2. The second pipeline sets up cluster (class) centres in this Qdrant collection & cluster (class) threshold scores.\\n3. **This is the anomaly detection tool, which takes any image as input and uses all preparatory work done with Qdrant (crops) collection.**\\n\\n### To recreate it\\nYou'll have to upload [crops](https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification) dataset from Kaggle to your own Google Storage bucket, and re-create APIs/connections to [Qdrant Cloud](https://qdrant.tech/documentation/quickstart-cloud/) (you can use **Free Tier** cluster), Voyage AI API & Google Cloud Storage\\n\\n**In general, pipelines are adaptable to any dataset of images**\\n\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {\n    \"Execute Workflow Trigger\": [\n      {\n        \"json\": {\n          \"query\": {\n            \"imageURL\": \"https://storage.googleapis.com/n8n-qdrant-demo/agricultural-crops%2Fcotton%2Fimage%20(36).jpg\"\n          }\n        }\n      }\n    ]\n  },\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"f67b764b-9e1a-4db0-b9f2-490077a62f74\",\n  \"connections\": {\n    \"Embed image\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get similarity of medoids\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Each Crop Counts\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Info About Crop Labeled Clusters\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Image URL hardcode\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Variables for medoids\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Variables for medoids\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Total Points in Collection\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Execute Workflow Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Image URL hardcode\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get similarity of medoids\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Compare scores\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Total Points in Collection\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Each Crop Counts\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Info About Crop Labeled Clusters\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Embed image\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.code",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.set",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.set",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.set",
      "n8n-nodes-base.executeWorkflowTrigger",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote"
    ],
    "trigger": "execute workflow trigger"
  }
}