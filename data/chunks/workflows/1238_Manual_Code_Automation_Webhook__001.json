{
  "source": "1238_Manual_Code_Automation_Webhook.json",
  "index": 1,
  "content": "{\n  \"id\": \"9r4T5kELOXAV8L1F\",\n  \"meta\": {\n    \"instanceId\": \"1e003a7ea4715b6b35e9947791386a7d07edf3b5bf8d4c9b7ee4fdcbec0447d7\"\n  },\n  \"name\": \"3D Figurine Orthographic Views with Midjourney and GPT-4o-Image API\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"30ff7c89-7fb6-4daf-b7f2-d178ee702243\",\n      \"name\": \"When clicking ‘Test workflow’\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        720,\n        220\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"26cb9d6e-6a73-4a27-805d-8577c84101fa\",\n      \"name\": \"Midjourney Generator\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        940,\n        220\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.piapi.ai/api/v1/task\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"{\\n  \\\"model\\\": \\\"midjourney\\\",\\n  \\\"task_type\\\": \\\"imagine\\\",\\n  \\\"input\\\": {\\n    \\\"prompt\\\": \\\"IP design, pop mart style, cartoon-style characters, a little girl with a red satche on her back, a pair of big eyes, long eyelashes, with pigtails, wearing a red beret, red shoes, chubby body, wearing a red and white striped dress, clean white background, crystal-clear material::5, 3D rendering, 3D modeling --ar 3:4 --niji 6\\\",\\n    \\\"aspect_ratio\\\": \\\"3:2\\\",\\n    \\\"process_mode\\\": \\\"turbo\\\",\\n    \\\"skip_prompt_check\\\": false\\n  }\\n}\",\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"x-api-key\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"4220555c-f4f4-43ab-8d03-1ae4b959bdd1\",\n      \"name\": \"Get Midjourney URL\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        760,\n        460\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api.piapi.ai/api/v1/task/{{ $json.data.task_id }}\",\n        \"options\": {},\n        \"sendHeaders\": true,\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"x-api-key\",\n              \"value\": \"72858adea87ad16865d5b0a24c3d9b9f58a6e7b1a8a8a8a0d6b81a9f3a9812f3\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"e81311ee-4522-4fb3-929f-1c062427c859\",\n      \"name\": \"Verify URL Acquisition\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        960,\n        460\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"a0f8758e-d6fd-44f8-bd79-bc3c4dceddcf\",\n              \"operator\": {\n                \"name\": \"filter.operator.equals\",\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $json.data.status }}\",\n              \"rightValue\": \"completed\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"9519899e-c246-474e-8fd6-7dd16cf27a5b\",\n      \"name\": \"Wait for Generation\",\n      \"type\": \"n8n-nodes-base.wait\",\n      \"position\": [\n        980,\n        700\n      ],\n      \"webhookId\": \"f3bcf634-8c4b-4bf9-a7f2-d4ee369f5349\",\n      \"parameters\": {},\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"693348ab-12ab-4896-9fda-a9141263ccbf\",\n      \"name\": \"Get Random Image URL\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1240,\n        520\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// JavaScript Code for Function Node\\nreturn {\\n  random_temp_url: $input.all()[0].json.data.output.temporary_image_urls[\\n    Math.floor(Math.random() * $input.all()[0].json.data.output.temporary_image_urls.length)\\n  ]\\n};\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"18f030a6-7333-45df-af1d-f8c5492084c6\",\n      \"name\": \"Generation 3-view Image with GPT-4o-Image\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1440,\n        520\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.piapi.ai/v1/chat/completions\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n    \\\"model\\\": \\\"gpt-4o-image-preview\\\",\\n    \\\"messages\\\": [\\n        {\\n            \\\"role\\\": \\\"user\\\",\\n            \\\"content\\\": [\\n                {\\n                    \\\"type\\\": \\\"image_url\\\",\\n                    \\\"image_url\\\": {\\n                        \\\"url\\\": \\\"{{ $json.random_temp_url }}\\\"\\n                    }\\n                },\\n                {\\n                    \\\"type\\\": \\\"text\\\",\\n                    \\\"text\\\": \\\"Convert this image into a 3D figurine image, with front view, side view, and back view in one page. Generate a turnaround sheet showing the figurine’s front with full details, profile, and back views in left-to-right sequence. ar=10:3\\\"\\n                }\\n            ]\\n        }\\n    ],\\n    \\\"stream\\\": true\\n}\",\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Authorization\",\n              \"value\": \"Bearer \"\n            }\n          ]\n        }\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"fsJeCNd9BkJ1CIrt\",\n          \"name\": \"Header Auth account 2\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"4d758715-79d5-4c2e-94d2-d1cfe1bdda6d\",\n      \"name\": \"Check if the URL is obtained\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        1840,\n        520\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"08a2ebe6-dc95-4b8a-ada1-1173645cc3f4\",\n              \"operator\": {\n                \"name\": \"filter.operator.equals\",\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $json.finish_reason }}\",\n              \"rightValue\": \"not_found\"\n            },\n            {\n              \"id\": \"ed245d42-677f-4465-a3f1-d23c6e609f5e\",\n              \"operator\": {\n                \"name\": \"filter.operator.equals\",\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"690c002c-8641-4bb9-8c55-8b5cd6f01f2c\",\n      \"name\": \"Get Final Output\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        2080,\n        540\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Method 2: n8n workflow compatible version\\nreturn $input.all().map(item => {\\n  return {\\n    image_url: item.json.image_url\\n  };\\n});\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"db38b578-1078-4a89-b429-55ba337a21fc\",\n      \"name\": \"Get Image\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1660,\n        520\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const chunks = $input.first().json.data.split('\\\\n\\\\n');\\n\\nlet imageUrl = null;\\n\\n// 反向遍历 chunks (从最新数据开始检查)\\nfor (let i = chunks.length - 1; i >= 0; i--) {\\n    const chunk = chunks[i];\\n    \\n    if (!chunk.startsWith('data: ')) continue;\\n    \\n    try {\\n        const jsonStr = chunk.substring(6); // 去掉 \\\"data: \\\" 前缀\\n        if (jsonStr.trim() === '[DONE]') continue;\\n        \\n        const data = JSON.parse(jsonStr);\\n        \\n        // 检查是否包含图片标记（Markdown 图片语法）\\n        if (data.choices && data.choices[0].delta.content) {\\n            const content = data.choices[0].delta.content;\\n            const urlMatch = content.match(/!\\\\[.*?\\\\]\\\\((https?:\\\\/\\\\/[^\\\\s]+)\\\\)/);\\n            \\n            if (urlMatch && urlMatch[1]) {\\n                imageUrl = urlMatch[1];\\n                break;\\n            }\\n        }\\n    } catch (e) {\\n        continue;\\n    }\\n}\\n\\nreturn {\\n    image_url: imageUrl,\\n    finish_reason: imageUrl ? \\\"success\\\" : \\\"not_found\\\"\\n};\"\n      },\n      \"typeVersion\": 2\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"0e663ca1-c9b2-4fb2-a8bb-14ed8bb63d11\",\n  \"connections\": {\n    \"Get Image\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check if the URL is obtained\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Midjourney URL\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Verify URL Acquisition\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Wait for Generation\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Midjourney URL\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Random Image URL\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Generation 3-view Image with GPT-4o-Image\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Midjourney Generator\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Midjourney URL\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Verify URL Acquisition\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Random Image URL\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Wait for Generation\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check if the URL is obtained\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Generation 3-view Image with GPT-4o-Image\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Get Final Output\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When clicking ‘Test workflow’\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Midjourney Generator\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Generation 3-view Image with GPT-4o-Image\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Image\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.manualTrigger",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.if",
      "n8n-nodes-base.wait",
      "n8n-nodes-base.code",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.if",
      "n8n-nodes-base.code",
      "n8n-nodes-base.code"
    ],
    "trigger": null
  }
}