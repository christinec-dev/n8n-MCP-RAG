{
  "source": "0826_Wait_Splitout_Automation_Webhook.json",
  "index": 1,
  "content": "{\n  \"meta\": {\n    \"instanceId\": \"97d44c78f314fab340d7a5edaf7e2c274a7fbb8a7cd138f53cc742341e706fe7\"\n  },\n  \"nodes\": [\n    {\n      \"id\": \"fa4f8fd6-3272-4a93-8547-32d13873bbc1\",\n      \"name\": \"Submit batch\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        180,\n        40\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.anthropic.com/v1/messages/batches\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={ \\\"requests\\\": {{ JSON.stringify($json.requests) }} }\",\n        \"sendBody\": true,\n        \"sendQuery\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"queryParameters\": {\n          \"parameters\": [\n            {}\n          ]\n        },\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"anthropic-version\",\n              \"value\": \"={{ $json[\\\"anthropic-version\\\"] }}\"\n            }\n          ]\n        },\n        \"nodeCredentialType\": \"anthropicApi\"\n      },\n      \"credentials\": {\n        \"anthropicApi\": {\n          \"id\": \"ub0zN7IP2V83OeTf\",\n          \"name\": \"Anthropic account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"2916dc85-829d-491a-a7a8-de79d5356a53\",\n      \"name\": \"Check batch status\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        840,\n        115\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api.anthropic.com/v1/messages/batches/{{ $json.id }}\",\n        \"options\": {},\n        \"sendHeaders\": true,\n        \"authentication\": \"predefinedCredentialType\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"anthropic-version\",\n              \"value\": \"={{ $('When Executed by Another Workflow').item.json[\\\"anthropic-version\\\"] }}\"\n            }\n          ]\n        },\n        \"nodeCredentialType\": \"anthropicApi\"\n      },\n      \"credentials\": {\n        \"anthropicApi\": {\n          \"id\": \"ub0zN7IP2V83OeTf\",\n          \"name\": \"Anthropic account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"1552ec92-2f18-42f6-b67f-b6f131012b3c\",\n      \"name\": \"When Executed by Another Workflow\",\n      \"type\": \"n8n-nodes-base.executeWorkflowTrigger\",\n      \"position\": [\n        -40,\n        40\n      ],\n      \"parameters\": {\n        \"workflowInputs\": {\n          \"values\": [\n            {\n              \"name\": \"anthropic-version\"\n            },\n            {\n              \"name\": \"requests\",\n              \"type\": \"array\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"4bd40f02-caf1-419d-8261-a149cd51a534\",\n      \"name\": \"Get results\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        620,\n        -160\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $json.results_url }}\",\n        \"options\": {},\n        \"sendHeaders\": true,\n        \"authentication\": \"predefinedCredentialType\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"anthropic-version\",\n              \"value\": \"={{ $('When Executed by Another Workflow').item.json[\\\"anthropic-version\\\"] }}\"\n            }\n          ]\n        },\n        \"nodeCredentialType\": \"anthropicApi\"\n      },\n      \"credentials\": {\n        \"anthropicApi\": {\n          \"id\": \"ub0zN7IP2V83OeTf\",\n          \"name\": \"Anthropic account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"5df366af-a54d-4594-a1ab-7a9df968101e\",\n      \"name\": \"Parse response\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"notes\": \"JSONL separated by newlines\",\n      \"position\": [\n        840,\n        -160\n      ],\n      \"parameters\": {\n        \"jsCode\": \"for (const item of $input.all()) {\\n  if (item.json && item.json.data) {\\n    // Split the string into individual JSON objects\\n    const jsonStrings = item.json.data.split('\\\\n');\\n\\n    // Parse each JSON string and store them in an array\\n    const parsedData = jsonStrings.filter(str => str.trim() !== '').map(str => JSON.parse(str));\\n\\n    // Replace the original json with the parsed array.\\n    item.json.parsed = parsedData;\\n  }\\n}\\n\\nreturn $input.all();\"\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"68aa4ee2-e925-4e30-a7ab-317d8df4d9bc\",\n      \"name\": \"If ended processing\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        400,\n        40\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"9494c5a3-d093-49c5-837f-99cd700a2f13\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $json.processing_status }}\",\n              \"rightValue\": \"ended\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"2b974e3b-495b-48af-8080-c7913d7a2ba8\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -200,\n        -720\n      ],\n      \"parameters\": {\n        \"width\": 1060,\n        \"height\": 520,\n        \"content\": \"### This workflow automates sending batched prompts to Claude using the Anthropic API. It submits multiple prompts at once and retrieves the results.\\n\\n#### How to use\\n\\nCall this workflow with array of `requests`\\n\\n```json\\n{\\n    \\\"anthropic-version\\\": \\\"2023-06-01\\\",\\n    \\\"requests\\\": [\\n        {\\n            \\\"custom_id\\\": \\\"first-prompt-in-my-batch\\\",\\n            \\\"params\\\": {\\n                \\\"max_tokens\\\": 100,\\n                \\\"messages\\\": [\\n                    {\\n                        \\\"content\\\": \\\"Hey Claude, tell me a short fun fact about video games!\\\",\\n                        \\\"role\\\": \\\"user\\\"\\n                    }\\n                ],\\n                \\\"model\\\": \\\"claude-3-5-haiku-20241022\\\"\\n            }\\n        }\\n    ]\\n}\\n```\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"928a30b5-5d90-4648-a82e-e4f1a01e47a5\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1200,\n        -720\n      ],\n      \"parameters\": {\n        \"width\": 980,\n        \"height\": 600,\n        \"content\": \"#### Results\\n\\nThis workflow returns an array of results with custom_ids.\\n\\n```json\\n[\\n    {\\n        \\\"custom_id\\\": \\\"first-prompt-in-my-batch\\\",\\n        \\\"result\\\": {\\n            \\\"message\\\": {\\n                \\\"content\\\": [\\n                    {\\n                        \\\"text\\\": \\\"Did you know that the classic video game Tetris was...\\\",\\n                        \\\"type\\\": \\\"text\\\"\\n                    }\\n                ],\\n                \\\"id\\\": \\\"msg_01AiLiVZT18XnoBD4r2w9x2t\\\",\\n                \\\"model\\\": \\\"claude-3-5-haiku-20241022\\\",\\n                \\\"role\\\": \\\"assistant\\\",\\n                \\\"stop_reason\\\": \\\"end_turn\\\",\\n                \\\"stop_sequence\\\": null,\\n                \\\"type\\\": \\\"message\\\",\\n                \\\"usage\\\": {\\n                    \\\"cache_creation_input_tokens\\\": 0,\\n                    \\\"cache_read_input_tokens\\\": 0,\\n                    \\\"input_tokens\\\": 45,\\n                    \\\"output_tokens\\\": 83\\n                }\\n            },\\n            \\\"type\\\": \\\"succeeded\\\"\\n        }\\n    }\\n]\\n```\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"5dcb554e-32df-4883-b5a1-b40305756201\",\n      \"name\": \"Batch Status Poll Interval\",\n      \"type\": \"n8n-nodes-base.wait\",\n      \"position\": [\n        620,\n        40\n      ],\n      \"webhookId\": \"7efafe72-063a-45c6-8775-fcec14e1d263\",\n      \"parameters\": {\n        \"amount\": 10\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"c25cfde5-ab83-4e5a-a66f-8cc9f23a01f6\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -160,\n        325\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 340,\n        \"height\": 620,\n        \"content\": \"# Usage example\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"6062ca7c-aa08-4805-9c96-65e5be8a38fd\",\n      \"name\": \"Run example\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        -40,\n        625\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"9878729a-123d-4460-a582-691ca8cedf98\",\n      \"name\": \"One query example\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        634,\n        775\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"1ea47ba2-64be-4d69-b3db-3447cde71645\",\n              \"name\": \"query\",\n              \"type\": \"string\",\n              \"value\": \"Hey Claude, tell me a short fun fact about bees!\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"df06c209-8b6a-4b6d-8045-230ebdfcfbad\",\n      \"name\": \"Delete original properties\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1528,\n        775\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"d238d62b-2e91-4242-b509-8cfc698d2252\",\n              \"name\": \"custom_id\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.custom_id }}\"\n            },\n            {\n              \"id\": \"21e07c09-92e3-41e7-8335-64653722e7e9\",\n              \"name\": \"params\",\n              \"type\": \"object\",\n              \"value\": \"={{ $json.params }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"f66d6a89-ee33-4494-9476-46f408976b29\",\n      \"name\": \"Construct 'requests' array\",\n      \"type\": \"n8n-nodes-base.aggregate\",\n      \"position\": [\n        1968,\n        625\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"aggregate\": \"aggregateAllItemData\",\n        \"destinationFieldName\": \"requests\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0f9eb605-d629-4cb7-b9cb-39702d201567\",\n      \"name\": \"Set desired 'anthropic-version'\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"notes\": \"2023-06-01\",\n      \"position\": [\n        2188,\n        625\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"9f9e94a0-304b-487a-8762-d74421ef4cc0\",\n              \"name\": \"anthropic-version\",\n              \"type\": \"string\",\n              \"value\": \"2023-06-01\"\n            }\n          ]\n        },\n        \"includeOtherFields\": true\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"f71f261c-f4ad-4c9f-bd72-42ab386a65e1\",\n      \"name\": \"Execute Workflow 'Process Multiple Prompts in Parallel with Anthropic Claude Batch API'\",\n      \"type\": \"n8n-nodes-base.executeWorkflow\",\n      \"notes\": \"See above\",\n      \"position\": [\n        2408,\n        625\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"waitForSubWorkflow\": true\n        },\n        \"workflowId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"xQU4byMGhgFxnTIH\",\n          \"cachedResultName\": \"Process Multiple Prompts in Parallel with Anthropic Claude Batch API\"\n        },\n        \"workflowInputs\": {\n          \"value\": {\n            \"requests\": \"={{ $json.requests }}\",\n            \"anthropic-version\": \"={{ $json['anthropic-version'] }}\"\n          },\n          \"schema\": [\n            {\n              \"id\": \"anthropic-version\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"anthropic-version\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"requests\",\n              \"type\": \"array\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"requests\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            }\n          ],\n          \"mappingMode\": \"defineBelow\",\n          \"matchingColumns\": [\n            \"requests\"\n          ],\n          \"attemptToConvertTypes\": true,\n          \"convertFieldsToString\": true\n        }\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"bd27c1a6-572c-420d-84ab-4d8b7d14311b\",\n      \"name\": \"Build batch 'request' object for single query\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1308,\n        775\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Loop over input items and modify them to match the response example, then return input.all()\\nfor (const item of $input.all()) {\\n  item.json.params = {\\n    max_tokens: item.json.max_tokens,\\n    messages: [\\n      {\\n        content: item.json.query,\\n        role: \\\"user\\\"\\n      }\\n    ],\\n    model: item.json.model\\n  };\\n}\\n\\nreturn $input.all();\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"fa342231-ea94-43ab-8808-18c8d04fdaf8\",\n      \"name\": \"Simple Memory Store\",\n      \"type\": \"@n8n/n8n-nodes-langchain.memoryBufferWindow\",\n      \"position\": [\n        644,\n        595\n      ],\n      \"parameters\": {\n        \"sessionKey\": \"\\\"Process Multiple Prompts in Parallel with Anthropic Claude Batch API example\\\"\",\n        \"sessionIdType\": \"customKey\"\n      },\n      \"typeVersion\": 1.3\n    },\n    {\n      \"id\": \"67047fe6-8658-45ba-be61-52cf6115f4e4\",\n      \"name\": \"Fill Chat Memory with example data\",\n      \"type\": \"@n8n/n8n-nodes-langchain.memoryManager\",\n      \"position\": [\n        556,\n        375\n      ],\n      \"parameters\": {\n        \"mode\": \"insert\",\n        \"messages\": {\n          \"messageValues\": [\n            {\n              \"message\": \"You are a helpful AI assistant\"\n            },\n            {\n              \"type\": \"user\",\n              \"message\": \"Hey Claude, tell me a short fun fact about video games!\"\n            },\n            {\n              \"type\": \"ai\",\n              \"message\": \"short fun fact about video games!\"\n            },\n            {\n              \"type\": \"user\",\n              \"message\": \"No, an actual fun fact\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"dbb295b8-01fd-445f-ab66-948442b6c71d\",\n      \"name\": \"Build batch 'request' object from Chat Memory and execution data\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1528,\n        475\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const output = [];\\n\\nfor (const item of $input.all()) {\\n  const inputMessages = item.json.messages;\\n  const customId = item.json.custom_id;\\n  const model = item.json.model;\\n  const maxTokens = item.json.max_tokens;\\n\\n  if (inputMessages && inputMessages.length > 0) {\\n    let systemMessageContent = undefined;\\n    const transformedMessages = [];\\n\\n    // Process each message entry in sequence\\n    for (const messageObj of inputMessages) {\\n      // Extract system message if present\\n      if ('system' in messageObj) {\\n        systemMessageContent = messageObj.system;\\n      }\\n      \\n      // Process human and AI messages in the order they appear in the object keys\\n      // We need to determine what order the keys appear in the original object\\n      const keys = Object.keys(messageObj);\\n      \\n      for (const key of keys) {\\n        if (key === 'human') {\\n          transformedMessages.push({\\n            role: \\\"user\\\",\\n            content: messageObj.human\\n          });\\n        } else if (key === 'ai') {\\n          transformedMessages.push({\\n            role: \\\"assistant\\\",\\n            content: messageObj.ai\\n          });\\n        }\\n        // Skip 'system' as we already processed it\\n      }\\n    }\\n\\n    const params = {\\n      model: model,\\n      max_tokens: maxTokens,\\n      messages: transformedMessages\\n    };\\n\\n    if (systemMessageContent !== undefined) {\\n      params.system = systemMessageContent;\\n    }\\n\\n    output.push({\\n      custom_id: customId,\\n      params: params\\n    });\\n  }\\n}\\n\\nreturn output;\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"f9edb335-c33d-45fc-8f9b-12d7f37cc23e\",\n      \"name\": \"Load Chat Memory Data\",\n      \"type\": \"@n8n/n8n-nodes-langchain.memoryManager\",\n      \"position\": [\n        932,\n        475\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"22399660-ebe5-4838-bad3-c542d6d921a3\",\n      \"name\": \"First Prompt Result\",\n      \"type\": \"n8n-nodes-base.executionData\",\n      \"position\": [\n        2848,\n        525\n      ],\n      \"parameters\": {\n        \"dataToSave\": {\n          \"values\": [\n            {\n              \"key\": \"assistant_response\",\n              \"value\": \"={{ $json.result.message.content[0].text }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0e7f44f4-c931-4e0f-aebc-1b8f0327647f\",\n      \"name\": \"Second Prompt Result\",\n      \"type\": \"n8n-nodes-base.executionData\",\n      \"position\": [\n        2848,\n        725\n      ],\n      \"parameters\": {\n        \"dataToSave\": {\n          \"values\": [\n            {\n              \"key\": \"assistant_response\",\n              \"value\": \"={{ $json.result.message.content[0].text }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e42b01e0-8fc5-42e1-aa45-aa85477e766b\",\n      \"name\": \"Split Out Parsed Results\",\n      \"type\": \"n8n-nodes-base.splitOut\",\n      \"position\": [\n        1060,\n        -160\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fieldToSplitOut\": \"parsed\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"343676b9-f147-4981-b555-8af570374e8c\",\n      \"name\": \"Filter Second Prompt Results\",\n      \"type\": \"n8n-nodes-base.filter\",\n      \"position\": [\n        2628,\n        725\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"9e4b3524-7066-46cc-a365-8d23d08c1bda\",\n              \"operator\": {\n                \"name\": \"filter.operator.equals\",\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $json.custom_id }}\",\n              \"rightValue\": \"={{ $('Append execution data for single query example').item.json.custom_id }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"c9f5f366-27c4-4401-965b-67c314036fb6\",\n      \"name\": \"Filter First Prompt Results\",\n      \"type\": \"n8n-nodes-base.filter\",\n      \"position\": [\n        2628,\n        525\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"9e4b3524-7066-46cc-a365-8d23d08c1bda\",\n              \"operator\": {\n                \"name\": \"filter.operator.equals\",\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $json.custom_id }}\",\n              \"rightValue\": \"={{ $('Append execution data for chat memory example').item.json.custom_id }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"0a5b9c3d-665b-4e35-be9e-c8297314969d\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        110,\n        -100\n      ],\n      \"parameters\": {\n        \"height\": 300,\n        \"content\": \"## Submit batch request to Anthropic\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f19813a5-f669-45dd-a446-947a30b02b09\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        350,\n        -5\n      ],\n      \"parameters\": {\n        \"width\": 640,\n        \"height\": 300,\n        \"content\": \"## Loop until processing status is 'ended'\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"9f424fce-5610-4b85-9be6-4c2c403002db\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        500,\n        -200\n      ],\n      \"parameters\": {\n        \"width\": 280,\n        \"height\": 180,\n        \"content\": \"### Retrieve Message Batch Results\\n\\n[User guide](https://docs.anthropic.com/en/docs/build-with-claude/batch-processing)\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b87673b1-f08d-4c51-8ee5-4d54557cb382\",\n      \"name\": \"Sticky Note6\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        900,\n        380\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 820,\n        \"height\": 340,\n        \"content\": \"# Example usage with Chat History Node\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"d6d8ac02-7005-40a1-9950-9517e98e315c\",\n      \"name\": \"Sticky Note7\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        180,\n        720\n      ],\n      \"parameters\": {\n        \"width\": 1540,\n        \"height\": 220,\n        \"content\": \"# Example usage with single query string\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0d63deb0-dece-4502-9020-d67c1f194466\",\n      \"name\": \"Sticky Note8\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        180,\n        320\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 660,\n        \"height\": 400,\n        \"content\": \"# Environment setup\\nFor Chat History Node\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"cab94e09-6b84-4a38-b854-670241744db5\",\n      \"name\": \"Sticky Note9\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2120,\n        800\n      ],\n      \"parameters\": {\n        \"height\": 220,\n        \"content\": \"## anthropic-version\\n\\n[Documentation](https://docs.anthropic.com/en/api/versioning)\\n\\nWhen making API requests, you must send an anthropic-version request header. For example, anthropic-version: `2023-06-01` (latest supported version)\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"ab0a51a1-3c84-4a88-968b-fd46ab07de85\",\n      \"name\": \"Sticky Note10\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2560,\n        400\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 480,\n        \"height\": 300,\n        \"content\": \"# Example usage with Chat History Node (result)\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"d91b9be7-ef32-48d6-b880-cab0e99ba9bc\",\n      \"name\": \"Sticky Note11\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2560,\n        700\n      ],\n      \"parameters\": {\n        \"width\": 480,\n        \"height\": 300,\n        \"content\": \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n# Example usage with single query string (result)\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"341811e9-6677-42d9-be28-c388dbf68101\",\n      \"name\": \"Join two example requests into array\",\n      \"type\": \"n8n-nodes-base.merge\",\n      \"position\": [\n        1748,\n        625\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 3.1\n    },\n    {\n      \"id\": \"45a09f05-7610-4b0a-ab7f-0094c4b3f318\",\n      \"name\": \"Append execution data for single query example\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"notes\": \"custom_id, model and max tokens\",\n      \"position\": [\n        1010,\n        775\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"8276602f-689f-45c2-bce0-5df8500912b6\",\n              \"name\": \"custom_id\",\n              \"type\": \"string\",\n              \"value\": \"second-prompt-in-my-batch\"\n            },\n            {\n              \"id\": \"2c513dc2-d8cb-4ba3-b3c1-ea79517b9434\",\n              \"name\": \"model\",\n              \"type\": \"string\",\n              \"value\": \"claude-3-5-haiku-20241022\"\n            },\n            {\n              \"id\": \"b052140b-1152-4327-9c5a-5030b78990b7\",\n              \"name\": \"max_tokens\",\n              \"type\": \"number\",\n              \"value\": 100\n            }\n          ]\n        },\n        \"includeOtherFields\": true\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"c4e35349-840c-4c81-852c-0d8cd9331364\",\n      \"name\": \"Append execution data for chat memory example\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"notes\": \"custom_id, model and max tokens\",\n      \"position\": [\n        1308,\n        475\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"8276602f-689f-45c2-bce0-5df8500912b6\",\n              \"name\": \"custom_id\",\n              \"type\": \"string\",\n              \"value\": \"first-prompt-in-my-batch\"\n            },\n            {\n              \"id\": \"2c513dc2-d8cb-4ba3-b3c1-ea79517b9434\",\n              \"name\": \"model\",\n              \"type\": \"string\",\n              \"value\": \"claude-3-5-haiku-20241022\"\n            },\n            {\n              \"id\": \"b052140b-1152-4327-9c5a-5030b78990b7\",\n              \"name\": \"max_tokens\",\n              \"type\": \"number\",\n              \"value\": 100\n            }\n          ]\n        },\n        \"includeOtherFields\": true\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"058aedb1-fdfe-4edc-8d51-3b93ec7d232d\",\n      \"name\": \"Truncate Chat Memory\",\n      \"type\": \"@n8n/n8n-nodes-langchain.memoryManager\",\n      \"notes\": \"ensure clean state\",\n      \"position\": [\n        180,\n        475\n      ],\n      \"parameters\": {\n        \"mode\": \"delete\",\n        \"deleteMode\": \"all\"\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 1.1\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Get results\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Parse response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Run example\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"One query example\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Truncate Chat Memory\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Submit batch\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"If ended processing\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Parse response\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split Out Parsed Results\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"One query example\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Append execution data for single query example\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check batch status\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"If ended processing\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"If ended processing\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get results\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Batch Status Poll Interval\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Simple Memory Store\": {\n      \"ai_memory\": [\n        [\n          {\n            \"node\": \"Load Chat Memory Data\",\n            \"type\": \"ai_memory\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Fill Chat Memory with example data\",\n            \"type\": \"ai_memory\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Truncate Chat Memory\",\n            \"type\": \"ai_memory\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Truncate Chat Memory\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Fill Chat Memory with example data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Load Chat Memory Data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Append execution data for chat memory example\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Batch Status Poll Interval\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check batch status\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Construct 'requests' array\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set desired 'anthropic-version'\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Delete original properties\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Join two example requests into array\",\n            \"type\": \"main\",\n            \"index\": 1\n          }\n        ]\n      ]\n    },\n    \"Filter First Prompt Results\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"First Prompt Result\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Filter Second Prompt Results\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Second Prompt Result\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set desired 'anthropic-version'\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Execute Workflow 'Process Multiple Prompts in Parallel with Anthropic Claude Batch API'\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When Executed by Another Workflow\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Submit batch\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Fill Chat Memory with example data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Load Chat Memory Data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Join two example requests into array\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Construct 'requests' array\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Append execution data for chat memory example\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Build batch 'request' object from Chat Memory and execution data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Build batch 'request' object for single query\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Delete original properties\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Append execution data for single query example\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Build batch 'request' object for single query\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Build batch 'request' object from Chat Memory and execution data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Join two example requests into array\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Execute Workflow 'Process Multiple Prompts in Parallel with Anthropic Claude Batch API'\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Filter First Prompt Results\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Filter Second Prompt Results\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.executeWorkflowTrigger",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.code",
      "n8n-nodes-base.if",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.wait",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.manualTrigger",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.aggregate",
      "n8n-nodes-base.set",
      "n8n-nodes-base.executeWorkflow",
      "n8n-nodes-base.code",
      "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "@n8n/n8n-nodes-langchain.memoryManager",
      "n8n-nodes-base.code",
      "@n8n/n8n-nodes-langchain.memoryManager",
      "n8n-nodes-base.executionData",
      "n8n-nodes-base.executionData",
      "n8n-nodes-base.splitOut",
      "n8n-nodes-base.filter",
      "n8n-nodes-base.filter",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.merge",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "@n8n/n8n-nodes-langchain.memoryManager"
    ],
    "trigger": null
  }
}