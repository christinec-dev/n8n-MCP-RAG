{
  "source": "0969_Dropbox_Manual_Automate_Webhook.json",
  "index": 1,
  "content": "{\n  \"id\": \"48\",\n  \"name\": \"Workflow management\",\n  \"nodes\": [\n    {\n      \"name\": \"On clicking 'execute'\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        240,\n        300\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Function\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"position\": [\n        570,\n        300\n      ],\n      \"parameters\": {\n        \"functionCode\": \"//console.log(items[0].json.data);\\nlet data = items[0].json.data;\\nitems = data.map(i => {\\n//  console.log({json:i});\\n  return {json:i};\\n});\\n//console.log(items);\\nreturn items;\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"SplitInBatches\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [\n        760,\n        300\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"batchSize\": 1\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"IF\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        2090,\n        570\n      ],\n      \"parameters\": {\n        \"conditions\": {\n          \"boolean\": [\n            {\n              \"value1\": \"={{$node[\\\"SplitInBatches\\\"].context[\\\"noItemsLeft\\\"]}}\",\n              \"value2\": true\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"NoOp\",\n      \"type\": \"n8n-nodes-base.noOp\",\n      \"position\": [\n        2270,\n        550\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Airtable\",\n      \"type\": \"n8n-nodes-base.airtable\",\n      \"position\": [\n        1100,\n        200\n      ],\n      \"parameters\": {\n        \"table\": \"Workflows\",\n        \"operation\": \"list\",\n        \"application\": \"<YOUR_APP_ID>\",\n        \"additionalOptions\": {\n          \"fields\": [],\n          \"filterByFormula\": \"=workflowId={{$node[\\\"Get Workflow Details\\\"].json[\\\"data\\\"][\\\"id\\\"]}}\"\n        }\n      },\n      \"credentials\": {\n        \"airtableApi\": \"n8n management demo\"\n      },\n      \"typeVersion\": 1,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"name\": \"Airtable1\",\n      \"type\": \"n8n-nodes-base.airtable\",\n      \"position\": [\n        1750,\n        130\n      ],\n      \"parameters\": {\n        \"id\": \"={{$node[\\\"Airtable\\\"].json[\\\"id\\\"]}}\",\n        \"table\": \"Workflows\",\n        \"options\": {\n          \"typecast\": true\n        },\n        \"operation\": \"update\",\n        \"application\": \"<YOUR_APP_ID>\"\n      },\n      \"credentials\": {\n        \"airtableApi\": \"n8n management demo\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Airtable2\",\n      \"type\": \"n8n-nodes-base.airtable\",\n      \"position\": [\n        1750,\n        320\n      ],\n      \"parameters\": {\n        \"table\": \"Workflows\",\n        \"options\": {\n          \"typecast\": true\n        },\n        \"operation\": \"append\",\n        \"application\": \"<YOUR_APP_ID>\"\n      },\n      \"credentials\": {\n        \"airtableApi\": \"n8n management demo\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Set\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1590,\n        130\n      ],\n      \"parameters\": {\n        \"values\": {\n          \"string\": [\n            {\n              \"name\": \"workflowId\",\n              \"value\": \"={{$node[\\\"Get Workflow Details\\\"].json[\\\"data\\\"][\\\"id\\\"]}}\"\n            },\n            {\n              \"name\": \"name\",\n              \"value\": \"={{$node[\\\"Get Workflow Details\\\"].json[\\\"data\\\"][\\\"name\\\"]}}\"\n            },\n            {\n              \"name\": \"errorWorkflowId\",\n              \"value\": \"={{$node[\\\"Get Workflow Details\\\"].json[\\\"data\\\"][\\\"settings\\\"][\\\"errorWorkflow\\\"]}}\"\n            },\n            {\n              \"name\": \"createdAt\",\n              \"value\": \"={{$node[\\\"Get Workflow Details\\\"].json[\\\"data\\\"][\\\"createdAt\\\"]}}\"\n            },\n            {\n              \"name\": \"updatedAt\",\n              \"value\": \"={{$node[\\\"Get Workflow Details\\\"].json[\\\"data\\\"][\\\"updatedAt\\\"]}}\"\n            },\n            {\n              \"name\": \"nodes\",\n              \"value\": \"={{$node[\\\"Prepare data\\\"].json[\\\"fields\\\"][\\\"nodes\\\"]}}\"\n            },\n            {\n              \"name\": \"timezone\",\n              \"value\": \"={{$node[\\\"Get Workflow Details\\\"].json[\\\"data\\\"][\\\"settings\\\"][\\\"timezone\\\"]}}\"\n            },\n            {\n              \"name\": \"CRON_details\",\n              \"value\": \"={{$node[\\\"Prepare data\\\"].json[\\\"fields\\\"][\\\"CRON_details\\\"]}}\"\n            },\n            {\n              \"name\": \"rawData\",\n              \"value\": \"={{$node[\\\"Prepare data\\\"].json[\\\"fields\\\"][\\\"rawData\\\"]}}\"\n            }\n          ],\n          \"boolean\": [\n            {\n              \"name\": \"isActive\",\n              \"value\": \"={{$node[\\\"Get Workflow Details\\\"].json[\\\"data\\\"][\\\"active\\\"]}}\"\n            },\n            {\n              \"name\": \"isCRON\",\n              \"value\": \"={{$node[\\\"Prepare data\\\"].json[\\\"fields\\\"][\\\"isCRON\\\"]}}\"\n            },\n            {\n              \"name\": \"saveManualExecutions\",\n              \"value\": \"={{$node[\\\"Get Workflow Details\\\"].json[\\\"data\\\"][\\\"settings\\\"][\\\"saveManualExecutions\\\"]}}\"\n            },\n            {\n              \"name\": \"isTrigger\",\n              \"value\": \"={{$node[\\\"Prepare data\\\"].json[\\\"fields\\\"][\\\"isTrigger\\\"]}}\"\n            }\n          ]\n        },\n        \"options\": {},\n        \"keepOnlySet\": true\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Set1\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1590,\n        320\n      ],\n      \"parameters\": {\n        \"values\": {\n          \"string\": [\n            {\n              \"name\": \"workflowId\",\n              \"value\": \"={{$node[\\\"Get Workflow Details\\\"].json[\\\"data\\\"][\\\"id\\\"]}}\"\n            },\n            {\n              \"name\": \"name\",\n              \"value\": \"={{$node[\\\"Get Workflow Details\\\"].json[\\\"data\\\"][\\\"name\\\"]}}\"\n            },\n            {\n              \"name\": \"errorWorkflowId\",\n              \"value\": \"={{$node[\\\"Get Workflow Details\\\"].json[\\\"data\\\"][\\\"settings\\\"][\\\"errorWorkflow\\\"]}}\"\n            },\n            {\n              \"name\": \"createdAt\",\n              \"value\": \"={{$node[\\\"Get Workflow Details\\\"].json[\\\"data\\\"][\\\"createdAt\\\"]}}\"\n            },\n            {\n              \"name\": \"updatedAt\",\n              \"value\": \"={{$node[\\\"Get Workflow Details\\\"].json[\\\"data\\\"][\\\"updatedAt\\\"]}}\"\n            },\n            {\n              \"name\": \"nodes\",\n              \"value\": \"={{$node[\\\"Prepare data1\\\"].json[\\\"fields\\\"][\\\"nodes\\\"]}}\"\n            },\n            {\n              \"name\": \"timezone\",\n              \"value\": \"={{$node[\\\"Get Workflow Details\\\"].json[\\\"data\\\"][\\\"settings\\\"][\\\"timezone\\\"]}}\"\n            },\n            {\n              \"name\": \"CRON_details\",\n              \"value\": \"={{$node[\\\"Prepare data1\\\"].json[\\\"fields\\\"][\\\"CRON_details\\\"]}}\"\n            },\n            {\n              \"name\": \"rawData\",\n              \"value\": \"={{$node[\\\"Prepare data1\\\"].json[\\\"fields\\\"][\\\"rawData\\\"]}}\"\n            }\n          ],\n          \"boolean\": [\n            {\n              \"name\": \"isActive\",\n              \"value\": \"={{$node[\\\"Get Workflow Details\\\"].json[\\\"data\\\"][\\\"active\\\"]}}\"\n            },\n            {\n              \"name\": \"isCRON\",\n              \"value\": \"={{$node[\\\"Prepare data1\\\"].json[\\\"fields\\\"][\\\"isCRON\\\"]}}\"\n            },\n            {\n              \"name\": \"saveManualExecutions\",\n              \"value\": \"={{$node[\\\"Get Workflow Details\\\"].json[\\\"data\\\"][\\\"settings\\\"][\\\"saveManualExecutions\\\"]}}\"\n            },\n            {\n              \"name\": \"isTrigger\",\n              \"value\": \"={{$node[\\\"Prepare data1\\\"].json[\\\"fields\\\"][\\\"isTrigger\\\"]}}\"\n            }\n          ]\n        },\n        \"options\": {},\n        \"keepOnlySet\": true\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Get All Workflows\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        410,\n        300\n      ],\n      \"parameters\": {\n        \"url\": \"http://localhost:5678/rest/workflows\",\n        \"options\": {\n          \"fullResponse\": false\n        },\n        \"headerParametersUi\": {\n          \"parameter\": [\n            {\n              \"name\": \"Authorization\",\n              \"value\": \"<TOKEN>\"\n            }\n          ]\n        },\n        \"allowUnauthorizedCerts\": true\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Prepare data\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"position\": [\n        1430,\n        130\n      ],\n      \"parameters\": {\n        \"functionCode\": \"let data = $node[\\\"Get Workflow Details\\\"].json[\\\"data\\\"];\\nlet file = $node[\\\"Get file link\\\"].json[\\\"link\\\"];\\nlet nodes = new Set(data[\\\"nodes\\\"].map(i => i.type));\\nlet nodes2 = [...nodes];\\n//console.log(...nodes);\\nlet data2 = data[\\\"nodes\\\"].map(i => i.name);\\nif(nodes2.includes('n8n-nodes-base.cron')){\\n  console.log('Cron found!');\\n//  console.log(data);\\n  let cron_node = data[\\\"nodes\\\"].filter(i => i.type == 'n8n-nodes-base.cron');\\n  //console.log(cron_node[0].parameters.triggerTimes.item);\\n  items[0].json[\\\"fields\\\"][\\\"isCRON\\\"]=true;\\n  items[0].json[\\\"fields\\\"][\\\"nodes\\\"]=[...nodes];\\n  items[0].json[\\\"fields\\\"][\\\"CRON_details\\\"]=cron_node[0].parameters.triggerTimes.item;\\n  items[0].json[\\\"fields\\\"][\\\"rawData\\\"]=[{url:file ,filename: 'workflow_'+data[\\\"id\\\"]+'__'+data[\\\"updatedAt\\\"]+'.json'}];\\n} else {  \\n  //console.log('Cron not found!');\\n  items[0].json[\\\"fields\\\"][\\\"isCRON\\\"]=false;\\n  items[0].json[\\\"fields\\\"][\\\"nodes\\\"]=[...nodes];\\n  items[0].json[\\\"fields\\\"][\\\"rawData\\\"]=[{url:file ,filename: 'workflow_'+data[\\\"id\\\"]+'__'+data[\\\"updatedAt\\\"]+'.json'}];\\n}\\nif(nodes2.some(i => {\\n  let regExp = new RegExp(/n8n-nodes-base\\\\.[\\\\w]+Trigger/);\\n  if(i=='n8n-nodes-base.webhook'){\\n    return true;\\n  }\\n  if(regExp.test(i)){\\n    return true;\\n  }\\n  return false;\\n})){\\n  items[0].json[\\\"fields\\\"][\\\"isTrigger\\\"]=true;  \\n} else {\\n  items[0].json[\\\"fields\\\"][\\\"isTrigger\\\"]=false;\\n}\\n  \\n//console.log(items);\\nreturn items;\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Prepare data1\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"position\": [\n        1430,\n        320\n      ],\n      \"parameters\": {\n        \"functionCode\": \"let data = $node[\\\"Get Workflow Details\\\"].json[\\\"data\\\"];\\nlet file = $node[\\\"Get file link\\\"].json[\\\"link\\\"];\\nlet nodes = new Set(data[\\\"nodes\\\"].map(i => i.type));\\nlet nodes2 = [...nodes];\\n//console.log(data);\\nlet data2 = data[\\\"nodes\\\"].map(i => i.name);\\nif(nodes2.includes('n8n-nodes-base.cron')){\\n  //console.log('Cron found!');\\n  let cron_node = data[\\\"nodes\\\"].filter(i => i.type == 'n8n-nodes-base.cron');\\n  items[0].json={\\n    fields:{\\n      isCRON:true,\\n      nodes:[...nodes],\\n      CRON_details:cron_node[0].parameters.triggerTimes.item,\\n      rawData:[{url:file ,filename: 'workflow_'+data[\\\"id\\\"]+'__'+data[\\\"updatedAt\\\"]+'.json'}]\\n    }\\n  };\\n} else {  \\n  //console.log('Cron not found!');\\n  items[0].json={\\n    fields:{\\n      isCRON:false,\\n      nodes:[...nodes],\\n      rawData:[{url:file ,filename: 'workflow_'+data[\\\"id\\\"]+'__'+data[\\\"updatedAt\\\"]+'.json'}]\\n    }\\n  };\\n}\\nif(nodes2.some(i => {\\n  let regExp = new RegExp(/n8n-nodes-base\\\\.[\\\\w]+Trigger/);\\n  if(i=='n8n-nodes-base.webhook'){\\n    return true;\\n  }\\n  if(regExp.test(i)){\\n    return true;\\n  }\\n  return false;\\n})){\\n  items[0].json[\\\"fields\\\"][\\\"isTrigger\\\"]=true;  \\n} else {\\n  items[0].json[\\\"fields\\\"][\\\"isTrigger\\\"]=false;\\n}\\n//console.log(items);\\nreturn items;\\n\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Cron\",\n      \"type\": \"n8n-nodes-base.cron\",\n      \"position\": [\n        250,\n        510\n      ],\n      \"parameters\": {\n        \"triggerTimes\": {\n          \"item\": [\n            {\n              \"mode\": \"everyHour\",\n              \"minute\": 15\n            },\n            {\n              \"mode\": \"everyHour\",\n              \"minute\": 45\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Move Binary Data\",\n      \"type\": \"n8n-nodes-base.moveBinaryData\",\n      \"position\": [\n        1000,\n        -10\n      ],\n      \"parameters\": {\n        \"mode\": \"jsonToBinary\",\n        \"options\": {\n          \"keepSource\": true\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Dropbox\",\n      \"type\": \"n8n-nodes-base.dropbox\",\n      \"position\": [\n        1140,\n        -10\n      ],\n      \"parameters\": {\n        \"path\": \"=/workflows/workflow_{{$node[\\\"Get Workflow Details\\\"].json[\\\"data\\\"][\\\"id\\\"]}}/workflow_{{$node[\\\"Get Workflow Details\\\"].json[\\\"data\\\"][\\\"id\\\"]}}__{{$node[\\\"Get Workflow Details\\\"].json[\\\"data\\\"][\\\"updatedAt\\\"]}}.json\",\n        \"binaryData\": true\n      },\n      \"credentials\": {\n        \"dropboxApi\": \"My n8n backups\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Get Workflow Details\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        840,\n        -10\n      ],\n      \"parameters\": {\n        \"url\": \"=http://localhost:5678/rest/workflows/{{$node[\\\"SplitInBatches\\\"].json[\\\"id\\\"]}}\",\n        \"options\": {},\n        \"headerParametersUi\": {\n          \"parameter\": [\n            {\n              \"name\": \"Authorization\",\n              \"value\": \"<TOKEN>\"\n            }\n          ]\n        },\n        \"allowUnauthorizedCerts\": true\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Get file link\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1290,\n        -10\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.dropboxapi.com/2/files/get_temporary_link\",\n        \"options\": {},\n        \"requestMethod\": \"POST\",\n        \"bodyParametersUi\": {\n          \"parameter\": [\n            {\n              \"name\": \"path\",\n              \"value\": \"={{$node[\\\"Dropbox\\\"].json[\\\"path_lower\\\"]}}\"\n            }\n          ]\n        },\n        \"headerParametersUi\": {\n          \"parameter\": [\n            {\n              \"name\": \"Authorization\",\n              \"value\": \"<TOKEN>\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1,\n      \"continueOnFail\": true,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"name\": \"IF Airtable record exists?\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        1270,\n        200\n      ],\n      \"parameters\": {\n        \"conditions\": {\n          \"boolean\": [\n            {\n              \"value1\": \"={{$node[\\\"Airtable\\\"].json[\\\"id\\\"] != \\\"\\\" && $node[\\\"Airtable\\\"].json[\\\"id\\\"] != null && $node[\\\"Airtable\\\"].json[\\\"id\\\"] != undefined}}\",\n              \"value2\": true\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": true,\n  \"settings\": {\n    \"errorWorkflow\": \"5\"\n  },\n  \"connections\": {\n    \"IF\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"NoOp\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"SplitInBatches\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Airtable1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Cron\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get All Workflows\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Airtable2\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Dropbox\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get file link\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Airtable\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"IF Airtable record exists?\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Function\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SplitInBatches\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Airtable1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"IF\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Airtable2\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"IF\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Prepare data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get file link\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Airtable\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Prepare data1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"SplitInBatches\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Workflow Details\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Move Binary Data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Dropbox\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get All Workflows\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Function\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Workflow Details\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Move Binary Data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"On clicking 'execute'\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get All Workflows\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"IF Airtable record exists?\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Prepare data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Prepare data1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.manualTrigger",
      "n8n-nodes-base.function",
      "n8n-nodes-base.splitInBatches",
      "n8n-nodes-base.if",
      "n8n-nodes-base.noOp",
      "n8n-nodes-base.airtable",
      "n8n-nodes-base.airtable",
      "n8n-nodes-base.airtable",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.function",
      "n8n-nodes-base.function",
      "n8n-nodes-base.cron",
      "n8n-nodes-base.moveBinaryData",
      "n8n-nodes-base.dropbox",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.if"
    ],
    "trigger": null
  }
}