{
  "source": "1597_Export.json",
  "index": 1,
  "content": "{\n  \"\\\"nodes\\\"\": \"[\",\n  \"\\\"id\\\"\": \"\\\"a80e6528-cf79-4229-8c58-6856fd86b6e7\\\",\",\n  \"\\\"name\\\"\": \"\\\"Sticky Note6\\\",\",\n  \"\\\"type\\\"\": \"\\\"main\\\",\",\n  \"\\\"position\\\"\": \"[\",\n  \"\\\"parameters\\\"\": \"{\",\n  \"\\\"fileId\\\"\": \"{\",\n  \"\\\"__rl\\\"\": \"true,\",\n  \"\\\"mode\\\"\": \"\\\"list\\\",\",\n  \"\\\"value\\\"\": \"\\\"={\\\\n \\\\\\\"name\\\\\\\": \\\\\\\"generate_schema\\\\\\\",\\\\n \\\\\\\"description\\\\\\\": \\\\\\\"Generate schema for an array of objects representing items with their descriptions, quantities, unit prices, and amounts.\\\\\\\",\\\\n \\\\\\\"strict\\\\\\\": true,\\\\n \\\\\\\"schema\\\\\\\": {\\\\n \\\\\\\"type\\\\\\\": \\\\\\\"object\\\\\\\",\\\\n \\\\\\\"required\\\\\\\": [\\\\n \\\\\\\"items\\\\\\\"\\\\n ],\\\\n \\\\\\\"properties\\\\\\\": {\\\\n \\\\\\\"items\\\\\\\": {\\\\n \\\\\\\"type\\\\\\\": \\\\\\\"array\\\\\\\",\\\\n \\\\\\\"description\\\\\\\": \\\\\\\"Array of item objects\\\\\\\",\\\\n \\\\\\\"items\\\\\\\": {\\\\n \\\\\\\"type\\\\\\\": \\\\\\\"object\\\\\\\",\\\\n \\\\\\\"required\\\\\\\": [\\\\n \\\\\\\"description\\\\\\\",\\\\n \\\\\\\"qty\\\\\\\",\\\\n \\\\\\\"unit_price\\\\\\\",\\\\n \\\\\\\"amount\\\\\\\"\\\\n ],\\\\n \\\\\\\"properties\\\\\\\": {\\\\n \\\\\\\"description\\\\\\\": {\\\\n \\\\\\\"type\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n \\\\\\\"description\\\\\\\": \\\\\\\"Description of the item\\\\\\\"\\\\n },\\\\n \\\\\\\"qty\\\\\\\": {\\\\n \\\\\\\"type\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n \\\\\\\"description\\\\\\\": \\\\\\\"Quantity of the item\\\\\\\"\\\\n },\\\\n \\\\\\\"unit_price\\\\\\\": {\\\\n \\\\\\\"type\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n \\\\\\\"description\\\\\\\": \\\\\\\"Unit price of the item formatted as a string\\\\\\\"\\\\n },\\\\n \\\\\\\"amount\\\\\\\": {\\\\n \\\\\\\"type\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n \\\\\\\"description\\\\\\\": \\\\\\\"Total amount for the item formatted as a string\\\\\\\"\\\\n }\\\\n },\\\\n \\\\\\\"additionalProperties\\\\\\\": false\\\\n }\\\\n }\\\\n },\\\\n \\\\\\\"additionalProperties\\\\\\\": false\\\\n }\\\\n}\\\"\",\n  \"\\\"options\\\"\": \"{},\",\n  \"\\\"operation\\\"\": \"\\\"create\\\"\",\n  \"\\\"credentials\\\"\": \"{\",\n  \"\\\"googleDriveOAuth2Api\\\"\": \"{\",\n  \"\\\"typeVersion\\\"\": \"1\",\n  \"\\\"url\\\"\": \"\\\"=https://api.openai.com/v1/chat/completions\\\",\",\n  \"\\\"method\\\"\": \"\\\"POST\\\",\",\n  \"\\\"sendBody\\\"\": \"true,\",\n  \"\\\"contentType\\\"\": \"\\\"multipart-form-data\\\",\",\n  \"\\\"sendHeaders\\\"\": \"true,\",\n  \"\\\"bodyParameters\\\"\": \"{\",\n  \"\\\"parameterType\\\"\": \"\\\"formBinaryData\\\",\",\n  \"\\\"inputDataFieldName\\\"\": \"\\\"data\\\"\",\n  \"\\\"headerParameters\\\"\": \"{\",\n  \"\\\"event\\\"\": \"\\\"fileCreated\\\",\",\n  \"\\\"pollTimes\\\"\": \"{\",\n  \"\\\"item\\\"\": \"[\",\n  \"\\\"triggerOn\\\"\": \"\\\"specificFolder\\\",\",\n  \"\\\"folderToWatch\\\"\": \"{\",\n  \"\\\"cachedResultUrl\\\"\": \"\\\"https://airtable.com/appndgSF4faN4jPXi/tblIuVR9ocAomznzK\\\",\",\n  \"\\\"cachedResultName\\\"\": \"\\\"Line Items\\\"\",\n  \"\\\"base\\\"\": \"{\",\n  \"\\\"table\\\"\": \"{\",\n  \"\\\"columns\\\"\": \"{\",\n  \"\\\"schema\\\"\": \"[\",\n  \"\\\"display\\\"\": \"true,\",\n  \"\\\"removed\\\"\": \"false,\",\n  \"\\\"readOnly\\\"\": \"false,\",\n  \"\\\"required\\\"\": \"false,\",\n  \"\\\"displayName\\\"\": \"\\\"Invoices\\\",\",\n  \"\\\"defaultMatch\\\"\": \"false,\",\n  \"\\\"canBeUsedToMatch\\\"\": \"true\",\n  \"\\\"mappingMode\\\"\": \"\\\"defineBelow\\\",\",\n  \"\\\"matchingColumns\\\"\": \"[]\",\n  \"\\\"airtableTokenApi\\\"\": \"{\",\n  \"\\\"Qty\\\"\": \"\\\"={{ $json.qty }}\\\",\",\n  \"\\\"Amount\\\"\": \"\\\"={{ parseFloat($json.amount.replace('$', '').trim()) }}\\\",\",\n  \"\\\"Invoices\\\"\": \"\\\"=[\\\\\\\"{{ $('Create Invoice').item.json.id }}\\\\\\\"]\\\",\",\n  \"\\\"Unit price\\\"\": \"\\\"={{ parseFloat($json.unit_price.replace('$', '').trim()) }}\\\",\",\n  \"\\\"Description\\\"\": \"\\\"={{ $json.description }}\\\"\",\n  \"\\\"jsonBody\\\"\": \"\\\"={\\\\n \\\\\\\"model\\\\\\\": \\\\\\\"gpt-4o-mini\\\\\\\",\\\\n \\\\\\\"messages\\\\\\\": [\\\\n {\\\\n \\\\\\\"role\\\\\\\": \\\\\\\"system\\\\\\\",\\\\n \\\\\\\"content\\\\\\\": {{ JSON.stringify($('Set Fields').item.json.prompt) }}\\\\n },\\\\n {\\\\n \\\\\\\"role\\\\\\\": \\\\\\\"user\\\\\\\",\\\\n \\\\\\\"content\\\\\\\": {{ JSON.stringify( JSON.stringify($('Webhook').item.json.body.json[0].items) ) }}\\\\n }\\\\n ],\\\\n \\\\\\\"response_format\\\\\\\":{ \\\\\\\"type\\\\\\\": \\\\\\\"json_schema\\\\\\\", \\\\\\\"json_schema\\\\\\\": {{ $('Set Fields').item.json.schema }}\\\\n\\\\n }\\\\n }\\\",\",\n  \"\\\"specifyBody\\\"\": \"\\\"json\\\",\",\n  \"\\\"authentication\\\"\": \"\\\"predefinedCredentialType\\\",\",\n  \"\\\"nodeCredentialType\\\"\": \"\\\"openAiApi\\\"\",\n  \"\\\"openAiApi\\\"\": \"{\",\n  \"\\\"assignments\\\"\": \"[\",\n  \"\\\"jsCode\\\"\": \"\\\"// Get the input from the \\\\\\\"OpenAI - Extract Line Items\\\\\\\" node\\\\nconst input = $(\\\\\\\"OpenAI - Extract Line Items\\\\\\\").first().json;\\\\n\\\\n// Initialize an array for the output\\\\nconst outputItems = [];\\\\n\\\\n// Navigate to the 'content' field in the choices array\\\\nconst content = input.choices[0]?.message?.content;\\\\n\\\\nif (content) {\\\\n try {\\\\n // Parse the stringified JSON in the 'content' field\\\\n const parsedContent = JSON.parse(content);\\\\n\\\\n // Extract 'items' and add them to the output array\\\\n if (Array.isArray(parsedContent.items)) {\\\\n outputItems.push(...parsedContent.items.map(i => ({ json: i })));\\\\n }\\\\n } catch (error) {\\\\n // Handle any parsing errors\\\\n console.error('Error parsing content:', error);\\\\n }\\\\n}\\\\n\\\\n// Return the extracted items\\\\nreturn outputItems;\\\\n\\\"\",\n  \"\\\"webhookId\\\"\": \"\\\"0f7f5ebb-8b66-453b-a818-20cc3647c783\\\",\",\n  \"\\\"path\\\"\": \"\\\"0f7f5ebb-8b66-453b-a818-20cc3647c783\\\",\",\n  \"\\\"httpMethod\\\"\": \"\\\"POST\\\"\",\n  \"\\\"width\\\"\": \"280,\",\n  \"\\\"height\\\"\": \"626,\",\n  \"\\\"content\\\"\": \"\\\"### Set up steps\\\\n\\\\n1. **Google Drive Trigger**: \\\\n - Set up a trigger to detect new files in a specified folder dedicated to invoices.\\\\n\\\\n2. **File Upload to LlamaParse**: \\\\n - Create an HTTP request that sends the invoice file to LlamaParse for parsing, including relevant header settings and webhook URL.\\\\n\\\\n3. **Webhook Processing**: \\\\n - Establish a webhook node to handle parsed results from LlamaParse, extracting needed invoice details effectively.\\\\n\\\\n4. **Invoice Record Creation**: \\\\n - Create initial records for invoices in your database using the parsed details received from the webhook.\\\\n\\\\n5. **Line Item Processing**: \\\\n - Transform string data into structured line item arrays and create individual records for each item linked to the main invoice.\\\"\",\n  \"\\\"color\\\"\": \"7,\",\n  \"\\\"pinData\\\"\": \"{},\",\n  \"\\\"connections\\\"\": \"{\",\n  \"\\\"Webhook\\\"\": \"{\",\n  \"\\\"main\\\"\": \"[\",\n  \"\\\"node\\\"\": \"\\\"Create Invoice\\\",\",\n  \"\\\"index\\\"\": \"0\",\n  \"\\\"Set Fields\\\"\": \"{\",\n  \"\\\"Google Drive\\\"\": \"{\",\n  \"\\\"Create Invoice\\\"\": \"{\",\n  \"\\\"Process Line Items\\\"\": \"{\",\n  \"\\\"Google Drive Trigger\\\"\": \"{\",\n  \"\\\"OpenAI - Extract Line Items\\\"\": \"{\"\n}",
  "metadata": {
    "node_types": [],
    "trigger": null
  }
}