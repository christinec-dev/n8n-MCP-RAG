{
  "source": "0892_Webhook_Code_Create_Webhook.json",
  "index": 1,
  "content": "{\n  \"meta\": {\n    \"instanceId\": \"d1b60f1865ef6504ee3af5be4ef9a7387762b4132615a52de808456d52e8d336\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"nodes\": [\n    {\n      \"id\": \"c84f3a9a-66b3-4a09-b06a-9b399ea574b8\",\n      \"name\": \"OpenAI\",\n      \"type\": \"@n8n/n8n-nodes-langchain.openAi\",\n      \"position\": [\n        420,\n        -240\n      ],\n      \"parameters\": {\n        \"modelId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4.1-mini\",\n          \"cachedResultName\": \"GPT-4.1-MINI\"\n        },\n        \"options\": {},\n        \"messages\": {\n          \"values\": [\n            {\n              \"content\": \"=Does this PDF file look like a {{ $(\\\"Configure\\\").first().json[\\\"Match on\\\"] }}? Return \\\"true\\\" if it is a {{ $(\\\"Configure\\\").first().json[\\\"Match on\\\"] }} and \\\"false\\\" if not. Only reply with lowercase letters \\\"true\\\" or \\\"false\\\".\\n\\nThis is the PDF filename:\\n```\\n{{ $binary.data.fileName }}\\n```\\n\\nThis is the PDF text content:\\n```\\n{{ $json.text }}\\n```\"\n            }\n          ]\n        }\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"prYAbsQvWl1pPbdL\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.8\n    },\n    {\n      \"id\": \"ea1fbc5b-1859-4d65-8401-30baa95fcc52\",\n      \"name\": \"Configure\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -700,\n        0\n      ],\n      \"parameters\": {\n        \"values\": {\n          \"number\": [\n            {\n              \"name\": \"maxTokenSize\",\n              \"value\": 8000\n            },\n            {\n              \"name\": \"replyTokenSize\",\n              \"value\": 50\n            }\n          ],\n          \"string\": [\n            {\n              \"name\": \"Match on\",\n              \"value\": \"receipt or invoice that can be considered a software engineering business cost\"\n            },\n            {\n              \"name\": \"Google Drive folder to upload matched PDFs\",\n              \"value\": \"https://drive.google.com/drive/folders/[put_folder_id_here]\"\n            },\n            {\n              \"name\": \"sendInvoicesTo\"\n            }\n          ],\n          \"boolean\": [\n            {\n              \"name\": \"sendEmail\",\n              \"value\": \"={{ $('Webhook').item.json.body.sendEmail === \\\"true\\\" }}\"\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"3ee63612-c1e7-40e6-a38f-f77f5ee3efa4\",\n      \"name\": \"Iterate over email attachments\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        -200,\n        0\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// https://community.n8n.io/t/iterating-over-email-attachments/13588/3\\nlet results = [];\\n\\nfor (const item of $input.all()) {\\n  console.log(item);\\n  for (const key of Object.keys(item.binary)) {\\n    results.push({\\n        json: {},\\n        binary: {\\n            data: item.binary[key],\\n        }\\n    });\\n  }\\n}\\n\\nreturn results;\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"3e638471-c1c5-4bab-aa2a-12a1777225ec\",\n      \"name\": \"Not a PDF\",\n      \"type\": \"n8n-nodes-base.noOp\",\n      \"position\": [\n        120,\n        80\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b5af902b-2d59-49ee-b6d8-e387c59b89fd\",\n      \"name\": \"Is text within token limit?\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        300,\n        -100\n      ],\n      \"parameters\": {\n        \"conditions\": {\n          \"boolean\": [\n            {\n              \"value1\": \"={{ $json.text.length() / 4 <= $('Configure').first().json.maxTokenSize - $('Configure').first().json.replyTokenSize }}\",\n              \"value2\": true\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"a0a8895c-ef8b-44e7-9294-1bcf629d0973\",\n      \"name\": \"Merge\",\n      \"type\": \"n8n-nodes-base.merge\",\n      \"position\": [\n        720,\n        -120\n      ],\n      \"parameters\": {\n        \"mode\": \"combine\",\n        \"options\": {\n          \"clashHandling\": {\n            \"values\": {\n              \"resolveClash\": \"preferInput1\"\n            }\n          }\n        },\n        \"combinationMode\": \"mergeByPosition\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"7565118a-6d44-4583-a19f-cb4177378d33\",\n      \"name\": \"Is matched\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        880,\n        -120\n      ],\n      \"parameters\": {\n        \"conditions\": {\n          \"string\": [\n            {\n              \"value1\": \"={{ $json.message.content }}\",\n              \"value2\": \"true\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"074ffb7a-f83e-44b8-84fe-7b85f7245bb0\",\n      \"name\": \"Upload file to folder\",\n      \"type\": \"n8n-nodes-base.googleDrive\",\n      \"position\": [\n        1100,\n        -140\n      ],\n      \"parameters\": {\n        \"name\": \"={{ $binary.data.fileName }}\",\n        \"options\": {},\n        \"parents\": [\n          \"={{ $('Create folder').first().json.id }}\"\n        ],\n        \"binaryData\": true\n      },\n      \"credentials\": {\n        \"googleDriveOAuth2Api\": {\n          \"id\": \"xXHySx4T77sDdTqY\",\n          \"name\": \"Google Drive account\"\n        }\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"7681eb62-ba86-4c89-9b88-3ce6fc438bd4\",\n      \"name\": \"Webhook\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        -1080,\n        0\n      ],\n      \"webhookId\": \"cded3af3-31df-47c2-a826-ff84eb4a41df\",\n      \"parameters\": {\n        \"path\": \"cded3af3-31df-47c2-a826-ff84eb4a41df\",\n        \"options\": {},\n        \"httpMethod\": \"POST\",\n        \"responseMode\": \"responseNode\",\n        \"authentication\": \"headerAuth\"\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"90SsOYPPIe3Qv5Rq\",\n          \"name\": \"Header Auth account\"\n        }\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"aab3d940-55c2-40d3-917a-83412d4e378d\",\n      \"name\": \"Respond to Webhook\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        -720,\n        -240\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"responseCode\": 202\n        },\n        \"respondWith\": \"json\",\n        \"responseBody\": \"={\\n  \\\"status\\\": \\\"Accepted\\\",\\n  \\\"driveFolderUrl\\\": \\\"{{ \\\"https://drive.google.com/drive/folders/\\\" + $json.id }}\\\"\\n}\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"29a4122f-0112-4157-a50d-0a6cf83ab7fd\",\n      \"name\": \"Create folder\",\n      \"type\": \"n8n-nodes-base.googleDrive\",\n      \"position\": [\n        -920,\n        0\n      ],\n      \"parameters\": {\n        \"name\": \"={{ \\\"invoices_\\\" + $json.body.startDate.split('T')[0] }}\",\n        \"driveId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"My Drive\"\n        },\n        \"options\": {},\n        \"folderId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"root\",\n          \"cachedResultName\": \"/ (Root folder)\"\n        },\n        \"resource\": \"folder\"\n      },\n      \"credentials\": {\n        \"googleDriveOAuth2Api\": {\n          \"id\": \"xXHySx4T77sDdTqY\",\n          \"name\": \"Google Drive account\"\n        }\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"df86428f-7e63-4fd9-944c-f48af72af495\",\n      \"name\": \"Aggregate attachments\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1200,\n        -340\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// \\\"items\\\" is the array coming from the previous node (14 items)\\nconst merged = { json: {}, binary: {} };\\n\\nfor (const item of $input.all()) {\\n  const data = {\\n    [item.binary.data.fileName]: item.binary.data\\n  };\\n  Object.assign(merged.binary, data); // copy every file property\\n}\\n\\nreturn [merged];     // one single item goes out\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"72a21bfa-6e3b-421a-a4ca-dea9e09a5b0b\",\n      \"name\": \"Send email with invoices?\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        1000,\n        -320\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"63caf3d8-39bd-4300-aa7e-8c0ecfc87576\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"true\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $('Configure').first().json.sendEmail }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"bb038635-eb69-447b-a85b-e9c3caebfe3a\",\n      \"name\": \"Send to my accountant\",\n      \"type\": \"n8n-nodes-base.gmail\",\n      \"position\": [\n        1360,\n        -280\n      ],\n      \"webhookId\": \"3ea4dac1-58fe-4d0e-811b-065ecaef77df\",\n      \"parameters\": {\n        \"sendTo\": \"test@example.com\",\n        \"message\": \"Hello, here are my invoices and receipts.\",\n        \"options\": {\n          \"attachmentsUi\": {\n            \"attachmentsBinary\": [\n              {\n                \"property\": \"={{ Object.keys($binary).join(',') }}\"\n              }\n            ]\n          }\n        },\n        \"subject\": \"={{ \\n  (() => {\\n    const startDate = $node['Webhook'].json.body.startDate.split('T')[0];\\n    const endDate = $node['Webhook'].json.body.endDate.split('T')[0];\\n    return `Dokumenty kosztowe za okres od ${startDate} do ${endDate}`;\\n  })() \\n}}\",\n        \"emailType\": \"text\"\n      },\n      \"credentials\": {\n        \"gmailOAuth2\": {\n          \"id\": \"PPgHF95PrpAMBlbG\",\n          \"name\": \"Gmail account\"\n        }\n      },\n      \"typeVersion\": 2.1\n    },\n    {\n      \"id\": \"7b2e5c6c-0a95-4347-97a9-c9ffbc0e3af2\",\n      \"name\": \"Get emails with attachments\",\n      \"type\": \"n8n-nodes-base.gmail\",\n      \"position\": [\n        -500,\n        0\n      ],\n      \"webhookId\": \"6e2ca9f7-6d22-4d94-86bc-8a299bc8e752\",\n      \"parameters\": {\n        \"simple\": false,\n        \"filters\": {\n          \"q\": \"has:attachment\",\n          \"sender\": \"\",\n          \"receivedAfter\": \"={{ $('Webhook').item.json.body.startDate }}\",\n          \"receivedBefore\": \"={{ $('Webhook').item.json.body.endDate }}\"\n        },\n        \"options\": {\n          \"downloadAttachments\": true,\n          \"dataPropertyAttachmentsPrefixName\": \"attachment_\"\n        },\n        \"operation\": \"getAll\",\n        \"returnAll\": true\n      },\n      \"credentials\": {\n        \"gmailOAuth2\": {\n          \"id\": \"PPgHF95PrpAMBlbG\",\n          \"name\": \"Gmail account\"\n        }\n      },\n      \"typeVersion\": 2.1\n    },\n    {\n      \"id\": \"6d5b2c1b-657d-44bf-980d-fd428fd8d832\",\n      \"name\": \"Read PDF email attachments\",\n      \"type\": \"n8n-nodes-base.readPDF\",\n      \"onError\": \"continueErrorOutput\",\n      \"position\": [\n        120,\n        -80\n      ],\n      \"parameters\": {},\n      \"notesInFlow\": false,\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"3166f45c-306f-483a-b2c6-6768abc916a0\",\n      \"name\": \"Is attachment a PDF?\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        -40,\n        0\n      ],\n      \"parameters\": {\n        \"conditions\": {\n          \"string\": [\n            {\n              \"value1\": \"={{ $binary.data.fileExtension }}\",\n              \"value2\": \"pdf\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"866b286a-7b9b-4506-aa6b-d2049b249991\",\n      \"name\": \"Optional filter for emails\",\n      \"type\": \"n8n-nodes-base.filter\",\n      \"position\": [\n        -360,\n        0\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"687c4cd0-ada5-4dc1-8707-1a9c3b551251\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"notEquals\"\n              },\n              \"leftValue\": \"={{ $json.to.value[0].address }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"56133dba-bc93-4f65-be42-995164a45c03\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1600,\n        -340\n      ],\n      \"parameters\": {\n        \"width\": 440,\n        \"height\": 880,\n        \"content\": \"## Gmail PDF Invoice/Receipt Classifier & Google Drive Uploader (via n8n & OpenAI)\\n\\n_**DISCLAIMER**: AI classification isn't perfect. Always double-check that the correct documents were identified and uploaded._\\n\\nThis n8n workflow, triggered via a webhook, scans your Gmail for emails within a specified date range, extracts PDF attachments, and uses OpenAI to determine if each PDF matches a defined category (defaulting to \\\"receipt or invoice\\\"). Matched PDFs are then uploaded to a uniquely named Google Drive folder based on the date range. You can customize the classification term (e.g., change \\\"receipt or invoice\\\" to \\\"contract\\\") and optionally have the workflow email the collected PDFs to a specified address.\\n\\n### How it works\\n1.  Triggers via a `Webhook` receiving a start date, end date, and an optional flag to send an email.\\n2.  Creates a dated folder in `Google Drive` (e.g., `invoices_YYYY-MM-DD_YYYY-MM-DD`).\\n3.  Fetches emails with attachments from `Gmail` within the specified date range.\\n4.  Iterates through each attachment, filtering specifically for `PDF` files.\\n5.  Extracts text from each PDF (skipping if the text exceeds token limits set in the `Configure` node).\\n6.  Uses the `OpenAI` node to ask if the PDF content and filename look like the item defined in the `Configure` node's \\\"Match on\\\" field (e.g., \\\"receipt or invoice\\\").\\n7.  If OpenAI responds with \\\"true\\\", the original `PDF` file is uploaded to the `Google Drive` folder created in step 2.\\n8.  If the initial webhook request included the flag to send an email, it aggregates all successfully matched PDFs and sends them via `Gmail` to the address specified in the `Configure` node.\\n\\nWorkflow written by [Tom](https://browsewiz.com)\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"aa5d8126-e2ec-4476-886d-c46379f1c6e2\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -780,\n        -40\n      ],\n      \"parameters\": {\n        \"width\": 260,\n        \"height\": 1000,\n        \"content\": \"## Parameters\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n* **`maxTokenSize`** (Number)\\n    *   **Limits PDF text length** (estimated input tokens) sent to OpenAI for classification. Prevents errors/high costs on long documents.\\n    *   *Default: 8000*\\n\\n*   **`replyTokenSize`** (Number)\\n    *   **Reserves tokens for OpenAI's reply** ('true'/'false'). Ensures total tokens stay within limits.\\n    *   *Default: 50*\\n\\n*   **`Match on`** (String)\\n    *   **The keyword/phrase OpenAI uses** to identify the desired document type (e.g., \\\"receipt or invoice\\\", \\\"contract\\\"). Defines what you're searching for.\\n    *   *Default: \\\"receipt or invoice\\\"*\\n\\n*   **`sendInvoicesTo`** (String)\\n    *   **Recipient email address** for the final collection of matched PDFs. Used only if `sendEmail` is true.\\n    *   *Example: \\\"accounting@example.com\\\"*\\n\\n*   **`sendEmail`** (Boolean)\\n    *   **Turns the final email step on (`true`) or off (`false`)**. Set via the initial webhook trigger. If false, files are only uploaded to Drive.\\n    *   *Example: `true` or `false`*\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Merge\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Is matched\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Webhook\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Create folder\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Configure\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get emails with attachments\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Is matched\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Upload file to folder\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Send email with invoices?\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Create folder\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Configure\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Respond to Webhook\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Is attachment a PDF?\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Read PDF email attachments\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Not a PDF\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Aggregate attachments\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Send to my accountant\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Send to my accountant\": {\n      \"main\": [\n        []\n      ]\n    },\n    \"Upload file to folder\": {\n      \"main\": [\n        []\n      ]\n    },\n    \"Send email with invoices?\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Aggregate attachments\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Optional filter for emails\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Iterate over email attachments\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Read PDF email attachments\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Is text within token limit?\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get emails with attachments\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Optional filter for emails\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Is text within token limit?\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"OpenAI\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Merge\",\n            \"type\": \"main\",\n            \"index\": 1\n          }\n        ],\n        []\n      ]\n    },\n    \"Iterate over email attachments\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Is attachment a PDF?\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "@n8n/n8n-nodes-langchain.openAi",
      "n8n-nodes-base.set",
      "n8n-nodes-base.code",
      "n8n-nodes-base.noOp",
      "n8n-nodes-base.if",
      "n8n-nodes-base.merge",
      "n8n-nodes-base.if",
      "n8n-nodes-base.googleDrive",
      "n8n-nodes-base.webhook",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.googleDrive",
      "n8n-nodes-base.code",
      "n8n-nodes-base.if",
      "n8n-nodes-base.gmail",
      "n8n-nodes-base.gmail",
      "n8n-nodes-base.readPDF",
      "n8n-nodes-base.if",
      "n8n-nodes-base.filter",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote"
    ],
    "trigger": null
  }
}