{
  "source": "1877_Telegram_Stickynote_Automation_Triggered.json",
  "index": 1,
  "content": "{\n  \"id\": \"heyKyETy1uK0xoX4\",\n  \"meta\": {\n    \"instanceId\": \"d00caf92aa0876c596905aea78b35fa33a722cc8e479133822c17064d15c2c1d\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"Optimize Prompt\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"a58be0f5-d11d-4bec-bd8c-0c3a7325b22b\",\n      \"name\": \"When Executed by Another Workflow\",\n      \"type\": \"n8n-nodes-base.executeWorkflowTrigger\",\n      \"position\": [\n        -1880,\n        820\n      ],\n      \"parameters\": {\n        \"inputSource\": \"passthrough\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"67fe408f-e889-4eeb-9e48-f60a579c69f0\",\n      \"name\": \"AI Agent\",\n      \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n      \"position\": [\n        -1600,\n        720\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $json.query }}\",\n        \"options\": {\n          \"systemMessage\": \"Given the user's initial prompt below, please enhance it. Start with a clear, precise instruction at the beginning. Include specific details about the desired context, outcome, length, format, and style. Provide examples of the desired output format, if applicable. Use appropriate leading words or phrases to guide the desired output, especially for code generation. Avoid any vague or imprecise language. Rather than only stating what not to do, provide guidance on what should be done instead. Ensure the revised prompt remains true to the user's original intent. Do not provide examples of desired prompt format, only describe it. Format your response in markdown.\"\n        },\n        \"promptType\": \"define\",\n        \"hasOutputParser\": true\n      },\n      \"typeVersion\": 1.7\n    },\n    {\n      \"id\": \"8a041b31-1873-4559-96d0-35d313bffbbd\",\n      \"name\": \"Telegram3\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"onError\": \"continueErrorOutput\",\n      \"position\": [\n        -1000,\n        820\n      ],\n      \"webhookId\": \"4f57022f-14cf-4c3e-b810-ae9395bf3d04\",\n      \"parameters\": {\n        \"text\": \"={{ $json.text }}\",\n        \"chatId\": \"={{ $('When Executed by Another Workflow').item.json.chat_id }}\",\n        \"additionalFields\": {}\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"Vh36aBswWhClYxBM\",\n          \"name\": \"Telegram account 2\"\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"5161b177-0663-41c5-b778-ac14756f699c\",\n      \"name\": \"OpenAI Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        -1680,\n        860\n      ],\n      \"parameters\": {\n        \"model\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o-mini\"\n        },\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"vIXW5likFrTSZUgz\",\n          \"name\": \"Litellm-account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"d5f36955-74a0-4a9a-b49d-0230d6ee35bf\",\n      \"name\": \"Split into chunks1\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        -1180,\n        820\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Get the entire output of the previous node\\nlet text = $input.all() || '';\\n\\n// Convert the output to a string if it's not already\\nif (typeof text !== 'string') {\\n  text = JSON.stringify(text, null, 2); // Pretty-print JSON objects\\n}\\n\\n// Replace multiple newlines (\\\\n\\\\n+) with a single newline (\\\\n)\\ntext = text.replace(/\\\\n{2,}/g, '\\\\n');\\n\\nconst maxLength = 3072; // Telegram message character limit\\nconst messages = [];\\n\\n// Add an optional header for the first chunk\\nconst header = `# Optimized prompt\\\\n\\\\n`;\\nlet currentText = header + text;\\n\\n// Split the output into chunks of maxLength without splitting words\\nwhile (currentText.length > 0) {\\n  let chunk = currentText.slice(0, maxLength);\\n\\n  // Ensure we don't split in the middle of a word\\n  if (chunk.length === maxLength && currentText[maxLength] !== ' ') {\\n    const lastSpaceIndex = chunk.lastIndexOf(' ');\\n    if (lastSpaceIndex > -1) {\\n      chunk = chunk.slice(0, lastSpaceIndex);\\n    }\\n  }\\n\\n  messages.push(chunk.trim()); // Trim extra whitespace for cleaner output\\n  currentText = currentText.slice(chunk.length).trim(); // Remove the chunk from the remaining text\\n}\\n\\n// Return the split messages in Markdown format\\nreturn messages.map((chunk) => ({ json: { text: `\\\\`\\\\`\\\\`markdown\\\\n${chunk}\\\\n\\\\`\\\\`\\\\`` } }));\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"b22f3481-caeb-4506-8fe0-c7e2597772b9\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"disabled\": true,\n      \"position\": [\n        -2120,\n        600\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 389,\n        \"height\": 381,\n        \"content\": \"## Trigger\\n\\n- Trigger can be anything. For this example the trigger is a call from another workflow and a received Telegram message. \\n\\n- Note that this workflow can be integrated in the middle of another larger workflow.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2bf7ebcc-2d34-4c56-b9de-c930ccb4f30f\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"disabled\": true,\n      \"position\": [\n        -1720,\n        600\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"width\": 489,\n        \"height\": 381,\n        \"content\": \"# Inference / Optimization\\n- Incoming trigger is processed by a LLM with a specific system prompt set aimed at improving the input prompt.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"ccc5f97e-6215-41fc-9633-f57857743282\",\n      \"name\": \"Simple Memory\",\n      \"type\": \"@n8n/n8n-nodes-langchain.memoryBufferWindow\",\n      \"position\": [\n        -1340,\n        860\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1.3\n    },\n    {\n      \"id\": \"3bfb31b6-add3-4d5b-989e-df88d69e07e8\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"disabled\": true,\n      \"position\": [\n        -1220,\n        600\n      ],\n      \"parameters\": {\n        \"width\": 349,\n        \"height\": 381,\n        \"content\": \"# Improved prompt:\\n\\n- Send as a response\\n\\n- Use as input for next nodes\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"a36fdc9d-d000-4120-99e8-53d49edec74a\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"disabled\": true,\n      \"position\": [\n        -2120,\n        1000\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 1249,\n        \"height\": 541,\n        \"content\": \"# Workflow Documentation\\n\\n## Description:\\nThis workflow is designed to optimize prompts by enhancing user inputs for clarity and specificity using AI. The workflow takes a user-provided prompt as input and uses a Natural Language Processing (NLP) model to refine and improve the prompt. The optimized prompt is then sent back to the user, ready for use in further workflows or processes.\\n\\n## Setup:\\n1. This workflow is suitable for users who want to improve their prompts for better communication and understanding in their workflows.\\n2. The workflow utilizes an AI Agent powered by an OpenAI Chat Model to enhance user prompts.\\n3. A Telegram node is used to deliver the optimized prompt back to the user.\\n4. Ensure you have the necessary credentials set up for Telegram and OpenAI accounts.\\n5. Customize the workflow's settings, such as the AI model used for prompt optimization, to suit your requirements.\\n6. Activate the workflow once all configurations are set to start optimizing prompts efficiently.\\n\\n## Expected Outcomes:\\n- Users can provide vague or imprecise prompts as input to the workflow.\\n- The AI Agent will refine and optimize the prompt, adding clarity and specific details.\\n- The optimized prompt will be delivered back to the user via Telegram for further use in workflows or processes.\\n\\nFor more detailed instructions and guidelines on using this workflow, refer to the detailed setup guide above.\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"05beb500-d266-45e7-8f5a-ad3a8c9a72e1\",\n  \"connections\": {\n    \"AI Agent\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split into chunks1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Simple Memory\": {\n      \"ai_memory\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_memory\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Split into chunks1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Telegram3\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When Executed by Another Workflow\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.executeWorkflowTrigger",
      "@n8n/n8n-nodes-langchain.agent",
      "n8n-nodes-base.telegram",
      "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "n8n-nodes-base.code",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote"
    ],
    "trigger": null
  }
}