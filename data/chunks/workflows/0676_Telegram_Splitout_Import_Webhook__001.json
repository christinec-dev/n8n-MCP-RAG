{
  "source": "0676_Telegram_Splitout_Import_Webhook.json",
  "index": 1,
  "content": "{\n  \"nodes\": [\n    {\n      \"id\": \"9320d08a-4868-4103-abdf-3f8f54a7a0a0\",\n      \"name\": \"Webhook\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        0,\n        0\n      ],\n      \"webhookId\": \"9024e29e-9080-4cf5-9a6b-0d918468f195\",\n      \"parameters\": {\n        \"path\": \"ytube\",\n        \"options\": {},\n        \"httpMethod\": \"POST\",\n        \"responseMode\": \"responseNode\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"a5cc8922-8124-4269-9cfd-e891b29cc2b7\",\n      \"name\": \"YouTube Transcript\",\n      \"type\": \"n8n-nodes-youtube-transcription.youtubeTranscripter\",\n      \"position\": [\n        800,\n        0\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"ff3c0fd1-36d8-4d64-b405-0600efd4d93b\",\n      \"name\": \"Split Out\",\n      \"type\": \"n8n-nodes-base.splitOut\",\n      \"position\": [\n        200,\n        260\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fieldToSplitOut\": \"transcript\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"423276e0-81bf-487a-bbdd-26e9b84fa755\",\n      \"name\": \"Respond to Webhook\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        1200,\n        140\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"27344649-8029-48ae-867b-7363d904fc59\",\n      \"name\": \"Telegram\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"position\": [\n        1200,\n        380\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $json.title }}\\n{{ $json.youtubeUrl }}\",\n        \"additionalFields\": {\n          \"parse_mode\": \"HTML\",\n          \"appendAttribution\": false\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"230c0325-d22a-4070-9460-748a6fef48d5\",\n      \"name\": \"Get YouTube URL\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        200,\n        0\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"3ee42e4c-3cee-4934-97e7-64c96b5691ed\",\n              \"name\": \"youtubeUrl\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.body.youtubeUrl }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"420e90c3-9dfa-4f41-825a-9874b5ebe43a\",\n      \"name\": \"YouTube Video ID\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        400,\n        0\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const extractYoutubeId = (url) => {\\n  // Regex pattern that matches both youtu.be and youtube.com URLs\\n  const pattern = /(?:youtube\\\\.com\\\\/(?:[^\\\\/]+\\\\/.+\\\\/|(?:v|e(?:mbed)?)\\\\/|.*[?&]v=)|youtu\\\\.be\\\\/)([^\\\"&?\\\\/\\\\s]{11})/;\\n  const match = url.match(pattern);\\n  return match ? match[1] : null;\\n};\\n\\n// Input URL from previous node\\nconst youtubeUrl = items[0].json.youtubeUrl; // Adjust this based on your workflow\\n\\n// Process the URL and return the video ID\\nreturn [{\\n  json: {\\n    videoId: extractYoutubeId(youtubeUrl)\\n  }\\n}];\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"a4171c3e-1ff2-40de-af7f-b3971a1ebe79\",\n      \"name\": \"Get YouTube Video\",\n      \"type\": \"n8n-nodes-base.youTube\",\n      \"position\": [\n        600,\n        0\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"videoId\": \"={{ $json.videoId }}\",\n        \"resource\": \"video\",\n        \"operation\": \"get\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"73e6bfc5-8b62-4880-acd4-292f2f692540\",\n      \"name\": \"gpt-4o-mini\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        620,\n        440\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"ea14e296-b30c-46f7-b283-746822ae1af4\",\n      \"name\": \"Summarize & Analyze Transcript\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chainLlm\",\n      \"position\": [\n        600,\n        260\n      ],\n      \"parameters\": {\n        \"text\": \"=Please analyze the given text and create a structured summary following these guidelines:\\n\\n1. Break down the content into main topics using Level 2 headers (##)\\n2. Under each header:\\n   - List only the most essential concepts and key points\\n   - Use bullet points for clarity\\n   - Keep explanations concise\\n   - Preserve technical accuracy\\n   - Highlight key terms in bold\\n3. Organize the information in this sequence:\\n   - Definition/Background\\n   - Main characteristics\\n   - Implementation details\\n   - Advantages/Disadvantages\\n4. Format requirements:\\n   - Use markdown formatting\\n   - Keep bullet points simple (no nesting)\\n   - Bold important terms using **term**\\n   - Use tables for comparisons\\n   - Include relevant technical details\\n\\nPlease provide a clear, structured summary that captures the core concepts while maintaining technical accuracy.\\n\\nHere is the text: {{ $json.concatenated_text\\n }}\",\n        \"promptType\": \"define\"\n      },\n      \"typeVersion\": 1.4\n    },\n    {\n      \"id\": \"90e3488f-f854-483e-9106-a5760d0c0457\",\n      \"name\": \"Concatenate\",\n      \"type\": \"n8n-nodes-base.summarize\",\n      \"position\": [\n        400,\n        260\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fieldsToSummarize\": {\n          \"values\": [\n            {\n              \"field\": \"text\",\n              \"separateBy\": \" \",\n              \"aggregation\": \"concatenate\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"9c5c249c-5eeb-4433-ba93-ace4611f4858\",\n      \"name\": \"Response Object\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        960,\n        260\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"bf132004-6636-411f-9d85-0c696fda84c4\",\n              \"name\": \"summary\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.text }}\"\n            },\n            {\n              \"id\": \"63c8d0e3-685c-488a-9b45-363cf52479ea\",\n              \"name\": \"topics\",\n              \"type\": \"array\",\n              \"value\": \"=[]\"\n            },\n            {\n              \"id\": \"171f30cf-34e9-42f3-8735-814024bfde0b\",\n              \"name\": \"title\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Get YouTube Video').item.json.snippet.title }}\"\n            },\n            {\n              \"id\": \"7f26f5a3-e695-49d1-b1e8-9260c31f1b3d\",\n              \"name\": \"description\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Get YouTube Video').item.json.snippet.description }}\"\n            },\n            {\n              \"id\": \"d0594232-cb39-453c-b015-3b039c098e1f\",\n              \"name\": \"id\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Get YouTube Video').item.json.id }}\"\n            },\n            {\n              \"id\": \"17b6ca08-ce89-4467-bd25-0d2d182f7a8b\",\n              \"name\": \"youtubeUrl\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Webhook').item.json.body.youtubeUrl }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Webhook\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get YouTube URL\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Split Out\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Concatenate\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Concatenate\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Summarize & Analyze Transcript\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"gpt-4o-mini\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Summarize & Analyze Transcript\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get YouTube URL\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"YouTube Video ID\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Response Object\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Respond to Webhook\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Telegram\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"YouTube Video ID\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get YouTube Video\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Summarize & Analyze Transcript\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Response Object\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.webhook",
      "n8n-nodes-youtube-transcription.youtubeTranscripter",
      "n8n-nodes-base.splitOut",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.telegram",
      "n8n-nodes-base.set",
      "n8n-nodes-base.code",
      "n8n-nodes-base.youTube",
      "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "@n8n/n8n-nodes-langchain.chainLlm",
      "n8n-nodes-base.summarize",
      "n8n-nodes-base.set"
    ],
    "trigger": null
  }
}