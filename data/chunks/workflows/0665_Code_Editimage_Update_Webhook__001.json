{
  "source": "0665_Code_Editimage_Update_Webhook.json",
  "index": 1,
  "content": "{\n  \"nodes\": [\n    {\n      \"id\": \"bae5d407-9210-4bd0-99a3-3637ee893065\",\n      \"name\": \"When clicking ‘Test workflow’\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        -1440,\n        -280\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"c5a14c8e-4aeb-4a4e-b202-f88e837b6efb\",\n      \"name\": \"Get Variables\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -200,\n        -180\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"b455afe0-2311-4d3f-8751-269624d76cf1\",\n              \"name\": \"coords\",\n              \"type\": \"array\",\n              \"value\": \"={{ $json.candidates[0].content.parts[0].text.parseJson() }}\"\n            },\n            {\n              \"id\": \"92f09465-9a0b-443c-aa72-6d208e4df39c\",\n              \"name\": \"width\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Get Image Info').item.json.size.width }}\"\n            },\n            {\n              \"id\": \"da98ce2a-4600-46a6-b4cb-159ea515cb50\",\n              \"name\": \"height\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Get Image Info').item.json.size.height }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"f24017c9-05bc-4f75-a18c-29efe99bfe0e\",\n      \"name\": \"Get Test Image\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        -1260,\n        -280\n      ],\n      \"parameters\": {\n        \"url\": \"https://www.stonhambarns.co.uk/wp-content/uploads/jennys-ark-petting-zoo-for-website-6.jpg\",\n        \"options\": {}\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"c0f6a9f7-ba65-48a3-8752-ce5d80fe33cf\",\n      \"name\": \"Gemini 2.0 Object Detection\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        -680,\n        -180\n      ],\n      \"parameters\": {\n        \"url\": \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={{\\n{\\n  \\\"contents\\\": [{\\n    \\\"parts\\\":[\\n        {\\\"text\\\": \\\"I want to see all bounding boxes of rabbits in this image.\\\"},\\n        {\\n          \\\"inline_data\\\": {\\n            \\\"mime_type\\\":\\\"image/jpeg\\\",\\n            \\\"data\\\": $input.item.binary.data.data\\n          }\\n        }\\n    ]\\n  }],\\n  \\\"generationConfig\\\": {\\n    \\\"response_mime_type\\\": \\\"application/json\\\",\\n    \\\"response_schema\\\": {\\n      \\\"type\\\": \\\"ARRAY\\\",\\n      \\\"items\\\": {\\n        \\\"type\\\": \\\"OBJECT\\\",\\n        \\\"properties\\\": {\\n          \\\"box_2d\\\": {\\\"type\\\":\\\"ARRAY\\\", \\\"items\\\": { \\\"type\\\": \\\"NUMBER\\\" } },\\n          \\\"label\\\": { \\\"type\\\": \\\"STRING\\\"}\\n        }\\n      }\\n    }\\n  }\\n}\\n}}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"googlePalmApi\"\n      },\n      \"credentials\": {\n        \"googlePalmApi\": {\n          \"id\": \"dSxo6ns5wn658r8N\",\n          \"name\": \"Google Gemini(PaLM) Api account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"edbc1152-4642-4656-9a3a-308dae42bac6\",\n      \"name\": \"Scale Normalised Coords\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        -20,\n        -180\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const { coords, width, height } = $input.first().json;\\n\\nconst scale = 1000;\\nconst scaleCoordX = (val) => (val * width) / scale;\\nconst scaleCoordY = (val) => (val * height) / scale;\\n  \\nconst normalisedOutput = coords\\n  .filter(coord => coord.box_2d.length === 4)\\n  .map(coord => {\\n    return {\\n      xmin: coord.box_2d[1] ? scaleCoordX(coord.box_2d[1]) : coord.box_2d[1],\\n      xmax: coord.box_2d[3] ? scaleCoordX(coord.box_2d[3]) : coord.box_2d[3],\\n      ymin: coord.box_2d[0] ? scaleCoordY(coord.box_2d[0]) : coord.box_2d[0],\\n      ymax: coord.box_2d[2] ? scaleCoordY(coord.box_2d[2]) : coord.box_2d[2],\\n    }\\n  });\\n\\nreturn {\\n  json: {\\n    coords: normalisedOutput\\n  },\\n  binary: $('Get Test Image').first().binary\\n}\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"e0380611-ac7d-48d8-8eeb-35de35dbe56a\",\n      \"name\": \"Draw Bounding Boxes\",\n      \"type\": \"n8n-nodes-base.editImage\",\n      \"position\": [\n        400,\n        -180\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"operation\": \"multiStep\",\n        \"operations\": {\n          \"operations\": [\n            {\n              \"color\": \"#ff00f277\",\n              \"operation\": \"draw\",\n              \"endPositionX\": \"={{ $json.coords[0].xmax }}\",\n              \"endPositionY\": \"={{ $json.coords[0].ymax }}\",\n              \"startPositionX\": \"={{ $json.coords[0].xmin }}\",\n              \"startPositionY\": \"={{ $json.coords[0].ymin }}\"\n            },\n            {\n              \"color\": \"#ff00f277\",\n              \"operation\": \"draw\",\n              \"endPositionX\": \"={{ $json.coords[1].xmax }}\",\n              \"endPositionY\": \"={{ $json.coords[1].ymax }}\",\n              \"startPositionX\": \"={{ $json.coords[1].xmin }}\",\n              \"startPositionY\": \"={{ $json.coords[1].ymin }}\"\n            },\n            {\n              \"color\": \"#ff00f277\",\n              \"operation\": \"draw\",\n              \"endPositionX\": \"={{ $json.coords[2].xmax }}\",\n              \"endPositionY\": \"={{ $json.coords[2].ymax }}\",\n              \"startPositionX\": \"={{ $json.coords[2].xmin }}\",\n              \"startPositionY\": \"={{ $json.coords[2].ymin }}\"\n            },\n            {\n              \"color\": \"#ff00f277\",\n              \"operation\": \"draw\",\n              \"endPositionX\": \"={{ $json.coords[3].xmax }}\",\n              \"endPositionY\": \"={{ $json.coords[3].ymax }}\",\n              \"startPositionX\": \"={{ $json.coords[3].xmin }}\",\n              \"startPositionY\": \"={{ $json.coords[3].ymin }}\"\n            },\n            {\n              \"color\": \"#ff00f277\",\n              \"operation\": \"draw\",\n              \"endPositionX\": \"={{ $json.coords[4].xmax }}\",\n              \"endPositionY\": \"={{ $json.coords[4].ymax }}\",\n              \"startPositionX\": \"={{ $json.coords[4].xmin }}\",\n              \"startPositionY\": \"={{ $json.coords[4].ymin }}\"\n            },\n            {\n              \"color\": \"#ff00f277\",\n              \"operation\": \"draw\",\n              \"cornerRadius\": \"=0\",\n              \"endPositionX\": \"={{ $json.coords[5].xmax }}\",\n              \"endPositionY\": \"={{ $json.coords[5].ymax }}\",\n              \"startPositionX\": \"={{ $json.coords[5].xmin }}\",\n              \"startPositionY\": \"={{ $json.coords[5].ymin }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"52daac1b-5ba3-4302-b47b-df3f410b40fc\",\n      \"name\": \"Get Image Info\",\n      \"type\": \"n8n-nodes-base.editImage\",\n      \"position\": [\n        -1080,\n        -280\n      ],\n      \"parameters\": {\n        \"operation\": \"information\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0d2ab96a-3323-472d-82ff-2af5e7d815a1\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        740,\n        -460\n      ],\n      \"parameters\": {\n        \"width\": 440,\n        \"height\": 380,\n        \"content\": \"Fig 1. Output of Object Detection\\n![](https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/download_1_qmqyyo#full-width)\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"c1806400-57da-4ef2-a50d-6ed211d5df29\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1520,\n        -480\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 600,\n        \"height\": 420,\n        \"content\": \"## 1. Download Test Image\\n[Read more about the HTTP node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest)\\n\\nAny compatible image will do ([see docs](https://ai.google.dev/gemini-api/docs/vision?lang=rest#technical-details-image)) but best if it isn't too busy or the subjects too obscure. Most importantly, you are able to retrieve the width and height as this is required for a later step.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"3ae12a7c-a20f-4087-868e-b118cc09fa9a\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -900,\n        -480\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 560,\n        \"height\": 540,\n        \"content\": \"## 2. Use Prompt-Based Object Detection\\n[Read more about the HTTP node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest)\\n\\nWe've had generalised object detection before ([see my other template using ResNet](https://n8n.io/workflows/2331-build-your-own-image-search-using-ai-object-detection-cdn-and-elasticsearch/)) but being able to prompt for what you're looking for is a very exciting proposition! Not only could this reduce the effort in post-detection filtering but also introduce contextual use-cases such as searching by \\\"emotion\\\", \\\"locality\\\", \\\"anomolies\\\" and many more!\\n\\nI found the the output json schema of `{ \\\"box_2d\\\": { \\\"type\\\": \\\"array\\\", ... } }` works best for Gemini to return coordinates. \"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"35673272-7207-41d1-985e-08032355846e\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -320,\n        -400\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 520,\n        \"height\": 440,\n        \"content\": \"## 3. Scale Coords to Fit Original Image\\n[Read more about the Code node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code/)\\n\\nAccording to the Gemini 2.0 overview on [how it calculates bounding boxes](https://ai.google.dev/gemini-api/docs/models/gemini-v2?_gl=1*187cb6v*_up*MQ..*_ga*MTU1ODkzMDc0Mi4xNzM0NDM0NDg2*_ga_P1DBVKWT6V*MTczNDQzNDQ4Ni4xLjAuMTczNDQzNDQ4Ni4wLjAuMjEzNzc5MjU0Ng..#bounding-box), we'll have to rescale the coordinate values as they are normalised to a 0-1000 range. Nothing a little code node can't help with!\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"d3d4470d-0fe1-47fd-a892-10a19b6a6ecc\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -660,\n        80\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 340,\n        \"height\": 100,\n        \"content\": \"### Q. Why not use the Basic LLM node?\\nAt time of writing, Langchain version does not recognise Gemini 2.0 to be a multimodal model.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"5b2c1eff-6329-4d9a-9d3d-3a48fb3bd753\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        220,\n        -400\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 500,\n        \"height\": 440,\n        \"content\": \"## 4. Draw!\\n[Read more about the Edit Image node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.editimage/)\\n\\nFinally for this demonstration, we can use the \\\"Edit Image\\\" node to draw the bounding boxes on top of the original image. In my test run, I can see Gemini did miss out one of the bunnies but seeing how this is the experimental version we're playing with, it's pretty good to see it doesn't do too bad of a job.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"965d791b-a183-46b0-b2a6-dd961d630c13\",\n      \"name\": \"Sticky Note6\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1960,\n        -740\n      ],\n      \"parameters\": {\n        \"width\": 420,\n        \"height\": 680,\n        \"content\": \"## Try it out!\\n### This n8n template demonstrates how to use Gemini 2.0's new Bounding Box detection capabilities your workflows.\\n\\nThe key difference being this enables prompt-based object detection for images which is pretty powerful for things like contextual search over an image. eg. \\\"Put a bounding box around all adults with children in this image\\\" or \\\"Put a bounding box around cars parked out of bounds of a parking space\\\".\\n\\n## How it works\\n* An image is downloaded via the HTTP node and an \\\"Edit Image\\\" node is used to extract the file's width and height.\\n* The image is then given to the Gemini 2.0 API to parse and return coordinates of the bounding box of the requested subjects. In this demo, we've asked for the AI to identify all bunnies.\\n* The coordinates are then rescaled with the original image's width and height to correctl align them.\\n* Finally to measure the accuracy of the object detection, we use the \\\"Edit Image\\\" node to draw the bounding boxes onto the original image.\\n\\n\\n### Need Help?\\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\\n\\nHappy Hacking!\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Get Variables\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Scale Normalised Coords\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Image Info\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Gemini 2.0 Object Detection\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Test Image\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Image Info\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Draw Bounding Boxes\": {\n      \"main\": [\n        []\n      ]\n    },\n    \"Scale Normalised Coords\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Draw Bounding Boxes\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Gemini 2.0 Object Detection\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Variables\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When clicking ‘Test workflow’\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Test Image\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.manualTrigger",
      "n8n-nodes-base.set",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.code",
      "n8n-nodes-base.editImage",
      "n8n-nodes-base.editImage",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote"
    ],
    "trigger": null
  }
}