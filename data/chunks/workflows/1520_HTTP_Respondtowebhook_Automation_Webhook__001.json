{
  "source": "1520_HTTP_Respondtowebhook_Automation_Webhook.json",
  "index": 1,
  "content": "{\n  \"id\": \"Iz8TMdlc6JhaKkd9\",\n  \"meta\": {\n    \"instanceId\": \"dacfda6d2e1dbefe99a005845405509e9929b16710017f4bd5d2bf758941295c\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"YouTube Video Transcriber\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"a4e2f554-ebae-41df-912a-0d1081fa1736\",\n      \"name\": \"When chat message received\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chatTrigger\",\n      \"position\": [\n        -100,\n        -60\n      ],\n      \"webhookId\": \"70129cbe-1a05-495f-bd92-18d36c1bc260\",\n      \"parameters\": {\n        \"public\": true,\n        \"options\": {\n          \"title\": \"Youtube Video Transcriber 🚀\",\n          \"subtitle\": \"Have a great transcription!  📖\",\n          \"inputPlaceholder\": \"Insert a URL of a YouTube video.  💻\"\n        },\n        \"initialMessages\": \"Give me a URL of a video from YouTube to start! 👍\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"34b2b12e-0eb5-4f59-bd30-e7b595d06b8c\",\n      \"name\": \"Code\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        280,\n        -60\n      ],\n      \"parameters\": {\n        \"language\": \"python\",\n        \"pythonCode\": \"import re\\n\\ndef youtube_video_url_validatior(video_url) -> str:\\n  try:\\n    if not video_url:\\n      return {\\\"text\\\": 'URL from the video is required.', \\\"is_valid\\\": False}\\n    \\n    video_url: str = re.sub(r\\\"\\\\s{2,}\\\", \\\" \\\", video_url.strip())\\n    \\n    if not video_url:\\n      return {\\\"text\\\": 'URL from the video is required.', \\\"is_valid\\\": False}\\n    \\n    if len(video_url) < 25:\\n      return {\\\"text\\\": 'URL is too short to be a valid YouTube URL.', \\\"is_valid\\\": False}\\n    \\n    # if not re.match(r'^[A-Za-z0-9:/._?&=-]+$', video_url):\\n    #   return {\\\"text\\\": 'URL contains invalid characters.', \\\"is_valid\\\": False}\\n    \\n    is_valid: bool = False\\n    \\n    for pattern in [\\n        r'^https?://(?:www\\\\.)?youtube\\\\.com/watch\\\\?v=[\\\\w-]{11}',\\n        r'^https?://youtu\\\\.be/[\\\\w-]{11}',\\n        r'^https?://(?:www\\\\.)?youtube\\\\.com/embed/[\\\\w-]{11}',\\n        r'^https?://(?:www\\\\.)?youtube\\\\.com/v/[\\\\w-]{11}',\\n    ]:\\n        if re.match(pattern, video_url):\\n          is_valid = True\\n          \\n          break\\n    \\n    if not is_valid:\\n      return {\\\"text\\\": 'Invalid YouTube URL format.', \\\"is_valid\\\": False}\\n      \\n    video_url_id: str | None = re.search(r'(?:v=|youtu\\\\.be/|embed/|v/)([\\\\w-]{11})', video_url).group(1)\\n    \\n    if not video_url_id or not re.match(r'^[\\\\w-]{11}$', video_url_id):\\n      return {\\\"text\\\": 'Invalid YouTube video ID.', \\\"is_valid\\\": False}\\n    \\n    return {\\\"text\\\": video_url, \\\"is_valid\\\": True}\\n  except Exception as ex:\\n    raise ex\\n\\nreturn youtube_video_url_validatior(_input.first().json.chatInput)\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"712cbf28-df12-44fc-b54a-bc21e13e55e7\",\n      \"name\": \"If\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        600,\n        -240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"loose\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"b8927a53-2755-4364-84b1-5340c5c31af5\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"true\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.is_valid }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        },\n        \"looseTypeValidation\": true\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"be9e1903-25bc-4f1b-8793-5e657205dd5d\",\n      \"name\": \"Respond to Webhook - Chat Message\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        600,\n        60\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"respondWith\": \"text\",\n        \"responseBody\": \"={{ $json.text }}\"\n      },\n      \"retryOnFail\": true,\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"98bc7747-e688-4683-8686-ca44023f8648\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -200,\n        -240\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 300,\n        \"height\": 420,\n        \"content\": \"## Entry Point\\n\\nThe workflow entry point is the  node chat message.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"7ca94ab6-7306-4b04-8b34-eb9e0937d681\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        180,\n        -240\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 300,\n        \"height\": 420,\n        \"content\": \"## Validation - URL\\n\\nThis node ensures that only a valid youtube video url goes forward.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"c719c022-b55b-42b3-ab5f-36c0e1d62512\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1360,\n        -320\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 460,\n        \"height\": 560,\n        \"content\": \"## Data Structuring\\n\\nHere is the core of the workflow, where structuring is done to get the right format to answer.\\n\\n**NOTE:**\\n\\n1. Users implementing this template must modify the language in the OpenAI prompt to suit their desired output.\\n\\n2. An OpenAI API key is essential and must be properly configured to support data structuring and processing.  \"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"7e1fa50f-7bd3-4bed-8537-969baa4c61de\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        820,\n        -480\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 460,\n        \"height\": 900,\n        \"content\": \"## Supadata\\n\\nSupadata is a powerful tool that converts YouTube video URLs into structured data via a simple API. It efficiently extracts transcriptions, making it ideal for AI training, data analysis, or text-based applications.\\n\\n**NOTE:**\\n\\n1. Users implementing this template must change the language in the query parameter to suit their needs. \\n\\n2. An API key is required and must be configured for the workflow to function properly.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"35bf3191-4113-4a92-85a8-b22d3b2a4134\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -920,\n        -180\n      ],\n      \"parameters\": {\n        \"width\": 640,\n        \"height\": 300,\n        \"content\": \"## Description\\n\\nThis workflow simplifies access to YouTube video content converting into clear and concise transcriptions, ideal for users seeking practicality. It transcribes YouTube videos directly and returns the text, eliminating the need to watch the full video. \\n\\nThe need for this workflow arose from the demands of studying, where, amidst the fast-paced routine of daily life, reading transcribed content proved faster and more efficient for creating summaries than watching entire videos. Often, time constraints make it difficult to watch videos in full, and written text allows for quicker absorption of information. This solution provides a seamless way to access and review content from any YouTube video, regardless of the topic.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2ea0b992-231b-4f6d-9f6f-9f488d266cfb\",\n      \"name\": \"Edit Fields - Respond to Chat Message 2\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1000,\n        180\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"66270798-60eb-4ab8-8572-ab957474e260\",\n              \"name\": \"text\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.error }} - {{ $json.message }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"9846e903-015a-4111-b582-572d473fe4d3\",\n      \"name\": \"Edit Fields - Respond to Chat Message 3\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1900,\n        -320\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"97e0c175-8060-43da-9761-5c25d660c7ed\",\n              \"name\": \"text\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.message.content }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"775e067c-3518-4c64-a939-5f9b9b435b3c\",\n      \"name\": \"Edit Fields - Respond to Chat Message 4\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1900,\n        100\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"66270798-60eb-4ab8-8572-ab957474e260\",\n              \"name\": \"text\",\n              \"type\": \"string\",\n              \"value\": \"=Something went wrong with the data structuring.\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"91e22fcc-79b8-48d2-ba6e-bfb699ed9a07\",\n      \"name\": \"HTTP Request\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"onError\": \"continueErrorOutput\",\n      \"position\": [\n        1000,\n        -100\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api.supadata.ai/v1/youtube/transcript?url={{ $json.text }}&text=true&lang=pt\",\n        \"options\": {\n          \"timeout\": 300000\n        },\n        \"sendHeaders\": true,\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"x-api-key\",\n              \"value\": \"SUPADATA_API_KEY\"\n            }\n          ]\n        }\n      },\n      \"executeOnce\": false,\n      \"notesInFlow\": false,\n      \"retryOnFail\": false,\n      \"typeVersion\": 4.2,\n      \"alwaysOutputData\": false\n    },\n    {\n      \"id\": \"3fce199e-2e95-40a8-a78e-20a25c3f4300\",\n      \"name\": \"OpenAI\",\n      \"type\": \"@n8n/n8n-nodes-langchain.openAi\",\n      \"onError\": \"continueErrorOutput\",\n      \"position\": [\n        1460,\n        20\n      ],\n      \"parameters\": {\n        \"modelId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o-mini-2024-07-18\",\n          \"cachedResultName\": \"GPT-4O-MINI-2024-07-18\"\n        },\n        \"options\": {},\n        \"messages\": {\n          \"values\": [\n            {\n              \"role\": \"system\",\n              \"content\": \"You are an expert in grammar corrections and textual structuring.\\n\\nCorrect the classification of the provided text, adding commas, periods, question marks and other symbols necessary for natural and consistent reading. Do not change any words, just adjust the punctuation according to the grammatical rules and context.\\n\\nOrganize your content using markdown, structuring it with titles, subtitles, lists or other protected elements to clearly highlight the topics and information captured. Leave it in Portuguese and remember to always maintain the original formatting.\\n\\nTextual organization should always be a priority according to the content of the text, as well as the appropriate title, which must make sense.\"\n            },\n            {\n              \"content\": \"={{ $json.content }}\"\n            }\n          ]\n        }\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"GpAe9wonPZjokqpc\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"retryOnFail\": true,\n      \"typeVersion\": 1.8\n    }\n  ],\n  \"active\": true,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"d2f6a7fb-f3e1-462f-8627-7f67cc7bfa5b\",\n  \"connections\": {\n    \"If\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"HTTP Request\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Respond to Webhook - Chat Message\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Code\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"If\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Edit Fields - Respond to Chat Message 3\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Edit Fields - Respond to Chat Message 4\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"HTTP Request\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"OpenAI\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Edit Fields - Respond to Chat Message 2\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When chat message received\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Code\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "@n8n/n8n-nodes-langchain.chatTrigger",
      "n8n-nodes-base.code",
      "n8n-nodes-base.if",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.httpRequest",
      "@n8n/n8n-nodes-langchain.openAi"
    ],
    "trigger": null
  }
}