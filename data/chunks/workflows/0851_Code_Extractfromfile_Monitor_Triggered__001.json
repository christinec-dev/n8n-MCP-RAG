{
  "source": "0851_Code_Extractfromfile_Monitor_Triggered.json",
  "index": 1,
  "content": "{\n  \"meta\": {\n    \"instanceId\": \"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"nodes\": [\n    {\n      \"id\": \"b87cc222-82ec-4b46-9573-68f41d096969\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        640,\n        620\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 740,\n        \"height\": 680,\n        \"content\": \"## 2. Manually Convert XLSX to Markdown\\n[Learn more about the Extract From File node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.extractfromfile/)\\n\\nToday's LLMs cannot parse Excel files directly so the best we can do is to convert the spreadsheet into a format that they can, namely markdown. This conversion is also a good solution for excels which aren't really datasheets - the cells are used like layout elements - which is still common for invoices and purchase orders.\\n\\nTo perform the conversion, we can use the 'Extract from File' node to get the each row from the xlsx and then iterate and concatenate to form our markdown table using the code node.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"c4c55042-02c8-4364-ae7e-d1ec5a75437a\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1400,\n        620\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 640,\n        \"height\": 680,\n        \"content\": \"## 3. Extract Purchase Order Details using AI\\n[Learn more about the Information Extractor](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.information-extractor)\\n\\nData entry is probably the number one reason as to why we need AI/LLMs. This time consuming and menial task can be completed in seconds and with a high degree of accuracy. Here, we ask the AI to extract each event with the term dates to a list of events using structured output.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b9530f93-464b-4116-add7-da218fe8eb12\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -700,\n        -80\n      ],\n      \"parameters\": {\n        \"width\": 460,\n        \"height\": 1400,\n        \"content\": \"## Try it out!\\n### This n8n template imports purchase order submissions from Outlook and converts attached purchase order form in XLSX format into structured output.\\n\\nData entry jobs with user-submitted XLSX forms is a time consuming, incredibly mundane but necessary tasks which in likelihood are inherited and critical to business operation.\\n\\nWhile we could dream of system overhauls and modernisation, the fact is that change is hard. There is another way however -  using n8n and AI!\\n\\n### How it works\\n* An Outlook trigger is used to watch for incoming purchase order forms submitted via a shared inbox.\\n* The email attachment for the submission is a form in xlsx format - like this one https://1drv.ms/x/c/8f1f7dda12b7a145/ETWH8dKwgZ1OiVz7ISUWYf8BwiyihBjXPXEbCYkVi8XDyw?e=WWU2eR - which is imported into the workflow.\\n* The 'Extract from File' node is used with the 'code' node to convert the xlsx file to markdown. This is so our LLM can understand it.\\n* The Information Extractor node is used to read and extract the relevant purchase order details and line items from the form.\\n* A simple validation step is used to check for common errors such as missing PO number or the amounts not matching up. A notification is automated to reply to the buyer if so.\\n* Once validation passes, a confirmation is sent to the buyer and the purchase order structured output can be sent along to internal systems.\\n\\n### How to use\\n* This template only works if you're expecting and receiving forms in XLSX format. These can be invoices, request forms as well as purchase order forms.\\n* Update the Outlook nodes with your email or other emails as required.\\n* What's next? I've omitted the last steps to send to an ERP or accounting system as this is dependent on your org.\\n\\n### Requirements\\n* Outlook for Emails\\n  * Check out how to setup credentials here: https://docs.n8n.io/integrations/builtin/credentials/microsoft/\\n* OpenAI for LLM document understanding and extraction.\\n\\n### Customising the workflow\\n* This template should work for other Excel files. Some will be more complicated than others so experiment with different parsers and extraction tools and strategies.\\n* Customise the Information Extractor Schema to pull out the specific data you need. For example, capture any notes or comments given by the buyer.\\n\\n### Need Help?\\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\\n\\nHappy Hacking!\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f5a2d1e7-f73b-4bfa-8e02-f30db275bbcc\",\n      \"name\": \"Extract Purchase Order Details\",\n      \"type\": \"@n8n/n8n-nodes-langchain.informationExtractor\",\n      \"position\": [\n        1500,\n        920\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $json.table }}\",\n        \"options\": {\n          \"systemPromptTemplate\": \"Capture the values as seen. Do not convert dates.\"\n        },\n        \"schemaType\": \"manual\",\n        \"inputSchema\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"purchase_order_number\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"purchase_order_date\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"purchase_order_total\\\": { \\\"type\\\": \\\"number\\\" },\\n    \\\"vendor_name\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"vendor_address\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"vendor_contact\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"delivery_contact\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"delivery_address\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"delivery_method\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"items\\\": {\\n      \\\"type\\\": \\\"array\\\",\\n      \\\"items\\\": {\\n        \\\"type\\\": \\\"object\\\",\\n        \\\"properties\\\": {\\n          \\\"description\\\": { \\\"type\\\": \\\"string\\\" },\\n          \\\"part_number\\\": { \\\"type\\\": \\\"string\\\" },\\n          \\\"quantity\\\": { \\\"type\\\": \\\"number\\\" },\\n          \\\"unit\\\": { \\\"type\\\": \\\"number\\\" },\\n          \\\"unit_price\\\": { \\\"type\\\": \\\"number\\\" }\\n        }\\n      }\\n    }\\n  }\\n}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0ce545f0-8147-4ad2-bb9e-14ef0b0c26ef\",\n      \"name\": \"Is Excel Document?\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        760,\n        1020\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"f723ab0a-8f2d-4501-8273-fd6455c57cdd\",\n              \"operator\": {\n                \"name\": \"filter.operator.equals\",\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $binary.data.mimeType }}\",\n              \"rightValue\": \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"ccbd9531-66be-4e07-8b73-faf996622f9f\",\n      \"name\": \"Sticky Note7\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -220,\n        460\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 340,\n        \"height\": 140,\n        \"content\": \"### PURCHASE ORDER EXAMPLE\\nThis is the purchase order XLSX which is used an example for this template.\\nhttps://1drv.ms/x/c/8f1f7dda12b7a145/ETWH8dKwgZ1OiVz7ISUWYf8BwiyihBjXPXEbCYkVi8XDyw?e=WWU2eR\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"ef8b00eb-dba6-47dd-a825-1aa5c85ee215\",\n      \"name\": \"Run Checks\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        2160,\n        940\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"049c7aca-7663-4eed-93b4-9eec3760c058\",\n              \"name\": \"has_po_number\",\n              \"type\": \"boolean\",\n              \"value\": \"={{ Boolean($json.output.purchase_order_number) }}\"\n            },\n            {\n              \"id\": \"94d2224a-cf81-4a42-acd0-de5276a5e493\",\n              \"name\": \"has_valid_po_date\",\n              \"type\": \"boolean\",\n              \"value\": \"={{ $json.output.purchase_order_date.toDateTime() < $now.plus({ 'day': 1 }) }}\"\n            },\n            {\n              \"id\": \"a8f69605-dad6-4ec2-a22f-d13ff99e27cd\",\n              \"name\": \"has_items\",\n              \"type\": \"boolean\",\n              \"value\": \"={{ $json.output.items.length > 0 }}\"\n            },\n            {\n              \"id\": \"c11db99e-9cc2-40b7-b3a5-f3c65f88dc13\",\n              \"name\": \"is_math_correct\",\n              \"type\": \"boolean\",\n              \"value\": \"={{\\n$json.output.items.map(item => item.unit_price * item.quantity).sum().round(2) === $json.output.purchase_order_total.round(2) }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"801848cc-558c-4a30-aab5-eb403564b68f\",\n      \"name\": \"Is Valid Purchase Order?\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        2360,\n        940\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"11fa8087-7809-4bc9-9fbe-32bfd35821a6\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"true\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.has_po_number }}\",\n              \"rightValue\": \"\"\n            },\n            {\n              \"id\": \"c45ae85a-e060-4416-aa2c-daf58db8ba0e\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"true\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.has_valid_po_date }}\",\n              \"rightValue\": \"\"\n            },\n            {\n              \"id\": \"d0ae9518-2f4b-43fb-87b1-7108a6a75424\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"true\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.has_items }}\",\n              \"rightValue\": \"\"\n            },\n            {\n              \"id\": \"eed09f78-ce1a-4e09-8940-febcf7e41078\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"true\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.is_math_correct }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"7c7dd7a0-45fe-4549-8341-3b3fd18e1725\",\n      \"name\": \"Extract from File\",\n      \"type\": \"n8n-nodes-base.extractFromFile\",\n      \"position\": [\n        980,\n        920\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"rawData\": true,\n          \"headerRow\": false,\n          \"includeEmptyCells\": true\n        },\n        \"operation\": \"xlsx\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"dfb6b00f-fe50-42d6-8597-8fdcb562714b\",\n      \"name\": \"XLSX to Markdown Table\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1180,\n        920\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const rows = $input.all().map(item => item.json.row);\\nconst maxLength = Math.max(...rows.map(row => row.length));\\n\\nconst table = [\\n  '|' + rows[0].join('|') + '|',\\n  '|' + Array(maxLength).fill(0).map(_ => '-').join('|') + '|',\\n  rows.slice(1, rows.length)\\n    .filter(row => row.some(Boolean))\\n    .map(row =>\\n      '|' + row.join('|') + '|'\\n    ).join('\\\\n')\\n].join('\\\\n')\\n\\nreturn { table }\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"1a3de516-1d21-4664-b2e3-8c8d6ec90ef2\",\n      \"name\": \"OpenAI Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        1600,\n        1080\n      ],\n      \"parameters\": {\n        \"model\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o-mini\"\n        },\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"8gccIjcuf3gvaoEr\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"1a29236f-5eaa-4a38-a0a1-6e19abd77d2c\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2060,\n        620\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 940,\n        \"height\": 680,\n        \"content\": \"## 4. Use Simple Validation to Save Time and Effort\\n[Learn more about the Edit Fields node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set)\\n\\nWith our extracted output, we can run simple validation checks to save on admin time. Common errors such as missing purchase order numbers or miscalculated cost amounts are easy to detect and a quick response can be given. Once validation passes, it's up to you how you use the extracted output next.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"79a39a03-5f71-4021-bcfd-06edbc285e8a\",\n      \"name\": \"Reply Invalid Format\",\n      \"type\": \"n8n-nodes-base.microsoftOutlook\",\n      \"position\": [\n        980,\n        1120\n      ],\n      \"webhookId\": \"9464583e-9505-49ec-865e-58aa1ab3c2ed\",\n      \"parameters\": {\n        \"message\": \"PO rejected due to invalid file format. Please try again with XLSX.\",\n        \"options\": {},\n        \"messageId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $('Outlook Trigger').first().json.id }}\"\n        },\n        \"operation\": \"reply\",\n        \"additionalFields\": {},\n        \"replyToSenderOnly\": true\n      },\n      \"credentials\": {\n        \"microsoftOutlookOAuth2Api\": {\n          \"id\": \"EWg6sbhPKcM5y3Mr\",\n          \"name\": \"Microsoft Outlook account\"\n        }\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"ec973438-4d6c-4d2e-8702-1d195f514528\",\n      \"name\": \"Outlook Trigger\",\n      \"type\": \"n8n-nodes-base.microsoftOutlookTrigger\",\n      \"position\": [\n        -120,\n        920\n      ],\n      \"parameters\": {\n        \"fields\": [\n          \"body\",\n          \"categories\",\n          \"conversationId\",\n          \"from\",\n          \"hasAttachments\",\n          \"internetMessageId\",\n          \"sender\",\n          \"subject\",\n          \"toRecipients\",\n          \"receivedDateTime\",\n          \"webLink\"\n        ],\n        \"output\": \"fields\",\n        \"filters\": {\n          \"hasAttachments\": true,\n          \"foldersToInclude\": []\n        },\n        \"options\": {\n          \"downloadAttachments\": true\n        },\n        \"pollTimes\": {\n          \"item\": [\n            {\n              \"mode\": \"everyHour\"\n            }\n          ]\n        }\n      },\n      \"credentials\": {\n        \"microsoftOutlookOAuth2Api\": {\n          \"id\": \"EWg6sbhPKcM5y3Mr\",\n          \"name\": \"Microsoft Outlook account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"fcb173ce-7dad-497a-9376-9650c2a24a84\",\n      \"name\": \"Reply Rejection\",\n      \"type\": \"n8n-nodes-base.microsoftOutlook\",\n      \"position\": [\n        2580,\n        1040\n      ],\n      \"webhookId\": \"9464583e-9505-49ec-865e-58aa1ab3c2ed\",\n      \"parameters\": {\n        \"message\": \"=PO Rejected due to the following errors:\\n{{\\n[\\n  !$json.has_po_number ? '* PO number was not provided' : '',\\n  !$json.has_valid_po_date ? '* PO date was missing or invalid' : '',\\n  !$json.has_items ? '* No line items detected' : '',\\n  !$json.is_math_correct ? '* Line items prices do not match up to PO total' : ''\\n]\\n  .compact()\\n  .join('\\\\n')\\n}}\",\n        \"options\": {},\n        \"messageId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $('Outlook Trigger').first().json.id }}\"\n        },\n        \"operation\": \"reply\",\n        \"additionalFields\": {},\n        \"replyToSenderOnly\": true\n      },\n      \"credentials\": {\n        \"microsoftOutlookOAuth2Api\": {\n          \"id\": \"EWg6sbhPKcM5y3Mr\",\n          \"name\": \"Microsoft Outlook account\"\n        }\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"64ced193-6b12-4ee9-b1e2-735040648051\",\n      \"name\": \"Reply Accepted\",\n      \"type\": \"n8n-nodes-base.microsoftOutlook\",\n      \"position\": [\n        2580,\n        820\n      ],\n      \"webhookId\": \"9464583e-9505-49ec-865e-58aa1ab3c2ed\",\n      \"parameters\": {\n        \"message\": \"=Thank you for the purchase order.\\nThis is an automated reply.\",\n        \"options\": {},\n        \"messageId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $('Outlook Trigger').first().json.id }}\"\n        },\n        \"operation\": \"reply\",\n        \"additionalFields\": {},\n        \"replyToSenderOnly\": true\n      },\n      \"credentials\": {\n        \"microsoftOutlookOAuth2Api\": {\n          \"id\": \"EWg6sbhPKcM5y3Mr\",\n          \"name\": \"Microsoft Outlook account\"\n        }\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"7bfe0e44-cd5d-4290-ba2e-0064c95bc4e2\",\n      \"name\": \"Do Something with Purchase Order\",\n      \"type\": \"n8n-nodes-base.noOp\",\n      \"position\": [\n        2800,\n        940\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"6f517f2f-6072-46a2-8a9d-cca4e958d601\",\n      \"name\": \"Fix Excel Dates\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1840,\n        920\n      ],\n      \"parameters\": {\n        \"mode\": \"raw\",\n        \"options\": {},\n        \"jsonOutput\": \"={{\\n{\\n  output: {\\n    ...$json.output,\\n    purchase_order_date: $json.output.purchase_order_date\\n      ? new Date((new Date(1900, 0, 1)).getTime() + (Number($json.output.purchase_order_date) - 2) * (24 * 60 * 60 * 1000))\\n      : $json.output.purchase_order_date\\n  }\\n}\\n}}\"\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"f3a31b63-ebcb-4d93-8c5a-f626897b7d68\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -220,\n        620\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 840,\n        \"height\": 680,\n        \"content\": \"## 1. Wait For Incoming Purchase Orders\\n[Read more about the Outlook trigger](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.microsoftoutlooktrigger)\\n\\nOur template starts by watching for new emails to a shared inbox (eg. \\\"purchase-orders@example.com\\\") using the Outlook Trigger node. Our goal is to identify and capture buyer purchase orders so that we can automating validate and use AI to reduce the data entry time and cost at scale.\\n\\nWe can also use the Text Classifier node to validate intent. This ensures we catch valid submissions are not just queries about purchase-orders or replies.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"bb395dfc-2831-4e57-90c9-62f13f84302e\",\n      \"name\": \"Is Submitting a Purchase Order?\",\n      \"type\": \"@n8n/n8n-nodes-langchain.textClassifier\",\n      \"position\": [\n        80,\n        920\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"fallback\": \"other\"\n        },\n        \"inputText\": \"=from: {{ $json.from.emailAddress.name }} <{{ $json.from.emailAddress.address }}>\\nsubject: {{ $json.subject }}\\nmessage:\\n{{ $json.body.content }}\",\n        \"categories\": {\n          \"categories\": [\n            {\n              \"category\": \"is_purchase_order\",\n              \"description\": \"The message's intent is to submit a purchase order\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e52ec2e2-8be5-40ab-b1f8-8d7c0b161e1a\",\n      \"name\": \"Do Nothing\",\n      \"type\": \"n8n-nodes-base.noOp\",\n      \"position\": [\n        420,\n        1040\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"5ca6be4e-bc33-42d7-91bc-d30f7ccfdd25\",\n      \"name\": \"OpenAI Chat Model1\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        180,\n        1080\n      ],\n      \"parameters\": {\n        \"model\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o-mini\",\n          \"cachedResultName\": \"gpt-4o-mini\"\n        },\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"8gccIjcuf3gvaoEr\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Run Checks\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Is Valid Purchase Order?\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Reply Accepted\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Do Something with Purchase Order\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Fix Excel Dates\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Run Checks\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Outlook Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Is Submitting a Purchase Order?\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Extract from File\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"XLSX to Markdown Table\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Extract Purchase Order Details\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Is Excel Document?\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Extract from File\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Reply Invalid Format\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model1\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Is Submitting a Purchase Order?\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"XLSX to Markdown Table\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Extract Purchase Order Details\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Is Valid Purchase Order?\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Reply Accepted\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Reply Rejection\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Extract Purchase Order Details\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Fix Excel Dates\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Is Submitting a Purchase Order?\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Is Excel Document?\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Do Nothing\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "@n8n/n8n-nodes-langchain.informationExtractor",
      "n8n-nodes-base.if",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.set",
      "n8n-nodes-base.if",
      "n8n-nodes-base.extractFromFile",
      "n8n-nodes-base.code",
      "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.microsoftOutlook",
      "n8n-nodes-base.microsoftOutlookTrigger",
      "n8n-nodes-base.microsoftOutlook",
      "n8n-nodes-base.microsoftOutlook",
      "n8n-nodes-base.noOp",
      "n8n-nodes-base.set",
      "n8n-nodes-base.stickyNote",
      "@n8n/n8n-nodes-langchain.textClassifier",
      "n8n-nodes-base.noOp",
      "@n8n/n8n-nodes-langchain.lmChatOpenAi"
    ],
    "trigger": "outlook trigger"
  }
}