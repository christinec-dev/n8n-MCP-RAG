{
  "source": "1728_Code_Filter_Import_Webhook.json",
  "index": 1,
  "content": "{\n  \"id\": \"pPtCy6qPfEv1qNRn\",\n  \"meta\": {\n    \"instanceId\": \"205b3bc06c96f2dc835b4f00e1cbf9a937a74eeb3b47c99d0c30b0586dbf85aa\"\n  },\n  \"name\": \"[1/3 - anomaly detection] [1/2 - KNN classification] Batch upload dataset to Qdrant (crops dataset)\",\n  \"tags\": [\n    {\n      \"id\": \"n3zAUYFhdqtjhcLf\",\n      \"name\": \"qdrant\",\n      \"createdAt\": \"2024-12-10T11:56:59.987Z\",\n      \"updatedAt\": \"2024-12-10T11:56:59.987Z\"\n    }\n  ],\n  \"nodes\": [\n    {\n      \"id\": \"53831410-b4f3-4374-8bdd-c2a33cd873cb\",\n      \"name\": \"When clicking \\u2018Test workflow\\u2019\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        -640,\n        0\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e303ccea-c0e0-4fe5-bd31-48380a0e438f\",\n      \"name\": \"Google Cloud Storage\",\n      \"type\": \"n8n-nodes-base.googleCloudStorage\",\n      \"position\": [\n        820,\n        160\n      ],\n      \"parameters\": {\n        \"resource\": \"object\",\n        \"returnAll\": true,\n        \"bucketName\": \"n8n-qdrant-demo\",\n        \"listFilters\": {\n          \"prefix\": \"agricultural-crops\"\n        },\n        \"requestOptions\": {}\n      },\n      \"credentials\": {\n        \"googleCloudStorageOAuth2Api\": {\n          \"id\": \"fn0sr7grtfprVQvL\",\n          \"name\": \"Google Cloud Storage account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"737bdb15-61cf-48eb-96af-569eb5986ee8\",\n      \"name\": \"Get fields for Qdrant\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1080,\n        160\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"10d9147f-1c0c-4357-8413-3130829c2e24\",\n              \"name\": \"=publicLink\",\n              \"type\": \"string\",\n              \"value\": \"=https://storage.googleapis.com/{{ $json.bucket }}/{{ $json.selfLink.split('/').splice(-1) }}\"\n            },\n            {\n              \"id\": \"ff9e6a0b-e47a-4550-a13b-465507c75f8f\",\n              \"name\": \"cropName\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.id.split('/').slice(-3, -2)[0].toLowerCase()}}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"2b18ed0c-38d3-49e9-be3d-4f7b35f4d9e5\",\n      \"name\": \"Qdrant cluster variables\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -360,\n        0\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"58b7384d-fd0c-44aa-9f8e-0306a99be431\",\n              \"name\": \"qdrantCloudURL\",\n              \"type\": \"string\",\n              \"value\": \"=https://152bc6e2-832a-415c-a1aa-fb529f8baf8d.eu-central-1-0.aws.cloud.qdrant.io\"\n            },\n            {\n              \"id\": \"e34c4d88-b102-43cc-a09e-e0553f2da23a\",\n              \"name\": \"collectionName\",\n              \"type\": \"string\",\n              \"value\": \"=agricultural-crops\"\n            },\n            {\n              \"id\": \"33581e0a-307f-4380-9533-615791096de7\",\n              \"name\": \"VoyageEmbeddingsDim\",\n              \"type\": \"number\",\n              \"value\": 1024\n            },\n            {\n              \"id\": \"6e390343-2cd2-4559-aba9-82b13acb7f52\",\n              \"name\": \"batchSize\",\n              \"type\": \"number\",\n              \"value\": 4\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"f88d290e-3311-4322-b2a5-1350fc1f8768\",\n      \"name\": \"Embed crop image\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2120,\n        160\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.voyageai.com/v1/multimodalembeddings\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={{\\n{\\n \\\"inputs\\\": $json.batchVoyage,\\n \\\"model\\\": \\\"voyage-multimodal-3\\\",\\n \\\"input_type\\\": \\\"document\\\"\\n}\\n}}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\"\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"Vb0RNVDnIHmgnZOP\",\n          \"name\": \"Voyage API\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"250c6a8d-f545-4037-8069-c834437bbe15\",\n      \"name\": \"Create Qdrant Collection\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        320,\n        160\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}\",\n        \"method\": \"PUT\",\n        \"options\": {},\n        \"jsonBody\": \"={{\\n{\\n \\\"vectors\\\": {\\n \\\"voyage\\\": { \\n \\\"size\\\": $('Qdrant cluster variables').first().json.VoyageEmbeddingsDim, \\n \\\"distance\\\": \\\"Cosine\\\" \\n } \\n }\\n}\\n}}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"qdrantApi\"\n      },\n      \"credentials\": {\n        \"qdrantApi\": {\n          \"id\": \"it3j3hP9FICqhgX6\",\n          \"name\": \"QdrantApi account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"20b612ff-4794-43ef-bf45-008a16a2f30f\",\n      \"name\": \"Check Qdrant Collection Existence\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        -100,\n        0\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $json.qdrantCloudURL }}/collections/{{ $json.collectionName }}/exists\",\n        \"options\": {},\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"qdrantApi\"\n      },\n      \"credentials\": {\n        \"qdrantApi\": {\n          \"id\": \"it3j3hP9FICqhgX6\",\n          \"name\": \"QdrantApi account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"c067740b-5de3-452e-a614-bf14985a73a0\",\n      \"name\": \"Batches in the API's format\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1860,\n        160\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"f14db112-6f15-4405-aa47-8cb56bb8ae7a\",\n              \"name\": \"=batchVoyage\",\n              \"type\": \"array\",\n              \"value\": \"={{ $json.batch.map(item => ({ \\\"content\\\": ([{\\\"type\\\": \\\"image_url\\\", \\\"image_url\\\": item[\\\"publicLink\\\"]}])}))}}\"\n            },\n            {\n              \"id\": \"3885fd69-66f5-4435-86a4-b80eaa568ac1\",\n              \"name\": \"=batchPayloadQdrant\",\n              \"type\": \"array\",\n              \"value\": \"={{ $json.batch.map(item => ({\\\"crop_name\\\":item[\\\"cropName\\\"], \\\"image_path\\\":item[\\\"publicLink\\\"]})) }}\"\n            },\n            {\n              \"id\": \"8ea7a91e-af27-49cb-9a29-41dae15c4e33\",\n              \"name\": \"uuids\",\n              \"type\": \"array\",\n              \"value\": \"={{ $json.uuids }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"bf9a9532-db64-4c02-b91d-47e708ded4d3\",\n      \"name\": \"Batch Upload to Qdrant\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2320,\n        160\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/points\",\n        \"method\": \"PUT\",\n        \"options\": {},\n        \"jsonBody\": \"={{\\n{\\n \\\"batch\\\": {\\n \\\"ids\\\" : $('Batches in the API\\\\'s format').item.json.uuids,\\n \\\"vectors\\\": {\\\"voyage\\\": $json.data.map(item => item[\\\"embedding\\\"]) },\\n \\\"payloads\\\": $('Batches in the API\\\\'s format').item.json.batchPayloadQdrant\\n }\\n}\\n}}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"qdrantApi\"\n      },\n      \"credentials\": {\n        \"qdrantApi\": {\n          \"id\": \"it3j3hP9FICqhgX6\",\n          \"name\": \"QdrantApi account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"3c30373f-c84c-405f-bb84-ec8b4c7419f4\",\n      \"name\": \"Split in batches, generate uuids for Qdrant points\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1600,\n        160\n      ],\n      \"parameters\": {\n        \"language\": \"python\",\n        \"pythonCode\": \"import uuid\\n\\ncrops = [item.json for item in _input.all()]\\nbatch_size = int(_('Qdrant cluster variables').first()['json']['batchSize'])\\n\\ndef split_into_batches_add_uuids(array, batch_size):\\n return [\\n {\\n \\\"batch\\\": array[i:i + batch_size],\\n \\\"uuids\\\": [str(uuid.uuid4()) for j in range(len(array[i:i + batch_size]))]\\n }\\n for i in range(0, len(array), batch_size)\\n ]\\n\\n# Split crops into batches\\nbatched_crops = split_into_batches_add_uuids(crops, batch_size)\\n\\nreturn batched_crops\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"2b028f8c-0a4c-4a3a-9e2b-14b1c2401c6d\",\n      \"name\": \"If collection exists\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        120,\n        0\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"2104b862-667c-4a34-8888-9cb81a2e10f8\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"true\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.result.exists }}\",\n              \"rightValue\": \"true\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"768793f6-391e-4cc9-b637-f32ee2f77156\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        500,\n        340\n      ],\n      \"parameters\": {\n        \"width\": 280,\n        \"height\": 200,\n        \"content\": \"In the next workflow, we're going to use Qdrant to get the number of images belonging to each crop type defined by `crop_name` (for example, *\\\"cucumber\\\"*). \\nTo get this information about counts in payload fields, we need to create an index on that field to optimise the resources (it needs to be done once). That's what is happening here\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0c8896f7-8c57-4add-bc4d-03c4a774bdf1\",\n      \"name\": \"Payload index on crop_name\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        500,\n        160\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/index\",\n        \"method\": \"PUT\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n \\\"field_name\\\": \\\"crop_name\\\",\\n \\\"field_schema\\\": \\\"keyword\\\"\\n}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"qdrantApi\"\n      },\n      \"credentials\": {\n        \"qdrantApi\": {\n          \"id\": \"it3j3hP9FICqhgX6\",\n          \"name\": \"QdrantApi account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"342186f6-41bf-46be-9be8-a9b1ca290d55\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -360,\n        -360\n      ],\n      \"parameters\": {\n        \"height\": 300,\n        \"content\": \"Setting up variables\\n1) Cloud URL - to connect to Qdrant Cloud (your personal cluster URL)\\n2) Collection name in Qdrant\\n3) Size of Voyage embeddings (needed for collection creation in Qdrant) <this one should not be changed unless the embedding model is changed>\\n4) Batch size for batch embedding/batch uploading to Qdrant \"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"fae9248c-dbcc-4b6d-b977-0047f120a587\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -100,\n        -220\n      ],\n      \"parameters\": {\n        \"content\": \"In Qdrant, you can create a collection once; if you try to create it two times with the same name, you'll get an error, so I am adding here a check if a collection with this name exists already\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f7aea242-3d98-4a1c-a98a-986ac2b4928b\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        180,\n        340\n      ],\n      \"parameters\": {\n        \"height\": 280,\n        \"content\": \"If a collection with the name set up in variables doesn't exist yet, I create an empty one; \\n\\nCollection will contain [named vectors](https://qdrant.tech/documentation/concepts/vectors/#named-vectors), with a name *\\\"voyage\\\"*\\nFor these named vectors, I define two parameters:\\n1) Vectors size (in our case, Voyage embeddings size)\\n2) Similarity metric to compare embeddings: in our case, **\\\"Cosine\\\"**.\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b84045c1-f66a-4543-8d42-1e76de0b6e91\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        800,\n        -280\n      ],\n      \"parameters\": {\n        \"height\": 400,\n        \"content\": \"Now it's time to embed & upload to Qdrant our image datasets;\\nBoth of them, [crops](https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification) and [lands](https://www.kaggle.com/datasets/apollo2506/landuse-scene-classification) were uploaded to our Google Cloud Storage bucket, and in this workflow we're fetching **the crops dataset** (for lands it will be a nearly identical workflow, up to variable names)\\n(you should replace it with your image datasets)\\n\\nDatasets consist of **image URLs**; images are grouped by folders based on their class. For example, we have a system of subfolders like *\\\"tomato\\\"* and *\\\"cucumber\\\"* for the crops dataset with image URLs of the respective class.\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"255dfad8-c545-4d75-bc9c-529aa50447a9\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1080,\n        -140\n      ],\n      \"parameters\": {\n        \"height\": 240,\n        \"content\": \"Google Storage node returns **mediaLink**, which can be used directly for downloading images; however, we just need a public image URL so that Voyage API can process it; so here we construct this public link and extract a crop name from the folder in which image was stored (for example, *\\\"cucumber\\\"*)\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"a6acce75-cce0-4de3-bc64-37592c97359b\",\n      \"name\": \"Sticky Note6\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1600,\n        -80\n      ],\n      \"parameters\": {\n        \"height\": 180,\n        \"content\": \"I regroup images into batches of `batchSize` size and, to make batch upload to Qdrant possible, generate UUIDs to use them as batch [point IDs](https://qdrant.tech/documentation/concepts/points/#point-ids) (Qdrant doesn't set up id's for the user; users have to choose them themselves)\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"cab3cc83-b50c-41f4-8d51-59e04bba5556\",\n      \"name\": \"Sticky Note7\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1340,\n        -60\n      ],\n      \"parameters\": {\n        \"content\": \"Since we build anomaly detection based on the crops dataset, to test it properly, I didn't upload to Qdrant pictures of tomatoes at all; I filter them out here\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e5cdcce5-efdc-41f2-9796-656bd345f783\",\n      \"name\": \"Sticky Note9\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1860,\n        -100\n      ],\n      \"parameters\": {\n        \"height\": 200,\n        \"content\": \"Since Voyage API requires a [specific json structure](https://docs.voyageai.com/reference/multimodal-embeddings-api) for batch embeddings, as does [Qdrant's API for uploading points in batches](https://api.qdrant.tech/api-reference/points/upsert-points), I am adapting the structure of jsons\\n\\n[NB] - [payload = meta data in Qdrant]\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"a7f15c44-3d5c-4b43-bfb2-94fe27a32071\",\n      \"name\": \"Sticky Note11\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2120,\n        20\n      ],\n      \"parameters\": {\n        \"width\": 180,\n        \"height\": 80,\n        \"content\": \"Embedding images with Voyage model (mind `input_type`)\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"01b92e7e-d954-4d58-85b1-109c336546c4\",\n      \"name\": \"Filtering out tomato to test anomalies\",\n      \"type\": \"n8n-nodes-base.filter\",\n      \"position\": [\n        1340,\n        160\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"f7953ae2-5333-4805-abe5-abf6da645c5e\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"notEquals\"\n              },\n              \"leftValue\": \"={{ $json.cropName }}\",\n              \"rightValue\": \"tomato\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"8d564817-885e-453a-a087-900b34b84d9c\",\n      \"name\": \"Sticky Note8\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1160,\n        -280\n      ],\n      \"parameters\": {\n        \"width\": 440,\n        \"height\": 460,\n        \"content\": \"## Batch Uploading Dataset to Qdrant \\n### This template imports dataset images from storage, creates embeddings for them in batches, and uploads them to Qdrant in batches. In this particular template, we work with [crops dataset](https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification). However, it's analogous to [lands dataset](https://www.kaggle.com/datasets/apollo2506/landuse-scene-classification), and in general, it's adaptable to any dataset consisting of image URLs (as the following pipelines are).\\n\\n* First, check for an existing Qdrant collection to use; otherwise, create it here. Additionally, when creating the collection, we'll create a [payload index](https://qdrant.tech/documentation/concepts/indexing/#payload-index), which is required for a particular type of Qdrant requests we will use later.\\n* Next, import all (dataset) images from Google Storage but keep only non-tomato-related ones (for anomaly detection testing).\\n* Create (per batch) embeddings for all imported images using the Voyage AI multimodal embeddings API.\\n* Finally, upload the resulting embeddings and image descriptors to Qdrant via batch uploading.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0233d3d0-bbdf-4d5b-a366-53cbfa4b6f9c\",\n      \"name\": \"Sticky Note10\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -860,\n        360\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 540,\n        \"height\": 420,\n        \"content\": \"### For anomaly detection\\n**1. This is the first pipeline to upload (crops) dataset to Qdrant's collection.**\\n2. The second pipeline is to set up cluster (class) centres in this Qdrant collection & cluster (class) threshold scores.\\n3. The third is the anomaly detection tool, which takes any image as input and uses all preparatory work done with Qdrant (crops) collection.\\n\\n### For KNN (k nearest neighbours) classification\\n**1. This is the first pipeline to upload (lands) dataset to Qdrant's collection.**\\n2. The second is the KNN classifier tool, which takes any image as input and classifies it based on queries to the Qdrant (lands) collection.\\n\\n### To recreate both\\nYou'll have to upload [crops](https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification) and [lands](https://www.kaggle.com/datasets/apollo2506/landuse-scene-classification) datasets from Kaggle to your own Google Storage bucket, and re-create APIs/connections to [Qdrant Cloud](https://qdrant.tech/documentation/quickstart-cloud/) (you can use **Free Tier** cluster), Voyage AI API & Google Cloud Storage\\n\\n**In general, pipelines are adaptable to any dataset of images**\\n\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"27776c4a-3bf9-4704-9c13-345b75ffacc0\",\n  \"connections\": {\n    \"Embed crop image\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Batch Upload to Qdrant\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Google Cloud Storage\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get fields for Qdrant\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"If collection exists\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Google Cloud Storage\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Create Qdrant Collection\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get fields for Qdrant\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Filtering out tomato to test anomalies\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Batch Upload to Qdrant\": {\n      \"main\": [\n        []\n      ]\n    },\n    \"Create Qdrant Collection\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Payload index on crop_name\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Qdrant cluster variables\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check Qdrant Collection Existence\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Payload index on crop_name\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Google Cloud Storage\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Batches in the API's format\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Embed crop image\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check Qdrant Collection Existence\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"If collection exists\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When clicking \\u2018Test workflow\\u2019\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Qdrant cluster variables\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Filtering out tomato to test anomalies\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split in batches, generate uuids for Qdrant points\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Split in batches, generate uuids for Qdrant points\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Batches in the API's format\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.manualTrigger",
      "n8n-nodes-base.googleCloudStorage",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.set",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.code",
      "n8n-nodes-base.if",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.filter",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote"
    ],
    "trigger": null
  }
}