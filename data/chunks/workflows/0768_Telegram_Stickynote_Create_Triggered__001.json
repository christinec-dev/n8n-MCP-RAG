{
  "source": "0768_Telegram_Stickynote_Create_Triggered.json",
  "index": 1,
  "content": "{\n  \"meta\": {\n    \"instanceId\": \"b41148c809c7896d124743d940fc0964703e540af66564ef95e25a4ceea61c77\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"nodes\": [\n    {\n      \"id\": \"e87d3723-7e7a-4ff3-bffb-b2bd2096bd34\",\n      \"name\": \"OpenAI Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        1080,\n        260\n      ],\n      \"parameters\": {\n        \"model\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o-mini\"\n        },\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"uFPD9I4pWJ4xUVf7\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"d25bf3ea-0de4-4317-9205-651f8a1a6ba8\",\n      \"name\": \"Basic LLM Chain\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chainLlm\",\n      \"position\": [\n        1060,\n        40\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $json.text }}\",\n        \"messages\": {\n          \"messageValues\": [\n            {\n              \"message\": \"=Okay, I've further refined the system prompt to include only the \\\"content\\\" and \\\"priority\\\" fields in the JSON output for the Todoist tool. Here's the updated prompt:\\n\\n**System Prompt:**\\n\\n```\\nYou are an AI agent acting as a project management assistant. The user will provide you with a task or project description. Your job is to break down this task or project into smaller, manageable sub-tasks. You will then format each sub-task into a JSON object suitable for input to the \\\"Todoist\\\" tool and provide these JSON objects in a list.\\n\\n**Requirements:**\\n\\n1.  **Sub-Task Decomposition:** Break down the task or project provided by the user into logical and actionable sub-tasks. Each sub-task should be self-contained, completable, and measurable.\\n2.  **JSON Format for Todoist:** Format each sub-task as a JSON object with the following structure:\\n\\n    ```json\\n    {\\n      \\\"content\\\": \\\"[Task Description]\\\",\\n      \\\"priority\\\": [Priority Level (1-4, where 4 is highest)]\\n    }\\n    ```\\n\\n    *   `content`: A clear and concise description of the task.\\n    *   `priority`: An integer representing the task priority, ranging from 1 (lowest) to 4 (highest). Consider the importance and urgency of the task when assigning the priority.\\n\\n3.  **Tool Usage - Todoist JSON Output:** After decomposing the project into sub-tasks, you **MUST** format each sub-task into the JSON structure specified above and present all the JSON objects in a Python list. This list will be the direct input to the \\\"Todoist\\\" tool.\\n\\n4.  **Contextual Understanding:** Fully understand the context of the task or project provided by the user. If necessary, ask for additional information or clarification to resolve any ambiguities.\\n\\n5.  **Limitations:**\\n\\n    *   Avoid very general or abstract sub-tasks.\\n    *   Ensure that each sub-task is completable and measurable.\\n    *   When creating sub-tasks, consider the user's skills and resources.\\n    *   Ensure all the output is valid JSON format within a python list\\n\\n**User Input:**\\n\\nThe user will provide you with a task or project description in the following format:\\n\\n```\\nProject Description: [User's Entered Task or Project Description]\\n```\\n\\n**Example:**\\n\\n**User Input:**\\n\\n```\\nProject Description: Plan a team offsite.\\n```\\n\\n**LLM Response:**\\n\\n```python\\n[\\n  {\\n    \\\"content\\\": \\\"Research potential offsite locations.\\\",\\n    \\\"priority\\\": 3\\n  },\\n  {\\n    \\\"content\\\": \\\"Determine the budget for the offsite.\\\",\\n    \\\"priority\\\": 4\\n  },\\n  {\\n    \\\"content\\\": \\\"Send out a survey to gather team preferences.\\\",\\n    \\\"priority\\\": 3\\n  },\\n  {\\n    \\\"content\\\": \\\"Book the chosen venue.\\\",\\n    \\\"priority\\\": 4\\n  },\\n  {\\n    \\\"content\\\": \\\"Plan team-building activities.\\\",\\n    \\\"priority\\\": 2\\n  }\\n]\\n```\\n\\n**Key Changes and Explanations:**\\n\\n*   **Simplified JSON Structure:** The JSON object now only includes `content` and `priority`.\\n*   **Example Updated:** The example response reflects the simplified JSON format.\\n*   **Conciseness:** The prompt is now more concise, focusing only on the necessary fields.\\n\\n**Jinja2 Template Version**\\n\\n```python\\nfrom jinja2 import Template\\n\\ntemplate_string = \\\"\\\"\\\"\\nYou are an AI agent acting as a project management assistant. The user will provide you with a task or project description. Your job is to break down this task or project into smaller, manageable sub-tasks. You will then format each sub-task into a JSON object suitable for input to the \\\"Todoist\\\" tool and provide these JSON objects in a list.\\n\\n**Requirements:**\\n\\n1.  **Sub-Task Decomposition:** Break down the task or project provided by the user into logical and actionable sub-tasks. Each sub-task should be self-contained, completable, and measurable.\\n2.  **JSON Format for Todoist:** Format each sub-task as a JSON object with the following structure:\\n\\n    ```json\\n    {\\n      \\\"content\\\": \\\"[Task Description]\\\",\\n      \\\"priority\\\": [Priority Level (1-4, where 4 is highest)]\\n    }\\n    ```\\n\\n    *   `content`: A clear and concise description of the task.\\n    *   `priority`: An integer representing the task priority, ranging from 1 (lowest) to 4 (highest). Consider the importance and urgency of the task when assigning the priority.\\n\\n3.  **Tool Usage - Todoist JSON Output:** After decomposing the project into sub-tasks, you **MUST** format each sub-task into the JSON structure specified above and present all the JSON objects in a Python list. This list will be the direct input to the \\\"Todoist\\\" tool.\\n\\n4.  **Contextual Understanding:** Fully understand the context of the task or project provided by the user. If necessary, ask for additional information or clarification to resolve any ambiguities.\\n\\n5.  **Limitations:**\\n\\n    *   Avoid very general or abstract sub-tasks.\\n    *   Ensure that each sub-task is completable and measurable.\\n    *   When creating sub-tasks, consider the user's skills and resources.\\n    *   Ensure all the output is valid JSON format within a python list\\n\\n**User Input:**\\n\\nThe user will provide you with a task or project description in the following format:\\n\\n```\\nProject Description: {{ project_description }}\\n```\\n\\n**Example:**\\n\\n**User Input:**\\n\\n```\\nProject Description: Plan a team offsite.\\n```\\n\\n**LLM Response:**\\n\\n```python\\n[\\n  {\\n    \\\"content\\\": \\\"Research potential offsite locations.\\\",\\n    \\\"priority\\\": 3\\n  },\\n  {\\n    \\\"content\\\": \\\"Determine the budget for the offsite.\\\",\\n    \\\"priority\\\": 4\\n  },\\n  {\\n    \\\"content\\\": \\\"Send out a survey to gather team preferences.\\\",\\n    \\\"priority\\\": 3\\n  },\\n  {\\n    \\\"content\\\": \\\"Book the chosen venue.\\\",\\n    \\\"priority\\\": 4\\n  },\\n  {\\n    \\\"content\\\": \\\"Plan team-building activities.\\\",\\n    \\\"priority\\\": 2\\n  }\\n]\\n```\\n\\\"\\\"\\\"\\n\\ntemplate = Template(template_string)\\n\\n# Example Usage\\nproject_description = \\\"Plan a team offsite.\\\"\\nprompt = template.render(project_description=project_description)\\n\\nprint(prompt)\\n```\\n \\n\"\n            }\n          ]\n        },\n        \"promptType\": \"define\",\n        \"hasOutputParser\": true\n      },\n      \"typeVersion\": 1.5\n    },\n    {\n      \"id\": \"ddfe59c5-574c-470b-b2cc-efa05da74972\",\n      \"name\": \"Receive Telegram Messages\",\n      \"type\": \"n8n-nodes-base.telegramTrigger\",\n      \"position\": [\n        -220,\n        -100\n      ],\n      \"webhookId\": \"4e2cd560-ae4e-4ed7-a8ea-984518404e51\",\n      \"parameters\": {\n        \"updates\": [\n          \"message\"\n        ],\n        \"additionalFields\": {}\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"lff3pLERRdQmkmeV\",\n          \"name\": \"Telegram account\"\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"23f2cedd-bcd2-4a94-acc1-8829b30553dc\",\n      \"name\": \"Voice or Text?\",\n      \"type\": \"n8n-nodes-base.switch\",\n      \"position\": [\n        140,\n        -20\n      ],\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"outputKey\": \"Audio\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"af30c479-4542-405f-b315-37c50c4e2bef\",\n                    \"operator\": {\n                      \"type\": \"string\",\n                      \"operation\": \"exists\",\n                      \"singleValue\": true\n                    },\n                    \"leftValue\": \"={{ $json.message.voice.file_id }}\",\n                    \"rightValue\": \"\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"Text\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"a3ca8cd4-fbb2-40b5-829a-24724f2fbc85\",\n                    \"operator\": {\n                      \"type\": \"string\",\n                      \"operation\": \"exists\",\n                      \"singleValue\": true\n                    },\n                    \"leftValue\": \"={{ $json.message.text || \\\"\\\" }}\",\n                    \"rightValue\": \"\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"Error\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"9bcfdee0-2f09-4037-a7b9-689ef392371d\",\n                    \"operator\": {\n                      \"type\": \"string\",\n                      \"operation\": \"exists\",\n                      \"singleValue\": true\n                    },\n                    \"leftValue\": \"error\",\n                    \"rightValue\": \"\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"typeVersion\": 3.2\n    },\n    {\n      \"id\": \"128e8268-a256-4256-8757-9ece8be86d75\",\n      \"name\": \"Fetch Voice Message\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"position\": [\n        500,\n        -120\n      ],\n      \"webhookId\": \"23645237-4943-4c32-b18c-97c410cc3409\",\n      \"parameters\": {\n        \"fileId\": \"={{ $json.message.voice.file_id }}\",\n        \"resource\": \"file\"\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"lff3pLERRdQmkmeV\",\n          \"name\": \"Telegram account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"d8219ba5-bb33-44f5-a9a2-65fd16be335b\",\n      \"name\": \"Transcribe Voice to Text\",\n      \"type\": \"@n8n/n8n-nodes-langchain.openAi\",\n      \"position\": [\n        720,\n        -120\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"resource\": \"audio\",\n        \"operation\": \"translate\"\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"uFPD9I4pWJ4xUVf7\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.8\n    },\n    {\n      \"id\": \"0c5f5568-fd14-4c65-8661-ebc5803158ce\",\n      \"name\": \"Prepare for LLM\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        620,\n        100\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"b324a329-3c49-4f7f-b683-74331b7fe7f8\",\n              \"name\": \"=text\",\n              \"type\": \"string\",\n              \"value\": \"={{$json.message.text}}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"76ed8f5c-59f7-4cb9-9e59-25ac7e9e8c60\",\n      \"name\": \"Extract Tasks\",\n      \"type\": \"@n8n/n8n-nodes-langchain.outputParserStructured\",\n      \"position\": [\n        1220,\n        260\n      ],\n      \"parameters\": {\n        \"jsonSchemaExample\": \"  {\\n    \\\"content\\\": \\\"Send out invitations.\\\",\\n    \\\"priority\\\": 3\\n  }\"\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"7d0dbcb7-aac1-4eea-8f0b-6173148bfd3f\",\n      \"name\": \"Create Todoist Tasks\",\n      \"type\": \"n8n-nodes-base.todoist\",\n      \"position\": [\n        1620,\n        40\n      ],\n      \"parameters\": {\n        \"content\": \"={{ $json.output.content }}\",\n        \"options\": {\n          \"priority\": \"={{ $json.output.priority }}\"\n        },\n        \"project\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"2349786654\",\n          \"cachedResultName\": \"Task\"\n        }\n      },\n      \"credentials\": {\n        \"todoistApi\": {\n          \"id\": \"yqSn5VBXyA4R6hgt\",\n          \"name\": \"Todoist account\"\n        }\n      },\n      \"typeVersion\": 2.1\n    },\n    {\n      \"id\": \"544b3f63-8ac1-4f81-9c24-943df16d9324\",\n      \"name\": \"Send Confirmation\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"position\": [\n        1880,\n        40\n      ],\n      \"webhookId\": \"5699aecd-e061-4b7f-af7b-4a23eb7201c6\",\n      \"parameters\": {\n        \"text\": \"=Task : {{ $json.content }} Task Link :{{ $json.url }}\",\n        \"chatId\": \"={{ $('Receive Telegram Messages').item.json.message.chat.id }}\",\n        \"additionalFields\": {}\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"lff3pLERRdQmkmeV\",\n          \"name\": \"Telegram account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"b244f935-3047-4581-84ac-b01b2f962c1d\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -260,\n        -240\n      ],\n      \"parameters\": {\n        \"width\": 260,\n        \"height\": 320,\n        \"content\": \" \\n**This workflow listens for incoming voice or text messages from Telegram users.** \"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"fa99930d-8e75-4f1e-aa9b-47c38e611538\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        440,\n        -220\n      ],\n      \"parameters\": {\n        \"width\": 460,\n        \"height\": 260,\n        \"content\": \" **Voice messages are fetched from Telegram and transcribed into text using OpenAI's Whisper API.**  \"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"beb460c9-0412-40c4-a3cf-76660eb0e1b8\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1000,\n        -60\n      ],\n      \"parameters\": {\n        \"width\": 380,\n        \"height\": 440,\n        \"content\": \" \\n**The LLM (OpenAI Chat Model) analyzes the text and breaks it down into tasks and sub-tasks, formatted for Todoist.**  \"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Extract Tasks\": {\n      \"ai_outputParser\": [\n        [\n          {\n            \"node\": \"Basic LLM Chain\",\n            \"type\": \"ai_outputParser\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Voice or Text?\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Fetch Voice Message\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Prepare for LLM\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Basic LLM Chain\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Create Todoist Tasks\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Prepare for LLM\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Basic LLM Chain\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Basic LLM Chain\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Fetch Voice Message\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Transcribe Voice to Text\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Create Todoist Tasks\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Send Confirmation\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Transcribe Voice to Text\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Basic LLM Chain\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Receive Telegram Messages\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Voice or Text?\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "@n8n/n8n-nodes-langchain.chainLlm",
      "n8n-nodes-base.telegramTrigger",
      "n8n-nodes-base.switch",
      "n8n-nodes-base.telegram",
      "@n8n/n8n-nodes-langchain.openAi",
      "n8n-nodes-base.set",
      "@n8n/n8n-nodes-langchain.outputParserStructured",
      "n8n-nodes-base.todoist",
      "n8n-nodes-base.telegram",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote"
    ],
    "trigger": null
  }
}