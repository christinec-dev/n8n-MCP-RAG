{
  "source": "0815_Telegram_Code_Update_Triggered.json",
  "index": 1,
  "content": "{\n  \"meta\": {\n    \"instanceId\": \"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"nodes\": [\n    {\n      \"id\": \"5d6a5a45-8aa8-4c34-aa10-5dd85f05de9d\",\n      \"name\": \"Human Handoff using Send and Wait\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"position\": [\n        1580,\n        1040\n      ],\n      \"webhookId\": \"d2bbc82f-0509-470a-af4d-9d92cfed4d5f\",\n      \"parameters\": {\n        \"chatId\": \"=<human chat id>\",\n        \"message\": \"=chatId: {{ $('Handoff Subworkflow').first().json.chatId }}\\nsessionId: {{ $('Handoff Subworkflow').first().json.sessionId }}\\nuser: {{ $('Handoff Subworkflow').first().json.username }} ({{ $('Handoff Subworkflow').item.json.userId }})\\n\\nSummary:\\n{{ $('Handoff Subworkflow').item.json.summary }}\\n\\n---\\nThis user has now been handed off to a human.\\nClick the button to return user to bot.\",\n        \"options\": {},\n        \"operation\": \"sendAndWait\",\n        \"responseType\": \"freeText\"\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"XVBXGXSsaCjU2DOS\",\n          \"name\": \"jimleuk_handoff_bot\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"5d2f73ff-b233-4456-b34d-d5a5454dabda\",\n      \"name\": \"Set Interaction to Bot\",\n      \"type\": \"n8n-nodes-base.redis\",\n      \"position\": [\n        1780,\n        1040\n      ],\n      \"parameters\": {\n        \"key\": \"=handoff_{{ $('Handoff Subworkflow').first().json.sessionId }}_state\",\n        \"value\": \"bot\",\n        \"keyType\": \"string\",\n        \"operation\": \"set\"\n      },\n      \"credentials\": {\n        \"redis\": {\n          \"id\": \"zU4DA70qSDrZM1El\",\n          \"name\": \"Redis account (localhost)\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f799e213-f3ed-4479-aade-7a7c38eb5792\",\n      \"name\": \"Set Interaction to Human\",\n      \"type\": \"n8n-nodes-base.redis\",\n      \"position\": [\n        1380,\n        1040\n      ],\n      \"parameters\": {\n        \"key\": \"=handoff_{{ $json.sessionId }}_state\",\n        \"value\": \"=human\",\n        \"keyType\": \"string\",\n        \"operation\": \"set\"\n      },\n      \"credentials\": {\n        \"redis\": {\n          \"id\": \"zU4DA70qSDrZM1El\",\n          \"name\": \"Redis account (localhost)\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"059c9b8c-ba50-4bdd-8969-6f5f35bba304\",\n      \"name\": \"Get Interaction State\",\n      \"type\": \"n8n-nodes-base.redis\",\n      \"position\": [\n        -800,\n        820\n      ],\n      \"parameters\": {\n        \"key\": \"=handoff_{{ $json.message.chat.id }}_state\",\n        \"options\": {},\n        \"operation\": \"get\",\n        \"propertyName\": \"data\"\n      },\n      \"credentials\": {\n        \"redis\": {\n          \"id\": \"zU4DA70qSDrZM1El\",\n          \"name\": \"Redis account (localhost)\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"8afd48ff-478d-4092-ac88-fb2e435ded00\",\n      \"name\": \"Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        -280,\n        640\n      ],\n      \"parameters\": {\n        \"model\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o-mini\"\n        },\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"8gccIjcuf3gvaoEr\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"19c5ef66-410d-47fd-9b2a-19776c53a681\",\n      \"name\": \"Memory\",\n      \"type\": \"@n8n/n8n-nodes-langchain.memoryRedisChat\",\n      \"position\": [\n        -160,\n        640\n      ],\n      \"parameters\": {\n        \"sessionKey\": \"=handoff_{{ $('Telegram Trigger').first().json.message.chat.id }}_chat\",\n        \"sessionIdType\": \"customKey\"\n      },\n      \"credentials\": {\n        \"redis\": {\n          \"id\": \"zU4DA70qSDrZM1El\",\n          \"name\": \"Redis account (localhost)\"\n        }\n      },\n      \"typeVersion\": 1.4\n    },\n    {\n      \"id\": \"814e464d-a2e0-4ae1-83d1-df3732d3b430\",\n      \"name\": \"Handoff Subworkflow\",\n      \"type\": \"n8n-nodes-base.executeWorkflowTrigger\",\n      \"position\": [\n        980,\n        1040\n      ],\n      \"parameters\": {\n        \"workflowInputs\": {\n          \"values\": [\n            {\n              \"name\": \"chatId\"\n            },\n            {\n              \"name\": \"sessionId\"\n            },\n            {\n              \"name\": \"userId\"\n            },\n            {\n              \"name\": \"username\"\n            },\n            {\n              \"name\": \"summary\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"53c311ca-b7ad-4705-97c9-f6438a6c6b4e\",\n      \"name\": \"Telegram Trigger\",\n      \"type\": \"n8n-nodes-base.telegramTrigger\",\n      \"position\": [\n        -1000,\n        820\n      ],\n      \"webhookId\": \"e905dd99-eefc-48ff-a62d-c7078e9bb216\",\n      \"parameters\": {\n        \"updates\": [\n          \"message\"\n        ],\n        \"additionalFields\": {}\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"XVBXGXSsaCjU2DOS\",\n          \"name\": \"jimleuk_handoff_bot\"\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"ea54c9f7-8ebc-4146-a4ec-6d05957f340d\",\n      \"name\": \"Send Response\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"position\": [\n        1400,\n        340\n      ],\n      \"webhookId\": \"55ecb0ba-72c8-4f16-a6c8-0c0bb8582554\",\n      \"parameters\": {\n        \"text\": \"=Thank you. I've now transferred you to a human agent who will reach out to you. Once complete, you can come back to this chat to finish the process.\",\n        \"chatId\": \"={{ $('Telegram Trigger').first().json.message.chat.id }}\",\n        \"additionalFields\": {\n          \"appendAttribution\": false\n        }\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"XVBXGXSsaCjU2DOS\",\n          \"name\": \"jimleuk_handoff_bot\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"7f895e2a-7aee-40be-a8b7-b2b0ff469b2d\",\n      \"name\": \"Switch Interaction\",\n      \"type\": \"n8n-nodes-base.switch\",\n      \"position\": [\n        -620,\n        820\n      ],\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"outputKey\": \"Human\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"6bc61072-f7cf-4a6d-af81-36abede59d47\",\n                    \"operator\": {\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $json.data }}\",\n                    \"rightValue\": \"human\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"Bot\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"6882db64-b522-4895-8949-d98d87b53b49\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $json.data }}\",\n                    \"rightValue\": \"bot\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            }\n          ]\n        },\n        \"options\": {\n          \"fallbackOutput\": \"extra\",\n          \"renameFallbackOutput\": \"Onboarding\"\n        }\n      },\n      \"typeVersion\": 3.2\n    },\n    {\n      \"id\": \"df203358-e6c7-4014-8e2b-ef934e331215\",\n      \"name\": \"Information Extractor\",\n      \"type\": \"@n8n/n8n-nodes-langchain.informationExtractor\",\n      \"position\": [\n        440,\n        460\n      ],\n      \"parameters\": {\n        \"text\": \"={{\\n$json.data\\n  .reverse()\\n  .slice(0, 5)\\n  .map(item => item.parseJson())\\n  .map(item => `${item.type}: ${item.data.content}`)\\n  .join('\\\\n')\\n}}\",\n        \"options\": {\n          \"systemPromptTemplate\": \"Analyse the conversation history and extract the required customer details. If not found, leave blank.\"\n        },\n        \"attributes\": {\n          \"attributes\": [\n            {\n              \"name\": \"firstname\",\n              \"required\": true,\n              \"description\": \"first name of customer\"\n            },\n            {\n              \"name\": \"lastname\",\n              \"required\": true,\n              \"description\": \"last name of customer\"\n            },\n            {\n              \"name\": \"address_and_postcode\",\n              \"required\": true,\n              \"description\": \"address and postcode of customer\"\n            },\n            {\n              \"name\": \"reason_for_call\",\n              \"required\": true,\n              \"description\": \"a summary of the reason for the call\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"35bc11d2-6024-425b-ac67-a61ff26b9478\",\n      \"name\": \"OpenAI Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        420,\n        640\n      ],\n      \"parameters\": {\n        \"model\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o-mini\"\n        },\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"8gccIjcuf3gvaoEr\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"20d71c5f-6e84-4b45-b324-0706ecd3a681\",\n      \"name\": \"With Defaults\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        760,\n        460\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"return {\\n  \\\"firstname\\\": \\\"\\\",\\n  \\\"lastname\\\": \\\"\\\",\\n  \\\"address_and_postcode\\\": \\\"\\\",\\n  \\\"reason_for_call\\\": \\\"\\\",\\n  ...$input.item.json.output,\\n}\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"76344f79-1afa-4fd9-9c01-ca3818f62f37\",\n      \"name\": \"Has All Criteria?\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        920,\n        460\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"96d4a43f-aa0f-486a-b692-0105196d099a\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"true\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ Object.values($json).every(val => Boolean(val)) }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"f76c1032-036b-46ad-91da-023d5af931fd\",\n      \"name\": \"Onboarding Agent\",\n      \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n      \"position\": [\n        -240,\n        460\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $('Telegram Trigger').first().json.message.text }}\",\n        \"options\": {\n          \"systemMessage\": \"=You are a prescreen assistant whose task is to get the following details from a customer before handing them over to a human agent.\\n* first name\\n* last name\\n* address and postcode\\n* reason for calling - capture exact wording if possible.\\n\\nOnce all data is gathered, hand the user off to a human agent.\"\n        },\n        \"promptType\": \"define\"\n      },\n      \"typeVersion\": 1.8\n    },\n    {\n      \"id\": \"0a5b19a5-9c19-436c-b1d3-23d962efd23e\",\n      \"name\": \"Get Onboarding Chat History\",\n      \"type\": \"n8n-nodes-base.redis\",\n      \"position\": [\n        280,\n        460\n      ],\n      \"parameters\": {\n        \"key\": \"=handoff_{{ $('Telegram Trigger').first().json.message.chat.id }}_chat\",\n        \"options\": {},\n        \"operation\": \"get\",\n        \"propertyName\": \"data\"\n      },\n      \"credentials\": {\n        \"redis\": {\n          \"id\": \"zU4DA70qSDrZM1El\",\n          \"name\": \"Redis account (localhost)\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"4f247eb3-78f0-4ec1-8713-1373da07b5f3\",\n      \"name\": \"After Sales Agent\",\n      \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n      \"position\": [\n        340,\n        1000\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $('Telegram Trigger').item.json.message.text }}\",\n        \"options\": {\n          \"systemMessage\": \"You are an aftersales agent helping the user answer questions about their recent purchase.\"\n        },\n        \"promptType\": \"define\"\n      },\n      \"typeVersion\": 1.8\n    },\n    {\n      \"id\": \"bce26253-f7da-49e8-952b-52e14eb4f9b5\",\n      \"name\": \"Memory1\",\n      \"type\": \"@n8n/n8n-nodes-langchain.memoryRedisChat\",\n      \"position\": [\n        420,\n        1180\n      ],\n      \"parameters\": {\n        \"sessionKey\": \"=handoff_{{ $('Telegram Trigger').first().json.message.chat.id }}_chat2\",\n        \"sessionIdType\": \"customKey\",\n        \"contextWindowLength\": 30\n      },\n      \"credentials\": {\n        \"redis\": {\n          \"id\": \"zU4DA70qSDrZM1El\",\n          \"name\": \"Redis account (localhost)\"\n        }\n      },\n      \"typeVersion\": 1.4\n    },\n    {\n      \"id\": \"51c4549b-559c-400d-9951-dde0953ade4c\",\n      \"name\": \"Model1\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        300,\n        1180\n      ],\n      \"parameters\": {\n        \"model\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o-mini\"\n        },\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"8gccIjcuf3gvaoEr\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"63b8d9e8-7af2-4103-a365-ca5471bd7b36\",\n      \"name\": \"Handoff Tool\",\n      \"type\": \"@n8n/n8n-nodes-langchain.toolWorkflow\",\n      \"position\": [\n        540,\n        1180\n      ],\n      \"parameters\": {\n        \"name\": \"handoff_to_human\",\n        \"workflowId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $workflow.id }}\"\n        },\n        \"description\": \"Call this tool to handoff or defer to a human agent at the request of the customer. Ensure a summary of the reason for the handoff is obtained first.\",\n        \"workflowInputs\": {\n          \"value\": {\n            \"chatId\": \"={{ $('Telegram Trigger').first().json.message.chat.id.toString() }}\",\n            \"userId\": \"={{ $('Telegram Trigger').first().json.message.from.id.toString() }}\",\n            \"summary\": \"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('summary', `Reason for human hand-off`, 'string') }}\",\n            \"username\": \"={{ $('Telegram Trigger').first().json.message.from.username }}\",\n            \"sessionId\": \"={{ $('Telegram Trigger').first().json.message.chat.id.toString() }}\"\n          },\n          \"schema\": [\n            {\n              \"id\": \"chatId\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"chatId\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"sessionId\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"sessionId\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"userId\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"userId\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"username\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"username\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"summary\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"summary\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            }\n          ],\n          \"mappingMode\": \"defineBelow\",\n          \"matchingColumns\": [],\n          \"attemptToConvertTypes\": false,\n          \"convertFieldsToString\": false\n        }\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"9a2b9077-0ead-4f2c-9e83-05ee341ff697\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1080,\n        580\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 660,\n        \"height\": 460,\n        \"content\": \"## 1. Check Interaction State For Incoming Message\\n[Learn more about the telegram trigger](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.telegramtrigger/)\\n\\nThis is an example of a state-based agent - the technique commonly known as a finite-state machine. This is a great way to really control the flow and direction of the conversation where there are requirements to collect data or perform steps in sequence. To manage the session state, we can use Redis and the session key will be the user's number.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"ccca9a5c-595a-4c58-9316-933a8234ab91\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -380,\n        260\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 560,\n        \"height\": 520,\n        \"content\": \"## 2. Onboarding Agent to Validate Customers\\n[Read more about Agents](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent)\\n\\nThis agent unlike the common multi-tasking examples out there, is only tasked to handle the user's onboarding. In this way, we trade convenience for clutter but ensure the agent is less likely to stray from the desired path.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2d859430-1326-4cbc-a5cc-3af0d091e5c0\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        200,\n        260\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 880,\n        \"height\": 520,\n        \"content\": \"## 3. Extract Customer Details from Conversation\\n[Learn more about the Information Extractor](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.information-extractor)\\n\\nTo collect the user's details in a structured format, we can analyse the current conversation and extract the data with the Information Extractor node. This allows the conversation to remain free-form and avoids asking a question for each field. We use a code node to check if all details are captured.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"754f0859-8af7-4a15-8e46-c9ad62b55bf3\",\n      \"name\": \"Handoff Subworkflow1\",\n      \"type\": \"n8n-nodes-base.executeWorkflow\",\n      \"position\": [\n        1220,\n        340\n      ],\n      \"parameters\": {\n        \"mode\": \"each\",\n        \"options\": {\n          \"waitForSubWorkflow\": false\n        },\n        \"workflowId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $workflow.id }}\"\n        },\n        \"workflowInputs\": {\n          \"value\": {\n            \"chatId\": \"={{ $('Telegram Trigger').first().json.message.chat.id.toString() }}\",\n            \"userId\": \"={{ $('Telegram Trigger').first().json.message.from.id.toString() }}\",\n            \"summary\": \"=name: {{ $json.firstname }} {{ $json.lastname }}\\naddress: {{ $json.address_and_postcode }}\\nsummary: {{ $json.reason_for_call }}\",\n            \"username\": \"={{ $('Telegram Trigger').first().json.message.from.username }}\",\n            \"sessionId\": \"={{ $('Telegram Trigger').first().json.message.chat.id.toString() }}\"\n          },\n          \"schema\": [\n            {\n              \"id\": \"chatId\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"chatId\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"sessionId\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"sessionId\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"userId\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"userId\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"username\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"username\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"summary\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"summary\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            }\n          ],\n          \"mappingMode\": \"defineBelow\",\n          \"matchingColumns\": [],\n          \"attemptToConvertTypes\": false,\n          \"convertFieldsToString\": true\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"6f92128f-14dc-4b0a-b098-3d9535ac11e3\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1100,\n        140\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 800,\n        \"height\": 640,\n        \"content\": \"## 4. Human Handoff when Criteria Met\\n[Learn more about subworkflows](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflow)\\n\\nHere, we initiate the hand-off which calls our hand-off subworkflow. Subworkflows can be a great way to run actions concurrently and without blocking the reply to the user. At this point, the session state would be set to \\\"human\\\" which means the human agent should take over.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"14500c4f-da43-460f-bf4d-80d0a2f4537b\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -380,\n        800\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 520,\n        \"height\": 440,\n        \"content\": \"## 5. Defer to Human\\n\\nWhen session state is \\\"human\\\", no further user messages can reach the agent. This is to ensure there isn't a parallel conversation happening which may confuse the human and agent.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"4d74d479-8525-4b64-8291-e2b3058edeaa\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        160,\n        800\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 720,\n        \"height\": 520,\n        \"content\": \"## 6. Interaction Switched Back to Bot\\n[Read more about the Customer Workflow Tool](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.toolworkflow/)\\n\\nWhen the session state is \\\"bot\\\", it signals the human agent has \\\"transferred\\\" the user back to the bot and so can continue processing their messages. A Custom Workflow Tool is used to retrigger the hand-off process whenever the user requests for it.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"a1c064d9-cc74-475d-b233-9deb4dfa81d7\",\n      \"name\": \"Sticky Note6\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        920,\n        820\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 1580,\n        \"height\": 560,\n        \"content\": \"## 7. Interaction Subworkflow\\n[Learn more about n8n's human-in-the-loop feature](https://docs.n8n.io/advanced-ai/examples/human-fallback/)\\n\\nThe hand-off implementation here involves a \\\"human-in-the-loop\\\" feature of n8n - a feature which \\\"pauses\\\" an execution whilst running until a reply or action is sent back by the human. Sounds complicated but good to note that n8n handles this interaction seemlessly! Here, we're using it to allow the human agent to reliquish control of the conversation back to the AI agent. Additionally, the human agent's feedback is captured and added to the agent's memory to better assist the user afterwards.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"33684768-2f21-4f30-9e56-934171b215fc\",\n      \"name\": \"Sticky Note7\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1580,\n        -260\n      ],\n      \"parameters\": {\n        \"width\": 440,\n        \"height\": 1320,\n        \"content\": \"## Try it out\\n### This n8n template demonstrates an approach to perform bot-to-human handoff using Human-in-the-loop functionality as a switch.\\n\\nIn this experiment, we play with the idea of states we want our agent to be in which controls it's interacton with the user.\\n* **First state** - the agent is onboarding the user by collecting their details for a sales inquiry. After which, they are handed-off / transferred to a human to continue the call.\\n* **Second state** - the agent is essentially \\\"deactivated\\\" as further messages to the bot will not reach it. Instead, a canned response is given to the user. The human agent must \\\"reactivate\\\" the bot by completing the human-in-the-loop form and give a summary of their conversation with the user.\\n* **Third state** - the agent is \\\"reactivated\\\" with context of the human-to-user conversation and is set to provide after sales assistance. An tool is made available to the agent to again delegate back to the human agent when requested.\\n\\n### How it works\\n* This template uses telegram to handle the interaction between the user and the agent.\\n* Each user message is checked for a session state to ensure it is guided to the right stage of the conversation. For this, we can use Redis as a simple key-value store.\\n* When no state is set, the user is directed through an onboarding step to attain their details. Once complete, the agent will \\\"transfer\\\" the user to a human agent - technically, all this involves is an update to the session state and a message to another chat forwarding the user's details.\\n* During this \\\"human\\\" state, the agent cannot reply to the user and must wait until the human \\\"transfers\\\" the conversation back. The human can do this by replying to \\\"human-in-the-loop\\\" message with a summary of their conversation with the user. This session state now changes to \\\"bot\\\" and the context is implanted in the agent's memory so that the agent can respond to future questions.\\n* At this stage of the conversation, the agent is now expected to handle and help the user with after-sales questions. The user can at anytime request transfer back to the human agent, repeating the previous steps as necessary.\\n\\n#### How to use\\n* Plan your user journey! Here is a very basic example of a sales inquiry with at most 3 states. More thought should be developed when many more states are involved.\\n* You may want to better log and manage session states so no user is left in limbo. Try connecting the user and sessions to your CRM.\\n* Note, the Onboarding agent and After-Sales agent have separate chat memories. When adding more agents, it is recommend to continue having separate chat memories to help focus between states.\\n\\n### Need Help?\\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\\n\\nHappy Hacking!\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"187ca5ef-c804-4aca-8ad9-3c4b11676fbf\",\n      \"name\": \"Send Response2\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"position\": [\n        2320,\n        1040\n      ],\n      \"webhookId\": \"55ecb0ba-72c8-4f16-a6c8-0c0bb8582554\",\n      \"parameters\": {\n        \"text\": \"=Hello again! I'm now ready to answer any remaining questions you may have.\",\n        \"chatId\": \"={{ $('Handoff Subworkflow').first().json.chatId }}\",\n        \"additionalFields\": {\n          \"appendAttribution\": false\n        }\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"XVBXGXSsaCjU2DOS\",\n          \"name\": \"jimleuk_handoff_bot\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"ab036106-84f2-4cf7-a5ad-7706a9e5ea0a\",\n      \"name\": \"Memory2\",\n      \"type\": \"@n8n/n8n-nodes-langchain.memoryRedisChat\",\n      \"position\": [\n        1980,\n        1200\n      ],\n      \"parameters\": {\n        \"sessionKey\": \"=handoff_{{ $('Handoff Subworkflow').first().json.chatId }}_chat2\",\n        \"sessionIdType\": \"customKey\",\n        \"contextWindowLength\": 30\n      },\n      \"credentials\": {\n        \"redis\": {\n          \"id\": \"zU4DA70qSDrZM1El\",\n          \"name\": \"Redis account (localhost)\"\n        }\n      },\n      \"typeVersion\": 1.5\n    },\n    {\n      \"id\": \"9d9d1aee-5632-499c-968d-63a555cc58d8\",\n      \"name\": \"Update Agent Memory\",\n      \"type\": \"@n8n/n8n-nodes-langchain.memoryManager\",\n      \"position\": [\n        1980,\n        1040\n      ],\n      \"parameters\": {\n        \"mode\": \"insert\",\n        \"messages\": {\n          \"messageValues\": [\n            {\n              \"type\": \"ai\",\n              \"message\": \"=Report from human agent says \\\"{{ $('Human Handoff using Send and Wait').first().json.data.text }}\\\"\",\n              \"hideFromUI\": true\n            },\n            {\n              \"type\": \"ai\",\n              \"message\": \"Hello again! I'm now ready to answer any remaining questions you may have.\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"8da2fefa-e51f-4258-8ded-e0f20db87641\",\n      \"name\": \"Send Response3\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"position\": [\n        680,\n        1000\n      ],\n      \"webhookId\": \"55ecb0ba-72c8-4f16-a6c8-0c0bb8582554\",\n      \"parameters\": {\n        \"text\": \"={{ $json.output }}\",\n        \"chatId\": \"={{ $('Telegram Trigger').first().json.message.chat.id }}\",\n        \"additionalFields\": {\n          \"appendAttribution\": false\n        }\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"XVBXGXSsaCjU2DOS\",\n          \"name\": \"jimleuk_handoff_bot\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"f027afe0-0fd2-47a2-a0f8-f0d78f8fbc18\",\n      \"name\": \"Get Canned Response\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"position\": [\n        -180,\n        1000\n      ],\n      \"webhookId\": \"55ecb0ba-72c8-4f16-a6c8-0c0bb8582554\",\n      \"parameters\": {\n        \"text\": \"=This conversation has been handed-off to a human agent who will be in contact soon if not done so already. I cannot respond to your query until the human agent transfers you back to me.\",\n        \"chatId\": \"={{ $('Telegram Trigger').first().json.message.chat.id }}\",\n        \"additionalFields\": {\n          \"appendAttribution\": false\n        }\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"XVBXGXSsaCjU2DOS\",\n          \"name\": \"jimleuk_handoff_bot\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"a1ada0c7-779e-44bc-bdbd-1d5285bedf3c\",\n      \"name\": \"Notify user\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"position\": [\n        1180,\n        1040\n      ],\n      \"webhookId\": \"55ecb0ba-72c8-4f16-a6c8-0c0bb8582554\",\n      \"parameters\": {\n        \"text\": \"=You have now been transferred to a human. Unfortunately, I will not be able to respond until the human agent transfers you back to me.\",\n        \"chatId\": \"={{ $('Telegram Trigger').first().json.message.chat.id }}\",\n        \"additionalFields\": {\n          \"appendAttribution\": false\n        }\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"XVBXGXSsaCjU2DOS\",\n          \"name\": \"jimleuk_handoff_bot\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"31287a38-e7a7-4518-9f54-6e6c9b2486fe\",\n      \"name\": \"Sticky Note8\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1520,\n        1020\n      ],\n      \"parameters\": {\n        \"width\": 220,\n        \"height\": 320,\n        \"content\": \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n### Add Human Chat ID\\nThis is needed to notify the human agent.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"a58a82b9-2c37-4137-9b3e-17479c78a2d2\",\n      \"name\": \"Memory3\",\n      \"type\": \"@n8n/n8n-nodes-langchain.memoryRedisChat\",\n      \"position\": [\n        1580,\n        500\n      ],\n      \"parameters\": {\n        \"sessionKey\": \"=handoff_{{ $('Telegram Trigger').first().json.message.chat.id }}_chat2\",\n        \"sessionIdType\": \"customKey\",\n        \"contextWindowLength\": 30\n      },\n      \"credentials\": {\n        \"redis\": {\n          \"id\": \"zU4DA70qSDrZM1El\",\n          \"name\": \"Redis account (localhost)\"\n        }\n      },\n      \"typeVersion\": 1.5\n    },\n    {\n      \"id\": \"4d3d5b46-6e82-4b97-9e5f-76f02ff79ce5\",\n      \"name\": \"Update Agent Memory1\",\n      \"type\": \"@n8n/n8n-nodes-langchain.memoryManager\",\n      \"position\": [\n        1580,\n        340\n      ],\n      \"parameters\": {\n        \"mode\": \"insert\",\n        \"messages\": {\n          \"messageValues\": [\n            {\n              \"type\": \"ai\",\n              \"message\": \"=The person I'm speaking to has the following details:\\nfirstname: {{ $('Handoff Subworkflow1').first().json.firstname }}\\nlastname: {{ $('Handoff Subworkflow1').first().json.firstname }}\\nreason for call: {{ $('Handoff Subworkflow1').first().json.reason_for_call }}\",\n              \"hideFromUI\": true\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"ced46068-440b-46b4-aa51-b5bb9d59a004\",\n      \"name\": \"Continue Conversation\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"position\": [\n        1220,\n        580\n      ],\n      \"webhookId\": \"55ecb0ba-72c8-4f16-a6c8-0c0bb8582554\",\n      \"parameters\": {\n        \"text\": \"={{ $('Onboarding Agent').first().json.output }}\",\n        \"chatId\": \"={{ $('Telegram Trigger').first().json.message.chat.id }}\",\n        \"additionalFields\": {\n          \"appendAttribution\": false\n        }\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"XVBXGXSsaCjU2DOS\",\n          \"name\": \"jimleuk_handoff_bot\"\n        }\n      },\n      \"typeVersion\": 1.2\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Onboarding Agent\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Memory\": {\n      \"ai_memory\": [\n        [\n          {\n            \"node\": \"Onboarding Agent\",\n            \"type\": \"ai_memory\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Model1\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"After Sales Agent\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Memory1\": {\n      \"ai_memory\": [\n        [\n          {\n            \"node\": \"After Sales Agent\",\n            \"type\": \"ai_memory\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Memory2\": {\n      \"ai_memory\": [\n        [\n          {\n            \"node\": \"Update Agent Memory\",\n            \"type\": \"ai_memory\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Memory3\": {\n      \"ai_memory\": [\n        [\n          {\n            \"node\": \"Update Agent Memory1\",\n            \"type\": \"ai_memory\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Notify user\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set Interaction to Human\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Handoff Tool\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"After Sales Agent\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Send Response\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Update Agent Memory1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"With Defaults\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Has All Criteria?\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Onboarding Agent\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Onboarding Chat History\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Telegram Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Interaction State\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"After Sales Agent\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Send Response3\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Has All Criteria?\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Handoff Subworkflow1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Continue Conversation\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Information Extractor\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Switch Interaction\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Canned Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"After Sales Agent\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Onboarding Agent\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Handoff Subworkflow\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Notify user\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Update Agent Memory\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Send Response2\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Handoff Subworkflow1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Send Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Interaction State\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Switch Interaction\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Information Extractor\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"With Defaults\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set Interaction to Bot\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Update Agent Memory\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set Interaction to Human\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Human Handoff using Send and Wait\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Onboarding Chat History\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Information Extractor\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Human Handoff using Send and Wait\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set Interaction to Bot\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.telegram",
      "n8n-nodes-base.redis",
      "n8n-nodes-base.redis",
      "n8n-nodes-base.redis",
      "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "n8n-nodes-base.executeWorkflowTrigger",
      "n8n-nodes-base.telegramTrigger",
      "n8n-nodes-base.telegram",
      "n8n-nodes-base.switch",
      "@n8n/n8n-nodes-langchain.informationExtractor",
      "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "n8n-nodes-base.code",
      "n8n-nodes-base.if",
      "@n8n/n8n-nodes-langchain.agent",
      "n8n-nodes-base.redis",
      "@n8n/n8n-nodes-langchain.agent",
      "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "@n8n/n8n-nodes-langchain.toolWorkflow",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.executeWorkflow",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.telegram",
      "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "@n8n/n8n-nodes-langchain.memoryManager",
      "n8n-nodes-base.telegram",
      "n8n-nodes-base.telegram",
      "n8n-nodes-base.telegram",
      "n8n-nodes-base.stickyNote",
      "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "@n8n/n8n-nodes-langchain.memoryManager",
      "n8n-nodes-base.telegram"
    ],
    "trigger": "telegram trigger"
  }
}