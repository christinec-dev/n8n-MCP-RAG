{
  "source": "0922_Code_Webhook_Create_Webhook.json",
  "index": 1,
  "content": "{\n  \"meta\": {\n    \"instanceId\": \"dfb8aefc80b77b230bd90d6a6e5210eb7a28e6e1d2a8b1d27d54942b54eb9e7a\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"nodes\": [\n    {\n      \"id\": \"4f42007b-3813-410f-a608-5af89459b14f\",\n      \"name\": \"Check Authorization Header\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        -20,\n        20\n      ],\n      \"parameters\": {\n        \"conditions\": {\n          \"string\": [\n            {\n              \"value1\": \"={{ $('Webhook').item.json.headers.authorization }}\",\n              \"value2\": \"=Bearer {{ $json.config.bearerToken }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"86d6157e-593d-4370-a480-1a9417300555\",\n      \"name\": \"401 Unauthorized\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        340,\n        280\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"responseCode\": 401\n        },\n        \"respondWith\": \"json\",\n        \"responseBody\": \"{\\n  \\\"code\\\": 401,\\n  \\\"message\\\": \\\"Unauthorized: Missing or invalid authorization token.\\\",\\n  \\\"hint\\\": \\\"Ensure the request includes a valid 'Authorization' header (e.g., 'Bearer YOUR_SECRET_TOKEN').\\\"\\n}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0831093a-adef-41dc-8ac0-2e1998fc22ad\",\n      \"name\": \"200 OK\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        1140,\n        20\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b4f42651-c7f6-43a3-a695-7d5197b45642\",\n      \"name\": \"Configuration\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -300,\n        20\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"4c35898d-5a70-41bc-9fb6-9d63bbbee222\",\n              \"name\": \"config.bearerToken\",\n              \"type\": \"string\",\n              \"value\": \"123\"\n            },\n            {\n              \"id\": \"822739a6-15da-48df-8f92-c4b1adce5fef\",\n              \"name\": \"config.requiredFields.message\",\n              \"type\": \"string\",\n              \"value\": \"true\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"f1539109-8585-4cf2-9b9b-f3012544ac6c\",\n      \"name\": \"Webhook\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        -580,\n        20\n      ],\n      \"webhookId\": \"2c5b9b70-1b08-44b1-a007-dc3d9f7e70db\",\n      \"parameters\": {\n        \"path\": \"secure-webhook\",\n        \"options\": {},\n        \"httpMethod\": \"POST\",\n        \"responseMode\": \"responseNode\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"bcf1183c-9a3d-41eb-89f7-1666d3a6c5fc\",\n      \"name\": \"Has required fields?\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        220,\n        20\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"if(! $json.config.requiredFields) {\\n  return { json: { valid: true } };\\n}\\n\\nconst body = $('Webhook').first().json.body;\\n\\nlet requiredFields = $json.config.requiredFields;\\n\\nfor (let [key, value] of Object.entries(requiredFields)) {\\n  console.log(`${key}: ${value}`);\\n  if (!(key in body)) {\\n    return { json: { valid: false } };\\n  }\\n}\\n\\nreturn { json: { valid: true } };\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"81b125f1-faa0-4998-8624-431746052a84\",\n      \"name\": \"Check Valid Request\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        440,\n        20\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"8c7fe174-f284-4e41-b851-8939f0c2d19f\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"true\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.valid }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"906c671d-e2a6-4a9e-b7df-d7b9142ffeb4\",\n      \"name\": \"400 Bad Request\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        780,\n        280\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"responseCode\": 401\n        },\n        \"respondWith\": \"json\",\n        \"responseBody\": \"{\\n  \\\"code\\\": 400,\\n  \\\"message\\\": \\\"Bad Request: Missing required fields\\\",\\n  \\\"hint\\\": \\\"Make sure all required fields are included in the request body.\\\"\\n}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"ce657170-34e4-4b40-ba22-bb4638fa98c6\",\n      \"name\": \"Create Response\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        920,\n        20\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"c6258b81-6f40-4dd5-8a60-89e2b0322490\",\n              \"name\": \"message\",\n              \"type\": \"string\",\n              \"value\": \"Success! Workflow completed.\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"0a6b9f12-9b60-458e-85de-014a66063e50\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -440,\n        -280\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"width\": 360,\n        \"height\": 460,\n        \"content\": \"### üõ†Ô∏è Config Node Setup\\n\\n*This node defines the configuration for the secure webhook.*\\n\\n- `config.bearerToken`: The expected Bearer token for authentication.\\n\\n- `config.requiredFields`: Set one key for each required field in the incoming request body (e.g., `config.requiredFields.message`.\\n*üëâ The value doesn't matter, only the keys are checked.*\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"bba24ba5-3c8d-40f7-99e0-44115b1025e0\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -440,\n        200\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 1740,\n        \"height\": 240,\n        \"content\": \"### üö´ Error Handling Nodes\\n\\n*These nodes return standardized JSON error responses:*\\n\\n- üîí `401 Unauthorized`:\\nTriggered when the request is missing a valid Bearer token.\\n\\n- üì≠ `400 Bad Request`:\\nTriggered when required fields are missing from the request body.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f451c9be-4cfb-4628-8aa7-66b66ad86bab\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        840,\n        -280\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 460,\n        \"height\": 460,\n        \"content\": \"### ‚úÖ Set & 200 Response Nodes\\n\\n- üß± `Create Response`\\nBuilds the JSON response from the incoming request.\\nUse this to extract, transform, or forward specific values (e.g., message, sender, etc.).\\n\\n- üì¨ `200 OK`\\nReturns a successful response using values from the `Create Response` node.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"8d4e8406-c3fe-4e8a-bfa8-18407fe5e67a\",\n      \"name\": \"Add workflow nodes here\",\n      \"type\": \"n8n-nodes-base.noOp\",\n      \"position\": [\n        680,\n        20\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f3f461a6-dc48-42cd-ac75-d045795006d0\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        160,\n        -280\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 440,\n        \"height\": 460,\n        \"content\": \"### üîç Required Fields Validator\\n\\n*This Code node checks if all fields defined in config.requiredFields are present in the incoming request body.*\\n\\n- Reads the body from the Webhook node.\\n\\n- Loops through each key in config.requiredFields.\\n\\n- Returns `{ valid: true }` if all are present, otherwise `{ valid: false }`.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2766dae8-8def-462f-a53c-0f51606eea0a\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1220,\n        -340\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 760,\n        \"height\": 780,\n        \"content\": \"## üîê Secure Webhook ‚Äì Summary\\n\\n*This workflow protects a public webhook with **authentication** and **payload validation**.*\\n\\n\\n---\\n\\n#### üß© Why use it?\\n- ‚úÖ Ensure only trusted clients can call your workflow (via Bearer token).\\n- ‚úÖ Validate that all expected fields are present in the request body.\\n- ‚úÖ Return helpful and consistent JSON responses (`200`, `400`, `401`).\\n\\n---\\n\\n#### ‚öôÔ∏è How it works:\\n1. **`Webhook`** ‚Äì Entry point for external `POST` requests.\\n2. **`Configuration`** ‚Äì Defines `config.bearerToken` and `config.requiredFields`.\\n3. **`Check Authorization Header`** ‚Äì Compares incoming Bearer token with config.\\n4. **`401 Unauthorized`** ‚Äì Returned if the token is missing or incorrect.\\n5. **`Has required fields?`** ‚Äì JS code checks for required fields in the request body.\\n6. **`400 Bad Request`** ‚Äì Returned if any required field is missing.\\n7. **`Create Response` & `200 OK`** ‚Äì Returns a custom success message.\\n\\n---\\n\\n#### üõ† Setup Instructions:\\n- Set your desired Bearer token in `config.bearerToken`.\\n- For each required field, set a key in `config.requiredFields`  \\n  *(e.g., `config.requiredFields.message)*.\\n*üëâ The value doesn't matter, only the keys are checked.*\\n- Replace the **`Add workflow nodes here`** node with your own workflow logic.\\n- Edit the `Create Response` node to build your response.\\n\\n---\\n\\nüìå *Great for building secure, reusable webhook endpoints for APIs, forms, or 3rd-party services.*\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"70c8f060-587a-4524-ab32-7362cc0c4cf9\",\n      \"name\": \"Sticky Note6\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1220,\n        -600\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"width\": 760,\n        \"height\": 240,\n        \"content\": \"## Support My Work! ‚ù§Ô∏è\\n\\n**üëã Hello! I'm Audun / xqus** \\nüîó My work: [xqus.com](https://xqus.com)\\nüí∏ n8n shop: [xqus.gumroad.com](https://xqus.gumroad.com)\\n\\n**If you find this workflow helpful**, consider downloading or purchasing it on [Gumroad](https://xqus.gumroad.com/l/hasgi).\\n\\nYour support helps me create more useful n8n workflows and resources for the community. \\n-Thanks a lot! üôå\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"200 OK\": {\n      \"main\": [\n        []\n      ]\n    },\n    \"Webhook\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Configuration\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Configuration\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check Authorization Header\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Create Response\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"200 OK\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check Valid Request\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Add workflow nodes here\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"400 Bad Request\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Has required fields?\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check Valid Request\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Add workflow nodes here\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Create Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check Authorization Header\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Has required fields?\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"401 Unauthorized\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.if",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.set",
      "n8n-nodes-base.webhook",
      "n8n-nodes-base.code",
      "n8n-nodes-base.if",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.set",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.noOp",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote"
    ],
    "trigger": null
  }
}