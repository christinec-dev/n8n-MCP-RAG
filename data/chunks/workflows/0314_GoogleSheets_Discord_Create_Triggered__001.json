{
  "source": "0314_GoogleSheets_Discord_Create_Triggered.json",
  "index": 1,
  "content": "{\n  \"meta\": {\n    \"instanceId\": \"a2434c94d549548a685cca39cc4614698e94f527bcea84eefa363f1037ae14cd\"\n  },\n  \"nodes\": [\n    {\n      \"id\": \"b3a0fa7c-eb47-4f51-98d7-ac1a8de7b05d\",\n      \"name\": \"On new or updated row\",\n      \"type\": \"n8n-nodes-base.googleSheetsTrigger\",\n      \"position\": [\n        800,\n        380\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"columnsToWatch\": [\n            \"Security Code\"\n          ]\n        },\n        \"pollTimes\": {\n          \"item\": [\n            {\n              \"mode\": \"everyMinute\"\n            }\n          ]\n        },\n        \"sheetName\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gid=0\",\n          \"cachedResultUrl\": \"https://docs.google.com/spreadsheets/d/1Np8TQv7kWwwrGiPkWWsmr4WYWAosv1BMBwwCd0f-dis/edit#gid=0\",\n          \"cachedResultName\": \"Investments\"\n        },\n        \"documentId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"1Np8TQv7kWwwrGiPkWWsmr4WYWAosv1BMBwwCd0f-dis\",\n          \"cachedResultUrl\": \"https://docs.google.com/spreadsheets/d/1Np8TQv7kWwwrGiPkWWsmr4WYWAosv1BMBwwCd0f-dis/edit?usp=drivesdk\",\n          \"cachedResultName\": \"Investments\"\n        }\n      },\n      \"credentials\": {\n        \"googleSheetsTriggerOAuth2Api\": {\n          \"id\": \"35\",\n          \"name\": \"TEST USER\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"61b96d9b-801c-43e6-b89a-a55245386e4f\",\n      \"name\": \"Send message\",\n      \"type\": \"n8n-nodes-base.discord\",\n      \"position\": [\n        1200,\n        380\n      ],\n      \"parameters\": {\n        \"text\": \"=```\\n{{ $json.ascii_table }}\\n```\",\n        \"options\": {},\n        \"webhookUri\": \"https://discord.com/api/webhooks/...\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2dc9ce88-2079-4419-9f48-2281ac25cb36\",\n      \"name\": \"Convert to ASCII table\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1000,\n        380\n      ],\n      \"parameters\": {\n        \"jsCode\": \"/* configure columns to be displayed */\\nconst columns_to_display = [\\n  \\\"Security Code\\\",\\n  \\\"Price\\\",\\n  \\\"Quantity\\\",\\n]\\n\\n/* End of configuration section (do not edit code below) */\\nconst google_sheets_data = $('On new or updated row').all();\\n\\n/**\\n * Takes a list of objects and returns an ascii table with\\n * padding and headers.\\n */\\nfunction ascii_table(data, columns_to_display) {\\n  let table = \\\"\\\"\\n  \\n  // Get the headers\\n  let headers = []\\n  for (let i = 0; i < columns_to_display.length; i++) {\\n    headers.push(columns_to_display[i])\\n  }\\n\\n  // Get the longest string in each column\\n  let longest_strings = []\\n  for (let i = 0; i < headers.length; i++) {\\n    let longest_string = headers[i].length\\n    for (let j = 0; j < data.length; j++) {\\n      let string_length = data[j].json[headers[i]].length\\n      if (string_length > longest_string) {\\n        longest_string = string_length\\n      }\\n    }\\n    longest_strings.push(longest_string)\\n  }\\n\\n  // Add the headers to the table\\n  for (let i = 0; i < headers.length; i++) {\\n    table += headers[i].toString().padEnd(longest_strings[i] + 2, \\\" \\\")\\n  }\\n\\n  // Add the data to the table\\n  for (let i = 0; i < data.length; i++) {\\n    table += \\\"\\\\n\\\"\\n    for (let j = 0; j < headers.length; j++) {\\n      table += data[i].json[headers[j]].toString().padEnd(longest_strings[j] + 2, \\\" \\\")\\n    }\\n  }\\n\\n  return table\\n}\\n\\noutput = {\\n  ascii_table: ascii_table(google_sheets_data, columns_to_display),\\n}\\n\\nconsole.log(output.ascii_table)\\n\\nreturn output\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2db7b37b-22f9-424d-a889-33f8a0db2b01\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        340,\n        220\n      ],\n      \"parameters\": {\n        \"width\": 402,\n        \"height\": 433,\n        \"content\": \"## Send Google Sheets data as a message to a Discord channel\\nThis workflow sends a message to a Discord channel when a new row is added or a row is updated in a Google Sheet. The message will send all data rows in the Google Sheet.\\n\\n### How it works\\nUsing a code node, we can use the obtained Google Sheet data to create a custom message that will be sent to Discord. The message will be sent to the Discord channel specified in the Discord node.\\n\\n### Setup\\nThis workflow requires that you set up a Discord webhook and have an existing Google Sheet with data. See how to set up a Discord webhook [here](https://docs.n8n.io/integrations/builtin/credentials/discord/#creating-a-webhook-in-discord).\\n\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"connections\": {\n    \"On new or updated row\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Convert to ASCII table\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Convert to ASCII table\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Send message\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.googleSheetsTrigger",
      "n8n-nodes-base.discord",
      "n8n-nodes-base.code",
      "n8n-nodes-base.stickyNote"
    ],
    "trigger": null
  }
}