{
  "source": "0446_Code_Todoist_Create_Scheduled.json",
  "index": 1,
  "content": "{\n  \"nodes\": [\n    {\n      \"id\": \"d49ee203-5bd1-45c0-859d-f1b248bfdf71\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        280,\n        40\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 424.4907862645661,\n        \"height\": 154.7766688696994,\n        \"content\": \"### üë®‚Äçüé§ Setup\\n1. Add Todoist creds\\n2. Create a `template` list to copy from in Todoist. Add days and due times on each task as necessary.\\n3. Set the projects to copy from and to write to in each **Todoist** node\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e69dd4e2-7ff6-4613-a1c9-ac1f3da37955\",\n      \"name\": \"Get all tasks from template project\",\n      \"type\": \"n8n-nodes-base.todoist\",\n      \"position\": [\n        860,\n        420\n      ],\n      \"parameters\": {\n        \"filters\": {\n          \"projectId\": \"2299363018\"\n        },\n        \"operation\": \"getAll\",\n        \"returnAll\": true\n      },\n      \"credentials\": {\n        \"todoistApi\": {\n          \"id\": \"1\",\n          \"name\": \"Todoist account\"\n        }\n      },\n      \"executeOnce\": true,\n      \"retryOnFail\": true,\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"fa907d45-3822-4549-9f84-8385bb4183cc\",\n      \"name\": \"Parse task details\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1080,\n        420\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"const item = {};\\n\\nitem.description = $input.item.json.description;\\nitem.content = $input.item.json.content;\\n\\nconst parts = item.description.split(';').map((v) => v.trim());\\nparts.forEach((v) => {\\n  const tag = v.split(':');\\n  if (tag && tag.length === 2) {\\n    item[tag[0]] = tag[1].trim();\\n  }\\n});\\n\\nif (item.due) {\\n  item.due = parseTimeString(item.due);\\n}\\n\\nreturn item;\\n\\nfunction parseTimeString(timeString) {\\n    const regex = /^(\\\\d{1,2})(\\\\.)?(\\\\d{2})?([ap]m)$/i;\\n    const match = timeString.match(regex);\\n    \\n    if (!match) {\\n        throw new Error(\\\"Invalid time format\\\");\\n    }\\n\\n    let hours = parseInt(match[1], 10);\\n    let minutes = match[3] ? parseInt(match[3], 10) : 0;\\n    const period = match[4].toLowerCase();\\n\\n    if (hours === 12) {\\n        hours = period === 'am' ? 0 : 12;\\n    } else {\\n        hours = period === 'pm' ? hours + 12 : hours;\\n    }\\n\\n    // Check if minutes are valid\\n    if (minutes < 0 || minutes >= 60) {\\n        throw new Error(\\\"Invalid minutes\\\");\\n    }\\n\\n    const now = DateTime.now().set({ hour: hours, minute: minutes, second: 0, millisecond: 0 });\\n    return now.toUTC();\\n}\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"4989bac6-0741-4cdc-bc9c-e7800f9b3019\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1140,\n        600\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 351.4230769230764,\n        \"height\": 222.50000000000006,\n        \"content\": \"### üëÜ This adds due dates to tasks from description.. \\n### For example in the description of a task\\n`days:mon,tues; due:8am`\\n### So that it will create a task every Monday and Tuesday that's due at 8am ‚è∞\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"accc330b-1b67-4181-8735-94b0debc8d70\",\n      \"name\": \"Keep tasks that match today\",\n      \"type\": \"n8n-nodes-base.filter\",\n      \"position\": [\n        1300,\n        420\n      ],\n      \"parameters\": {\n        \"conditions\": {\n          \"string\": [\n            {\n              \"value1\": \"={{ $json.days }}\",\n              \"value2\": \"={{ ['sun', 'mon', 'tues', 'wed', 'thurs', 'fri', 'sat', 'sun'][new Date().getDay()] }}\",\n              \"operation\": \"contains\"\n            },\n            {\n              \"value1\": \"={{ $json.days }}\",\n              \"value2\": \"={{ ['sun', 'mon', 'tues', 'wed', 'thurs', 'fri', 'sat', 'sun'][new Date().getDay()] }}\",\n              \"operation\": \"contains\"\n            }\n          ]\n        },\n        \"combineConditions\": \"OR\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"dbe1fc24-1833-493b-b444-de21a4b3c3c5\",\n      \"name\": \"Every day at 5:10am\",\n      \"type\": \"n8n-nodes-base.scheduleTrigger\",\n      \"position\": [\n        620,\n        420\n      ],\n      \"parameters\": {\n        \"rule\": {\n          \"interval\": [\n            {\n              \"triggerAtHour\": 5,\n              \"triggerAtMinute\": 10\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"b4737822-89aa-4ca0-bd9b-c5f9a16360c0\",\n      \"name\": \"Every day at 5am\",\n      \"type\": \"n8n-nodes-base.scheduleTrigger\",\n      \"position\": [\n        400,\n        220\n      ],\n      \"parameters\": {\n        \"rule\": {\n          \"interval\": [\n            {\n              \"triggerAtHour\": 5,\n              \"triggerAtMinute\": 10\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"2a9adc4b-552b-47a9-a32c-54d8d4bfb669\",\n      \"name\": \"Get all tasks from Inbox\",\n      \"type\": \"n8n-nodes-base.todoist\",\n      \"position\": [\n        620,\n        220\n      ],\n      \"parameters\": {\n        \"filters\": {\n          \"projectId\": \"938017196\"\n        },\n        \"operation\": \"getAll\",\n        \"returnAll\": true\n      },\n      \"credentials\": {\n        \"todoistApi\": {\n          \"id\": \"1\",\n          \"name\": \"Todoist account\"\n        }\n      },\n      \"executeOnce\": false,\n      \"retryOnFail\": true,\n      \"typeVersion\": 1,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"d4794543-3002-4663-8979-360eb437fb4e\",\n      \"name\": \"If list not empty\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        840,\n        220\n      ],\n      \"parameters\": {\n        \"conditions\": {\n          \"string\": [\n            {\n              \"value1\": \"={{ $json[\\\"id\\\"] }}\",\n              \"operation\": \"isNotEmpty\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"297fcbcb-efe3-4965-b836-34e78a3b452d\",\n      \"name\": \"if it has daily label\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        1080,\n        220\n      ],\n      \"parameters\": {\n        \"conditions\": {\n          \"boolean\": [\n            {\n              \"value1\": \"={{ ($json[\\\"labels\\\"] || []).includes('daily') }}\",\n              \"value2\": true\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0365a865-f03b-4afc-a535-4e3892fc3add\",\n      \"name\": \"Delete task\",\n      \"type\": \"n8n-nodes-base.todoist\",\n      \"position\": [\n        1280,\n        220\n      ],\n      \"parameters\": {\n        \"taskId\": \"={{ $json[\\\"id\\\"] }}\",\n        \"operation\": \"delete\"\n      },\n      \"credentials\": {\n        \"todoistApi\": {\n          \"id\": \"1\",\n          \"name\": \"Todoist account\"\n        }\n      },\n      \"retryOnFail\": true,\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b14a8ecc-ee07-4a33-ab4b-122c98694c60\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1740,\n        440\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 256.14371825927645,\n        \"height\": 100,\n        \"content\": \"### üëàüèΩ Every new task has `daily` label that gets deleted in the other flow\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"d951f461-685e-4507-b010-bce2be0e3709\",\n      \"name\": \"Create new task in Inbox\",\n      \"type\": \"n8n-nodes-base.todoist\",\n      \"position\": [\n        1520,\n        420\n      ],\n      \"parameters\": {\n        \"labels\": [\n          \"daily\"\n        ],\n        \"content\": \"={{ $json.content }}\",\n        \"options\": {\n          \"description\": \"={{ $json.description }}\",\n          \"dueDateTime\": \"={{ $json.due }}\"\n        },\n        \"project\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"938017196\",\n          \"cachedResultName\": \"Inbox\"\n        }\n      },\n      \"credentials\": {\n        \"todoistApi\": {\n          \"id\": \"1\",\n          \"name\": \"Todoist account\"\n        }\n      },\n      \"retryOnFail\": true,\n      \"typeVersion\": 2,\n      \"alwaysOutputData\": false\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Every day at 5am\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get all tasks from Inbox\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"If list not empty\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"if it has daily label\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Parse task details\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Keep tasks that match today\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Every day at 5:10am\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get all tasks from template project\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"if it has daily label\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Delete task\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get all tasks from Inbox\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"If list not empty\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Keep tasks that match today\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Create new task in Inbox\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get all tasks from template project\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Parse task details\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.todoist",
      "n8n-nodes-base.code",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.filter",
      "n8n-nodes-base.scheduleTrigger",
      "n8n-nodes-base.scheduleTrigger",
      "n8n-nodes-base.todoist",
      "n8n-nodes-base.if",
      "n8n-nodes-base.if",
      "n8n-nodes-base.todoist",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.todoist"
    ],
    "trigger": null
  }
}