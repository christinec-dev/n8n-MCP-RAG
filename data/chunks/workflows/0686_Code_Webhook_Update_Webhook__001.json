{
  "source": "0686_Code_Webhook_Update_Webhook.json",
  "index": 1,
  "content": "{\n  \"nodes\": [\n    {\n      \"id\": \"b73fed9b-d56c-4175-a310-8c09ed51acd2\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        80,\n        60\n      ],\n      \"parameters\": {\n        \"width\": 464,\n        \"height\": 303,\n        \"content\": \"## Testing \\n\\nTesting can be done with CURL or similar.\\n\\nFor File posting using Form Data\\ncurl -X POST \\\"https://yoururl.com/webhook-test/tool/csv-to-json\\\" \\\\\\n     -H \\\"Content-Type: text/csv\\\" \\\\\\n     --data-binary @path/to/your/file.csv\\n\\n\\nThis can also be tested using the Test workflow\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"6ed4b2cc-444f-44e2-ab91-34337acd7a9b\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1680,\n        580\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 396,\n        \"height\": 256,\n        \"content\": \"## Response\\nWhere possible we will be returning a binary object.\\n```\\nIf there is an error\\n```\\n{\\n  \\\"status\\\": \\\"error\\\",\\n  \\\"data\\\": \\\"error message to display\\\"\\n}\\n```\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"4eff962e-e636-4704-835a-672ccd705e16\",\n      \"name\": \"Extract From File\",\n      \"type\": \"n8n-nodes-base.extractFromFile\",\n      \"onError\": \"continueErrorOutput\",\n      \"position\": [\n        680,\n        80\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"binaryPropertyName\": \"data0\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"ccc66f1e-e000-4048-a492-b80fbf8c8fce\",\n      \"name\": \"Error Response\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"onError\": \"continueErrorOutput\",\n      \"position\": [\n        1900,\n        900\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"responseCode\": 500\n        },\n        \"respondWith\": \"json\",\n        \"responseBody\": \"{\\n  \\\"status\\\": \\\"error\\\",\\n  \\\"data\\\": \\\"There was a problem converting your CSV. Please refresh the page and try again.\\\"\\n}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"a7d34aba-6ded-4cc8-8866-7d4aa6ae3255\",\n      \"name\": \"Success Response\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"onError\": \"continueErrorOutput\",\n      \"position\": [\n        1920,\n        220\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"responseCode\": 200\n        },\n        \"respondWith\": \"json\",\n        \"responseBody\": \"={\\n  \\\"status\\\": \\\"OK\\\",\\n  \\\"data\\\": {{ JSON.stringify($json.jsondata) }}\\n}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"3484b148-4ba5-4b54-9401-44010ac31178\",\n      \"name\": \"Change Field\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueErrorOutput\",\n      \"position\": [\n        680,\n        320\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"b2e3bec3-221e-4f1d-b439-f75174f68ed1\",\n              \"name\": \"csv\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.body }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.3\n    },\n    {\n      \"id\": \"f35635fe-8943-486b-b5fa-4f566dd8f938\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        60,\n        40\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 2298,\n        \"height\": 1027,\n        \"content\": \"\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"cede2fad-f0ee-4082-a403-81f6d8eb188e\",\n      \"name\": \"Switch\",\n      \"type\": \"n8n-nodes-base.switch\",\n      \"position\": [\n        340,\n        400\n      ],\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"outputKey\": \"File\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 1,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"operator\": {\n                      \"type\": \"object\",\n                      \"operation\": \"notEmpty\",\n                      \"singleValue\": true\n                    },\n                    \"leftValue\": \"={{ $binary }}\",\n                    \"rightValue\": \"\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"Data/Text\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 1,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"8930ce1a-a4cc-4094-b08f-a23a13dec40c\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $json.headers['content-type'] }}\",\n                    \"rightValue\": \"text/plain\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"appJSON\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 1,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"e3108952-daa2-425c-8c70-7d2ce0949e0c\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $json.headers['content-type'] }}\",\n                    \"rightValue\": \"=application/json\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            }\n          ]\n        },\n        \"options\": {\n          \"fallbackOutput\": \"extra\"\n        }\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"a2d92aeb-25eb-4d3c-82ad-16d2124099a8\",\n      \"name\": \"Send to Error Channel\",\n      \"type\": \"n8n-nodes-base.slack\",\n      \"position\": [\n        2380,\n        880\n      ],\n      \"webhookId\": \"d8e1201d-cbcc-4153-a164-51d7b3e17c84\",\n      \"parameters\": {\n        \"text\": \":interrobang: Error in XML to JSON tool\",\n        \"select\": \"channel\",\n        \"blocksUi\": \"={\\n\\t\\\"blocks\\\": [\\n{\\n\\t\\t\\t\\\"type\\\": \\\"section\\\",\\n\\t\\t\\t\\\"text\\\": {\\n\\t\\t\\t\\t\\\"type\\\": \\\"mrkdwn\\\",\\n\\t\\t\\t\\t\\\"text\\\": \\\":interrobang: Error in CSV to JSON tool\\\"\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\t\\\"type\\\": \\\"section\\\",\\n\\t\\t\\t\\\"text\\\": {\\n\\t\\t\\t\\t\\\"type\\\": \\\"mrkdwn\\\",\\n\\t\\t\\t\\t\\\"text\\\": \\\"*Time:*\\\\n{{ $now.format('dd/MM/yyyy HH:mm:ss') }}\\\\n*Execution ID:*\\\\n{{ $execution.id }}\\\\n\\\"\\n\\t\\t\\t},\\n\\t\\t\\t\\\"accessory\\\": {\\n\\t\\t\\t\\t\\\"type\\\": \\\"button\\\",\\n\\t\\t\\t\\t\\\"text\\\": {\\n\\t\\t\\t\\t\\t\\\"type\\\": \\\"plain_text\\\",\\n\\t\\t\\t\\t\\t\\\"text\\\": \\\"Go to Error\\\",\\n\\t\\t\\t\\t\\t\\\"emoji\\\": true\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"value\\\": \\\"error\\\",\\n\\t\\t\\t\\t\\\"url\\\": \\\"[insert URL here]{{ $workflow.id }}/executions/{{ $execution.id }}\\\",\\n\\t\\t\\t\\t\\\"action_id\\\": \\\"button-action\\\",\\n\\t\\t\\t\\t\\\"style\\\": \\\"primary\\\"\\n\\t\\t\\t}\\n\\t\\t}\\n\\t]\\n}\",\n        \"channelId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"C0832GBAEN4\"\n        },\n        \"messageType\": \"block\",\n        \"otherOptions\": {},\n        \"authentication\": \"oAuth2\"\n      },\n      \"typeVersion\": 2.1\n    },\n    {\n      \"id\": \"b21c88d1-6f21-4ada-95ef-8ea91463e7ad\",\n      \"name\": \"Convert Raw Text To CSV\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        940,\n        300\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const csvData = $input.all()[0]?.json?.csv;\\n\\n// Use a regex to split on either ',' or ';'\\nconst lines = csvData.split(\\\"\\\\n\\\");\\nconst headers = lines[0].split(/,|;/);\\n\\nconst jsonData = lines.slice(1).map((line) => {\\n  // Split on ',' or ';' for each line\\n  const data = line.split(/,|;/);\\n  let obj = {};\\n  headers.forEach((header, i) => {\\n    obj[header] = data[i];\\n  });\\n  return obj;\\n});\\n\\nif (jsonData.length === 0) {\\n  throw new Error(\\\"No data to process\\\");\\n}\\n\\nreturn jsonData;\\n\"\n      },\n      \"typeVersion\": 2,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"a9803789-0397-4f5f-9cd2-cb630f983efc\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2380,\n        40\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 700,\n        \"height\": 600,\n        \"content\": \"## Sample of Raw CSV Data Send\\nUse the HTTP request node below to see how to send the Raw CSV data into this workflow. Don't forget to include the \\\\n's \"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"8fb97224-706b-41de-a7ab-cbe2191436e9\",\n      \"name\": \"Check if Value\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        1180,\n        300\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"d8d4cfda-f384-4154-8ad2-c3eabcb8c7ce\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"notExists\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.error }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"4484f424-429b-449f-85c2-dd6a135972a0\",\n      \"name\": \"Send Raw CSV\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2480,\n        200\n      ],\n      \"parameters\": {\n        \"url\": \"[insert URL here]\",\n        \"body\": \"album, year, US_peak_chart_post\\nThe White Stripes, 1999, -\\nDe Stijl, 2000, -\\nWhite Blood Cells, 2001, 61\\nElephant, 2003, 6\\nGet Behind Me Satan, 2005, 3\\nIcky Thump, 2007, 2\\nUnder Great White Northern Lights, 2010, 11\\nLive in Mississippi, 2011, -\\nLive at the Gold Dollar, 2012, -\\nNine Miles from the White City, 2013, -\\n\",\n        \"method\": \"POST\",\n        \"options\": {\n          \"response\": {\n            \"response\": {\n              \"responseFormat\": \"file\"\n            }\n          }\n        },\n        \"sendBody\": true,\n        \"contentType\": \"raw\",\n        \"rawContentType\": \"text/plain\"\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"70a46bce-32da-4868-a960-3ee1cefbed1f\",\n      \"name\": \"POST\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        140,\n        420\n      ],\n      \"webhookId\": \"add125c9-1591-4e1c-b68c-8032b99b6010\",\n      \"parameters\": {\n        \"path\": \"tool/csv-to-json\",\n        \"options\": {\n          \"binaryPropertyName\": \"data\"\n        },\n        \"httpMethod\": \"POST\",\n        \"responseMode\": \"responseNode\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"116cfc2c-6e5f-4367-8c80-e1341e7d196a\",\n      \"name\": \"Aggregate\",\n      \"type\": \"n8n-nodes-base.aggregate\",\n      \"position\": [\n        1580,\n        220\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"aggregate\": \"aggregateAllItemData\",\n        \"destinationFieldName\": \"jsondata\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"967dc555-2599-4fb0-b3e1-00164bae4120\",\n      \"name\": \"Aggregate1\",\n      \"type\": \"n8n-nodes-base.aggregate\",\n      \"position\": [\n        1580,\n        360\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"aggregate\": \"aggregateAllItemData\",\n        \"destinationFieldName\": \"jsondata\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"51c77def-cdf7-41da-bfd1-e585f0553672\",\n      \"name\": \"Success Response2\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"onError\": \"continueErrorOutput\",\n      \"position\": [\n        1900,\n        400\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"responseCode\": 200\n        },\n        \"respondWith\": \"json\",\n        \"responseBody\": \"={{ JSON.stringify($json.jsondata) }}\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"POST\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Switch\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Switch\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Extract From File\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Change Field\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Error Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Error Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Aggregate\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Success Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Aggregate1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Success Response2\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Change Field\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Convert Raw Text To CSV\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Error Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check if Value\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Aggregate1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Error Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Error Response\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Send to Error Channel\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Send to Error Channel\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Success Response\": {\n      \"main\": [\n        [],\n        [\n          {\n            \"node\": \"Send to Error Channel\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Extract From File\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Aggregate\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Error Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Success Response2\": {\n      \"main\": [\n        [],\n        [\n          {\n            \"node\": \"Send to Error Channel\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Convert Raw Text To CSV\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check if Value\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.extractFromFile",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.set",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.switch",
      "n8n-nodes-base.slack",
      "n8n-nodes-base.code",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.if",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.webhook",
      "n8n-nodes-base.aggregate",
      "n8n-nodes-base.aggregate",
      "n8n-nodes-base.respondToWebhook"
    ],
    "trigger": null
  }
}