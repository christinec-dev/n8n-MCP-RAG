{
  "source": "1591_Splitout_Code_Automate_Webhook.json",
  "index": 1,
  "content": "{\n  \"id\": \"P9Jr9s9yfcDXTe9R\",\n  \"meta\": {\n    \"instanceId\": \"a9f3b18652ddc96459b459de4fa8fa33252fb820a9e5a1593074f3580352864a\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"n8n Subworkflow Dependency Graph & Auto-Tagging\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"c3e6b9cb-4681-4778-b2f4-01c4a7d8c844\",\n      \"name\": \"Update workflow tags\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        3200,\n        740\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('SET instance_url').item.json.instance_url }}/api/v1/workflows/{{ $json.id }}/tags\",\n        \"method\": \"PUT\",\n        \"options\": {},\n        \"jsonBody\": \"={{ $json.tags }}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"n8nApi\"\n      },\n      \"credentials\": {\n        \"n8nApi\": {\n          \"id\": \"XXXXXX\",\n          \"name\": \"n8n account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"d348051c-cc81-40cf-9c9b-f42c6f16c9d6\",\n      \"name\": \"GET all workflows\",\n      \"type\": \"n8n-nodes-base.n8n\",\n      \"position\": [\n        1000,\n        0\n      ],\n      \"parameters\": {\n        \"filters\": {},\n        \"requestOptions\": {}\n      },\n      \"credentials\": {\n        \"n8nApi\": {\n          \"id\": \"XXXXXX\",\n          \"name\": \"n8n account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"bd1c08e5-f8fa-46a0-bfa9-ced09373d3eb\",\n      \"name\": \"List callers of subworkflows\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1200,\n        0\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const workflows = $input.all();\\nconst dependencyGraph = {};\\n\\n// Helper function to initialize a workflow entry\\nconst getOrCreateWorkflowEntry = (id, name, tags) => {\\n  if (!dependencyGraph[id]) {\\n    dependencyGraph[id] = { id, name, callers: [], tags };\\n  }\\n  return dependencyGraph[id];\\n};\\n\\n// Build lookup tables for workflow names and tags\\nconst workflowNameMap = {};\\nconst workflowTagsMap = {};\\n\\nworkflows.forEach(item => {\\n  workflowNameMap[item.json.id] = item.json.name;\\n  workflowTagsMap[item.json.id] = item.json.tags || [];\\n});\\n\\n// Process each workflow\\nworkflows.forEach(item => {\\n  const { id: workflowId, name: workflowName, nodes = [], tags = [] } = item.json;\\n  \\n  // Ensure the workflow itself exists in the output, with its own tags\\n  getOrCreateWorkflowEntry(workflowId, workflowName, tags);\\n\\n  // Process nodes that execute workflows\\n  nodes.forEach(({ type, parameters }) => {\\n    if (\\n      type !== 'n8n-nodes-base.executeWorkflow' &&\\n      type !== '@n8n/n8n-nodes-langchain.toolWorkflow'\\n    ) return;\\n\\n    let subWorkflowId = parameters?.workflowId?.value || parameters?.workflowId;\\n    if (subWorkflowId === \\\"={{ $workflow.id }}\\\") subWorkflowId = workflowId; // Handle self-referencing\\n\\n    if (subWorkflowId) {\\n      const subWorkflowName = workflowNameMap[subWorkflowId] || \\\"Unknown Workflow\\\"; // Lookup name\\n      const subWorkflowTags = workflowTagsMap[subWorkflowId] || []; // Lookup correct tags\\n\\n      const entry = getOrCreateWorkflowEntry(subWorkflowId, subWorkflowName, subWorkflowTags);\\n\\n      if (!entry.callers.includes(workflowId)) {\\n        entry.callers.push(workflowId);\\n      }\\n    }\\n  });\\n});\\n\\n// Convert to an array format\\nreturn Object.values(dependencyGraph);\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"8a1ad58d-feb4-428f-b1e3-df0c08486416\",\n      \"name\": \"Exclude uncalled workflows\",\n      \"type\": \"n8n-nodes-base.filter\",\n      \"position\": [\n        1400,\n        0\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"a1ccd5c3-ee85-412b-ac36-b68f9d2bc904\",\n              \"operator\": {\n                \"type\": \"number\",\n                \"operation\": \"gt\"\n              },\n              \"leftValue\": \"={{ $json.callers.length }}\",\n              \"rightValue\": 0\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"d654ca59-f4d6-4b67-9e87-021346ded854\",\n      \"name\": \"Exclude missing workflows\",\n      \"type\": \"n8n-nodes-base.filter\",\n      \"position\": [\n        1800,\n        0\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"d12ad828-2f0c-4e2d-a6d5-de28007253cf\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"false\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.hasField(\\\"error\\\") }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"56a8b861-0f20-4379-b094-ebd3976ab95c\",\n      \"name\": \"And every Sunday\",\n      \"type\": \"n8n-nodes-base.scheduleTrigger\",\n      \"position\": [\n        760,\n        160\n      ],\n      \"parameters\": {\n        \"rule\": {\n          \"interval\": [\n            {\n              \"field\": \"weeks\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"efacee31-5265-46e4-bc6d-c921a4169546\",\n      \"name\": \"When this workflow is activated\",\n      \"type\": \"n8n-nodes-base.n8nTrigger\",\n      \"position\": [\n        760,\n        0\n      ],\n      \"parameters\": {\n        \"events\": [\n          \"activate\"\n        ]\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0eb2bb9b-0529-4d8e-bdd9-78e0373de744\",\n      \"name\": \"GET workflow(s)\",\n      \"type\": \"n8n-nodes-base.n8n\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        1600,\n        0\n      ],\n      \"parameters\": {\n        \"operation\": \"get\",\n        \"workflowId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $json.id }}\"\n        },\n        \"requestOptions\": {}\n      },\n      \"credentials\": {\n        \"n8nApi\": {\n          \"id\": \"XXXXXX\",\n          \"name\": \"n8n account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"24efc8dc-103f-44fb-b229-8b8785ec75ed\",\n      \"name\": \"Count callers and identify new callers\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        2000,\n        0\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"34f1dd94-28dc-4105-8e81-8fcf2672e631\",\n              \"name\": \"id\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Exclude uncalled workflows').item.json.id }}\"\n            },\n            {\n              \"id\": \"809b0f5d-4a4f-470c-a514-1e2dc7df92c4\",\n              \"name\": \"name\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Exclude uncalled workflows').item.json.name }}\"\n            },\n            {\n              \"id\": \"422ef66d-c26a-454c-85fd-856fca668782\",\n              \"name\": \"callers\",\n              \"type\": \"array\",\n              \"value\": \"={{ $('Exclude uncalled workflows').item.json.callers }}\"\n            },\n            {\n              \"id\": \"3353b704-871b-4b22-95c2-2e6fd5bb1df3\",\n              \"name\": \"callers_count\",\n              \"type\": \"number\",\n              \"value\": \"={{ $('Exclude uncalled workflows').item.json.callers.length }}\"\n            },\n            {\n              \"id\": \"b23ab78d-2136-4cc3-9b9a-1b5ed89d1e28\",\n              \"name\": \"new_callers\",\n              \"type\": \"array\",\n              \"value\": \"={{ $('Exclude uncalled workflows').item.json.callers.difference($('Exclude uncalled workflows').item.json.tags.map(item => item.name)) }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"887bf07e-08f7-4491-aee4-a67ce0778319\",\n      \"name\": \"Loop through workflows\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [\n        2240,\n        0\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"dd5379fa-74be-44b7-9d49-9b1ae3fab425\",\n      \"name\": \"GET all tags\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2800,\n        220\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $json.instance_url }}/api/v1/tags\",\n        \"options\": {},\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"n8nApi\"\n      },\n      \"credentials\": {\n        \"n8nApi\": {\n          \"id\": \"XXXXXX\",\n          \"name\": \"n8n account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"ba913e58-4c40-4e97-b4da-18ff3050a895\",\n      \"name\": \"Remove existing tags from new_callers list\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        3000,\n        220\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"0b40958a-6ab4-4e35-9aee-1d1346dfe8a6\",\n              \"name\": \"id\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('SET instance_url').item.json.id }}\"\n            },\n            {\n              \"id\": \"95c97ab8-2945-4818-9a10-1ed1b69369bb\",\n              \"name\": \"name\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('SET instance_url').item.json.name }}\"\n            },\n            {\n              \"id\": \"2ed9bf03-2b09-43e1-8cb5-5e6e3c9c9e99\",\n              \"name\": \"callers\",\n              \"type\": \"array\",\n              \"value\": \"={{ $('SET instance_url').item.json.callers }}\"\n            },\n            {\n              \"id\": \"3477c08a-7c35-4c0e-85bb-67144e12bff0\",\n              \"name\": \"callers_count\",\n              \"type\": \"number\",\n              \"value\": \"={{ $('SET instance_url').item.json.callers_count }}\"\n            },\n            {\n              \"id\": \"f816907e-f679-4573-a14b-2dce6ef69eb1\",\n              \"name\": \"new_callers\",\n              \"type\": \"array\",\n              \"value\": \"={{ $('SET instance_url').item.json.new_callers.difference($json.data.map(item => item.name)) }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"745ed318-8c11-4eb7-8c62-82fa85d32dde\",\n      \"name\": \"If any new callers\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        2600,\n        560\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"42126431-2ae2-4265-aa4d-0d3e77a730b3\",\n              \"operator\": {\n                \"type\": \"array\",\n                \"operation\": \"notEmpty\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.new_callers }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"a22e9a9d-33ed-4c73-b557-03fc6eb572bd\",\n      \"name\": \"Split out new callers as new tags\",\n      \"type\": \"n8n-nodes-base.splitOut\",\n      \"position\": [\n        2800,\n        440\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"destinationFieldName\": \"new_tag_name\"\n        },\n        \"fieldToSplitOut\": \"new_callers\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2af955b7-f50f-4422-b5a7-4b330a350f5d\",\n      \"name\": \"Create new tags\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        3000,\n        440\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('SET instance_url').item.json.instance_url }}/api/v1/tags\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"sendBody\": true,\n        \"authentication\": \"predefinedCredentialType\",\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"name\",\n              \"value\": \"={{ $json.new_tag_name }}\"\n            }\n          ]\n        },\n        \"nodeCredentialType\": \"n8nApi\"\n      },\n      \"credentials\": {\n        \"n8nApi\": {\n          \"id\": \"XXXXXX\",\n          \"name\": \"n8n account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"03e389d8-3f48-4fcc-b097-7f631f4e98ad\",\n      \"name\": \"Return original pass through values\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        3200,\n        440\n      ],\n      \"parameters\": {\n        \"jsCode\": \"return $('SET instance_url').all();\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"8ff8a3f3-e12c-4206-916e-856e3e88c2ce\",\n      \"name\": \"Merge\",\n      \"type\": \"n8n-nodes-base.merge\",\n      \"position\": [\n        3400,\n        560\n      ],\n      \"parameters\": {\n        \"mode\": \"combine\",\n        \"options\": {\n          \"includeUnpaired\": true\n        },\n        \"combineBy\": \"combineByPosition\"\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"a1043d63-67e3-41d9-a5de-485068a9b5c7\",\n      \"name\": \"GET all tags again\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2600,\n        740\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('SET instance_url').item.json.instance_url }}/api/v1/tags\",\n        \"options\": {},\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"n8nApi\"\n      },\n      \"credentials\": {\n        \"n8nApi\": {\n          \"id\": \"XXXXXX\",\n          \"name\": \"n8n account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"4a81485a-6f1a-44b3-8a2e-64190572f423\",\n      \"name\": \"Create tag id:name dictionary\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        2800,\n        740\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"b5f7ba8d-1b94-4cae-a0d1-f2f14c7cb5a3\",\n              \"name\": \"tags\",\n              \"type\": \"object\",\n              \"value\": \"={{ $json.data.reduce((acc, { id, name }) => ({ ...acc, [id]: name }), {}) }}\"\n            },\n            {\n              \"id\": \"23a993a4-26e1-474a-9f0a-cedc9792a2f2\",\n              \"name\": \"callers\",\n              \"type\": \"array\",\n              \"value\": \"={{ $('Merge').item.json.callers }}\"\n            },\n            {\n              \"id\": \"0d451e74-d701-4ddb-b11c-8d5aa3efdde6\",\n              \"name\": \"id\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Merge').item.json.id }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"a1dbb6f5-fc0e-4506-890a-64c0da6b5b8c\",\n      \"name\": \"Retrieve tag ids and names from dictionary\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        3000,\n        740\n      ],\n      \"parameters\": {\n        \"include\": \"selected\",\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"762920de-98a6-4027-8e39-1244042f52e1\",\n              \"name\": \"tags\",\n              \"type\": \"array\",\n              \"value\": \"={{ [$json].flatMap(item => item.callers.map(id => ({ id: Object.keys(item.tags).find(key => item.tags[key] === id) }))).filter(item => item.id); }}\"\n            },\n            {\n              \"id\": \"1ff05b15-343a-49da-a70d-92c3a5d19011\",\n              \"name\": \"id\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.id }}\"\n            },\n            {\n              \"id\": \"f1afee56-a17f-422b-aabe-e59126efbb8e\",\n              \"name\": \"callers\",\n              \"type\": \"array\",\n              \"value\": \"={{ $json.callers }}\"\n            },\n            {\n              \"id\": \"39a0887c-8863-4968-9015-3add683eecd7\",\n              \"name\": \"name\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Merge').item.json.name }}\"\n            },\n            {\n              \"id\": \"4ae3b23c-1faf-4426-8e2e-5254a32d458b\",\n              \"name\": \"callers_count\",\n              \"type\": \"number\",\n              \"value\": \"={{ $('Merge').item.json.callers_count }}\"\n            }\n          ]\n        },\n        \"includeOtherFields\": true\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"174d23bc-3aa1-4e05-81e2-8f45f92a16ee\",\n      \"name\": \"Return dependency graph data\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        3400,\n        740\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"eda3be17-95a6-457f-b620-459cf11c9aee\",\n              \"name\": \"id\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Retrieve tag ids and names from dictionary').item.json.id }}\"\n            },\n            {\n              \"id\": \"02b79f2a-b128-4686-8bb2-78ff44c43698\",\n              \"name\": \"callers\",\n              \"type\": \"array\",\n              \"value\": \"={{ $('Retrieve tag ids and names from dictionary').item.json.callers }}\"\n            },\n            {\n              \"id\": \"816163c9-7a5c-445d-8b59-592af7c2a4ac\",\n              \"name\": \"name\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Retrieve tag ids and names from dictionary').item.json.name }}\"\n            },\n            {\n              \"id\": \"c860552e-70d0-4d61-9b9d-ccff690b703b\",\n              \"name\": \"callers_count\",\n              \"type\": \"number\",\n              \"value\": \"={{ $('Retrieve tag ids and names from dictionary').item.json.callers_count }}\"\n            }\n          ]\n        }\n      },\n      \"executeOnce\": true,\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"d45f7287-09f8-4de2-b74d-c55e200750aa\",\n      \"name\": \"Combine dependency graph values into labels\",\n      \"type\": \"n8n-nodes-base.aggregate\",\n      \"position\": [\n        2600,\n        -20\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fieldsToAggregate\": {\n          \"fieldToAggregate\": [\n            {\n              \"fieldToAggregate\": \"name\"\n            },\n            {\n              \"fieldToAggregate\": \"id\"\n            },\n            {\n              \"fieldToAggregate\": \"callers_count\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"aeee2b70-e6e2-4d3e-bfda-2b69a7e95ffc\",\n      \"name\": \"Visualize subworkflow dependency graph\",\n      \"type\": \"n8n-nodes-base.quickChart\",\n      \"position\": [\n        3000,\n        -20\n      ],\n      \"parameters\": {\n        \"data\": \"={{ $json.callers_count }}\",\n        \"chartType\": \"pie\",\n        \"labelsMode\": \"array\",\n        \"labelsArray\": \"={{ $json.name }}\",\n        \"chartOptions\": {\n          \"width\": 600,\n          \"format\": \"png\",\n          \"height\": 600,\n          \"backgroundColor\": \"#ffffff\"\n        },\n        \"datasetOptions\": {\n          \"borderColor\": \"#000\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f57710f5-788f-473d-b429-59eaf7193a7b\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        660,\n        -397.5668732742495\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 2909.758966302104,\n        \"height\": 1357.9229992534551,\n        \"content\": \"# n8n Subworkflow Dependency Graph & Auto-Tagging\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"ce9a88c8-5d6b-4b74-ae59-52128ec6d1af\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1160,\n        160\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"width\": 190.3269519041407,\n        \"height\": 172.4182620239646,\n        \"content\": \"The script builds a dependency graph of workflows by identifying which workflows call others (via execution nodes) while preserving workflow names, caller relationships, and tags.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"9e5bbc26-006e-45bf-be5c-d5e0cf7228f0\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1380,\n        160\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"width\": 150,\n        \"height\": 135.16347595207057,\n        \"content\": \"Here we filter out any workflows that are not [sub-workflows](https://docs.n8n.io/flow-logic/subworkflows/) (i.e. executed by other workflows).\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"6c957763-7410-4b3c-b08c-f73f2c502d5e\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1580,\n        160\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"width\": 345.30539364962834,\n        \"height\": 100.16655570271519,\n        \"content\": \"We verify that the sub-workflows we intend to tag exist in our instance (not old workflow ids left over after importing a workflow from another instance)\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"21ea4110-0f31-4621-b401-3bac222352d9\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        3160,\n        220\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"width\": 320.4824213076102,\n        \"height\": 97.51953145794394,\n        \"content\": \"If a tag is freshly created during an earlier iteration through the list of workflows, then it is removed from the list of new callers (i.e. new tags to create).\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0b04a2d3-5a10-4500-9450-5fee1ff77dec\",\n      \"name\": \"Sticky Note7\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2560,\n        180\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 188.64373499228745,\n        \"height\": 206.54161516323953,\n        \"content\": \"### Change instance URL\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"98812066-6de5-48c4-a945-6639158b6394\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2940,\n        -80\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"width\": 502.4185703091201,\n        \"height\": 243.8281544043028,\n        \"content\": \"## Generate chart\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"1427d97f-7971-494c-9594-b3ec81d83511\",\n      \"name\": \"Sticky Note6\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        3220,\n        -20\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 180.46986136506064,\n        \"height\": 135.95151736720237,\n        \"content\": \"### Pie Chart\\nBasic visualization of which sub-workflows are called most often by other workflows\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"1b8ee382-3e5d-4f6a-863b-100c84c3435e\",\n      \"name\": \"Sticky Note8\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        680,\n        500\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 434.64763783570623,\n        \"height\": 447.49544828389617,\n        \"content\": \"## Setup instructions:\\n1. [Set n8n API credentials](https://docs.n8n.io/api/authentication/)\\n2. Replace instance_url in workflow (highlighted in red)\\n\\n## Frequently used terms\\n1. **Callers**: Workflows that execute or trigger another workflow (a subworkflow) within n8n. They often use the Execute Workflow node to pass data and control execution flow.\\n2. **Sub-workflow**: A sub-workflow is any workflow that is executed by another workflow. These are often used for reusable automation logic, breaking down complex workflows into modular components.\\n3. **Dependency Graph**: A dependency graph visually represents the relationships between workflows in an n8n instance. It maps out which workflows call others, helping users understand execution dependencies, optimize workflow organization, and prevent unintended changes that may break subworkflows.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"c005ed7e-8a7c-4588-944d-be0fa28b6959\",\n      \"name\": \"SET instance_url\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        2600,\n        220\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"3bfad885-f167-47fa-a615-da3661c60d85\",\n              \"name\": \"instance_url\",\n              \"type\": \"string\",\n              \"value\": \"https://n8n.example.com\"\n            }\n          ]\n        },\n        \"includeOtherFields\": true\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"1ab2c9e9-fec1-4ab6-ace3-0bbe54a81058\",\n      \"name\": \"When viewed in a browser\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        760,\n        -160\n      ],\n      \"webhookId\": \"9ef127d4-bd1e-40db-999b-0881afbd2ab3\",\n      \"parameters\": {\n        \"path\": \"dependency-graph\",\n        \"options\": {},\n        \"responseMode\": \"responseNode\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"f1f930ed-2c42-4cab-a1a8-71b8810e0273\",\n      \"name\": \"Sticky Note9\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2940,\n        -360\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"width\": 502.4185703091201,\n        \"height\": 243.8281544043028,\n        \"content\": \"## Generate dependency graph\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"d47598c9-1a50-4754-a6a5-b6e9976d83a0\",\n      \"name\": \"Sticky Note10\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        3220,\n        -300\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 180.46986136506064,\n        \"height\": 135.95151736720237,\n        \"content\": \"### Dependency Graph\\nA visual representation of the relationships between the workflows in your n8n instance\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"18b2022a-dabc-4176-9b86-f3c1639d9b32\",\n      \"name\": \"Format workflow relationship data for rendering\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        2600,\n        -280\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Assuming the incoming JSON data looks like this:\\nconst workflows = $input.all(); // The input data passed to the Code Node\\n\\n// Function to build the Mermaid chart\\nconst buildMermaidChart = (workflows) => {\\n    let mermaidChart = 'graph TD\\\\n'; // Mermaid format for directed graph\\n\\n    // Iterate over workflows to build relationships\\n    workflows.forEach(workflow => {\\n        // Accessing the workflow JSON data\\n        const workflowData = workflow.json;\\n\\n        // If the workflow has callers (i.e., workflows that call this one)\\n        if (workflowData.callers && workflowData.callers.length > 0) {\\n            workflowData.callers.forEach(callerId => {\\n                // Add a directed edge in Mermaid format (caller --> current workflow)\\n                mermaidChart += `  ${callerId} --> ${workflowData.id}\\\\n`;\\n            });\\n        }\\n    });\\n\\n    return mermaidChart;\\n};\\n\\n// Generate the Mermaid chart\\nconst mermaidChart = buildMermaidChart(workflows);\\n\\n// Set the mermaid chart into the output JSON for the next node\\nreturn [\\n    {\\n        json: {\\n            mermaidChart: mermaidChart,\\n        },\\n    },\\n];\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"3655d6bd-45a1-4c2e-856f-44104f0bd832\",\n      \"name\": \"Visualize dependency graph with MermaidJS\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        3000,\n        -280\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"respondWith\": \"text\",\n        \"responseBody\": \"=<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>n8n Subworkflow Dependency Graph with Mermaid</title>\\n    <link href=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\\\" rel=\\\"stylesheet\\\">\\n    <script src=\\\"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\\\"></script>\\n    <style>\\n      .mermaid-container {\\n        margin-top: 20px;\\n        width: 100%;\\n        height: 100vh;\\n      }\\n    </style>\\n</head>\\n<body>\\n    <div class=\\\"container mt-4\\\">\\n        <h2>n8n Subworkflow Dependency Graph with Mermaid</h2>\\n        <div id=\\\"workflows-container\\\"></div>\\n    </div>\\n    <hr class=\\\"featurette-divider border-dark\\\" />\\n\\n    <script>\\n        // JSON object containing mermaidChart data\\n        const workflowsData = [\\n            {\\n                mermaidChart: `{{ $json.mermaidChart }}`\\n            }\\n        ];\\n\\n        document.addEventListener('DOMContentLoaded', () => {\\n            const workflowsContainer = document.getElementById('workflows-container');\\n\\n            // Render workflow immediately\\n            renderWorkflows(workflowsData);\\n\\n            function renderWorkflows(workflows) {\\n                workflows.forEach((workflow) => {\\n                    const mermaidContainer = document.createElement('div');\\n                    mermaidContainer.className = 'mermaid-container';\\n                    mermaidContainer.innerHTML = workflow.mermaidChart;\\n                    workflowsContainer.appendChild(mermaidContainer);\\n                    mermaid.init(undefined, mermaidContainer); // Initialize mermaid to render the graph\\n                });\\n            }\\n        });\\n\\n        // Initialize mermaid with the config\\n        mermaid.initialize({ startOnLoad: false });\\n    </script>\\n\\n    <script src=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\\\"></script>\\n</body>\\n</html>\\n\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"d9b0e9be-1794-4f5e-899c-b5d1e22baa58\",\n      \"name\": \"Sticky Note11\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        680,\n        -320\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 653.2415806326139,\n        \"height\": 140.62930090784633,\n        \"content\": \"## About this workflow\\nThis workflow analyzes an n8n instance to detect dependencies between workflows. It identifies which workflows call others ([sub-workflows](https://docs.n8n.io/flow-logic/subworkflows/)), builds a dependency graph, and automatically tags subworkflows with their calling workflows. This makes it easier to track dependencies, optimize workflow structures, and maintain documentation in complex n8n environments.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"357037ff-f5f7-4b5d-9b72-7c2aec393de4\",\n      \"name\": \"Sticky Note12\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1360,\n        -320\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 266.5295926113459,\n        \"height\": 95.5709893724457,\n        \"content\": \"## About the maker\\n**[Find Ludwig Gerdes on LinkedIn](https://www.linkedin.com/in/ludwiggerdes)**\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": true,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"f1c5dcd4-bcdb-4336-922f-656adc9c36a6\",\n  \"connections\": {\n    \"Merge\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"GET all tags again\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"GET all tags\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Remove existing tags from new_callers list\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Create new tags\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Return original pass through values\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"GET workflow(s)\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Exclude missing workflows\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"And every Sunday\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"GET all workflows\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"SET instance_url\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"GET all tags\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"GET all workflows\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"List callers of subworkflows\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"GET all tags again\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Create tag id:name dictionary\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"If any new callers\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split out new callers as new tags\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Merge\",\n            \"type\": \"main\",\n            \"index\": 1\n          }\n        ]\n      ]\n    },\n    \"Update workflow tags\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Return dependency graph data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Loop through workflows\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Combine dependency graph values into labels\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Format workflow relationship data for rendering\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"SET instance_url\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When viewed in a browser\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"GET all workflows\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Exclude missing workflows\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Count callers and identify new callers\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Exclude uncalled workflows\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"GET workflow(s)\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"List callers of subworkflows\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Exclude uncalled workflows\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Return dependency graph data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop through workflows\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Create tag id:name dictionary\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Retrieve tag ids and names from dictionary\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When this workflow is activated\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"GET all workflows\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Split out new callers as new tags\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Create new tags\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Return original pass through values\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Count callers and identify new callers\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop through workflows\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Remove existing tags from new_callers list\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"If any new callers\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Retrieve tag ids and names from dictionary\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Update workflow tags\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Combine dependency graph values into labels\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Visualize subworkflow dependency graph\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Format workflow relationship data for rendering\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Visualize dependency graph with MermaidJS\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}",
  "metadata": {
    "node_types": [
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.n8n",
      "n8n-nodes-base.code",
      "n8n-nodes-base.filter",
      "n8n-nodes-base.filter",
      "n8n-nodes-base.scheduleTrigger",
      "n8n-nodes-base.n8nTrigger",
      "n8n-nodes-base.n8n",
      "n8n-nodes-base.set",
      "n8n-nodes-base.splitInBatches",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.set",
      "n8n-nodes-base.if",
      "n8n-nodes-base.splitOut",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.code",
      "n8n-nodes-base.merge",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.set",
      "n8n-nodes-base.aggregate",
      "n8n-nodes-base.quickChart",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.set",
      "n8n-nodes-base.webhook",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.code",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.stickyNote"
    ],
    "trigger": null
  }
}