{
  "source": "docs/courses/level-two/chapter-1.md",
  "index": 8,
  "content": "## Transforming data\n\nThe incoming data from some nodes may have a different data structure than the one used in n8n. In this case, you need to [transform the data](/data/transforming-data.md), so that each item can be processed individually.\n\nThe two most common operations for data transformation are:\n\n- Creating multiple items from one item\n- Creating a single item from multiple items\n\nThere are several ways to transform data for the purposes mentioned above:\n\n- Use n8n's [data transformation nodes](/data/index.md#data-transformation-nodes). Use these nodes to modify the structure of incoming data that contain lists (arrays) without needing to use JavaScript code in the **Code node**:\n\t- Use the [**Split Out node**](/integrations/builtin/core-nodes/n8n-nodes-base.splitout.md) to separate a single data item containing a list into multiple items.\n\t- Use the [**Aggregate node**](/integrations/builtin/core-nodes/n8n-nodes-base.aggregate.md) to take separate items, or portions of them, and group them together into individual items.\n- Use the **Code node** to write JavaScript functions to modify the data structure of incoming data using the **Run Once for All Items** mode:\n    - To create multiple items from a single item, you can use JavaScript code like this. This example assumes that the item has a key named `data` set to an array of items in the form of: `[{ \"data\": [{<item_1>}, {<item_2>}, ...] }]`:\n\t```javascript\n\treturn $input.first().json.data.map(item => {\n        return {\n            json: item\n        }\n    });\n\t```\n\t- To create a single item from multiple items, you can use this JavaScript code:\n\t```javascript\n    return [\n    \t{\n        \tjson: {\n        \t\tdata_object: $input.all().map(item => item.json)\n        \t}\n        }\n      ];\n\t```\n\nThese JavaScript examples assume your entire input is what you want to transform. As in the exercise above, you can also execute either operation on a specific field by identifying that in the items list, for example, if our workEmail example had multiple emails in a single field, we could run some code like this:\n```javascript\nlet items = $input.all();\nreturn items[0].json.workEmail.map(item => {\n\treturn {\n\t\tjson: item\n\t}\n});\n```"
}