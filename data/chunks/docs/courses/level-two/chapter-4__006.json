{
  "source": "docs/courses/level-two/chapter-4.md",
  "index": 6,
  "content": "## Throwing exceptions in workflows\n\nAnother way of troubleshooting workflows is to include a [**Stop and Error node**](/integrations/builtin/core-nodes/n8n-nodes-base.stopanderror.md) in your workflow. This node throws an error. You can specify the error type:\n\n- **Error Message**: returns a custom message about the error\n- **Error Object**: returns the type of error\n\nYou can only use the **Stop and Error node** as the last node in a workflow.\n\n/// note | When to throw errors\nThrowing exceptions with the **Stop and Error node** is useful for verifying the data (or assumptions about the data) from a node and returning custom error messages.\n\nIf you are working with data from a third-party service, you may come across problems such as:\n\n- Wrongly formatted JSON output\n- Data with the wrong type (for example, numeric data that has a non-numeric value)\n- Missing values\n- Errors from remote servers\n\nThough this kind of invalid data might not cause the workflow to fail right away, it could cause problems later on, and then it can become difficult to track the source error. This is why it's better to throw an error at the time you know there might be a problem.\n\n<figure><img src=\"/_images/courses/level-two/chapter-four/exercise_errors_stopanderror.png\" alt=\"Stop and Error node with error message\" style=\"width:100%\"><figcaption align = \"center\"><i>Stop and Error node with error message</i></figcaption></figure>\n///"
}