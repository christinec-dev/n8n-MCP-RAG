{
  "source": "docs/workflows/subworkflow-conversion.md",
  "index": 5,
  "content": "## Things to keep in mind\n\nMost sub-workflow conversions work without issues, but there are some caveats and limitations to keep in mind:\n\n* **You must set type constraints for input and output manually**: By default, sub-workflow input and output allow all types. You can set expected types in sub-workflow's [Execute Sub-workflow Trigger node](/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflowtrigger.md) and [Edit Fields (set) node](/integrations/builtin/core-nodes/n8n-nodes-base.set.md) (labeled as **Return** and only included if the sub-workflow has outputs).\n* **Limited support for AI nodes**: When dealing with sub-nodes like AI tools, you must select them all and may need to duplicate any nodes shared with other AI Agents before conversion.\n- **Uses v1 execution ordering:** New workflows use [`v1` execution ordering](/flow-logic/execution-order.md) regardless of the parent workflow's settings - you can change this back in the settings.\n* **Accessor functions like `first()`, `last()`, and `all()` require extra care**: Expressions using these functions don't always translate cleanly to a sub-workflow context. n8n may transform them to try to preserve their functionality, but you should check that they work as intended in their new context.\n\n\t/// note | Sub-node parameter suffixes\n\tn8n adds suffixes like `_firstItem`, `_lastItem`, and `_allItems` to variable names accessed by these functions. This helps preserve information about the original expression, since item ordering may be different in the sub-workflow context.\n\t///\n\n<!-- vale Vale.Spelling = NO -->\n* **The `itemMatching` function requires a fixed index**: You can't use expressions for the index value when using the [`itemMatching` function](/code/builtin/output-other-nodes.md). You must pass it a fixed number.\n<!-- vale Vale.Spelling = YES -->"
}