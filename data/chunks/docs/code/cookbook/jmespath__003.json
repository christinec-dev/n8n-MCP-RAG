{
  "source": "docs/code/cookbook/jmespath.md",
  "index": 3,
  "content": "## The `jmespath()` method\n\nn8n provides a custom method, `jmespath()`. Use this method to perform a search on a JSON object using the JMESPath query language.\n\nThe basic syntax is: \n\n=== \"JavaScript\"\n\t```js\n\t$jmespath(object, searchString)\n\t```\n=== \"Python\"\n\t```python\n\t_jmespath(object, searchString)\n\t```\n\n\nTo help understand what the method does, here is the equivalent longer JavaScript:\n\n\n```js\nvar jmespath = require('jmespath');\njmespath.search(object, searchString);\n```\n\n/// note | Expressions must be single-line\nThe longer code example doesn't work in Expressions, as they must be single-line.\n///\n\n`object` is a JSON object, such as the output of a previous node. `searchString` is an expression written in the JMESPath query language. The [JMESPath Specification](https://jmespath.org/specification.html#jmespath-specification) provides a list of supported expressions, while their [Tutorial](https://jmespath.org/tutorial.html) and [Examples](https://jmespath.org/examples.html) provide interactive examples.\n\n/// warning | Search parameter order\nThe examples in the [JMESPath Specification](https://jmespath.org/specification.html#jmespath-specification) follow the pattern `search(searchString, object)`. The [JMESPath JavaScript library](https://github.com/jmespath/jmespath.js/), which n8n uses, supports `search(object, searchString)` instead. This means that when using examples from the JMESPath documentation, you may need to change the order of the search function parameters.\n///"
}