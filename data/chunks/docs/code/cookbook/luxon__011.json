{
  "source": "docs/code/cookbook/luxon.md",
  "index": 11,
  "content": "### A longer example: How many days to Christmas?\n\nThis example brings together several Luxon features, uses JMESPath, and does some basic string manipulation. \n\nThe scenario: you want a countdown to 25th December. Every day, it should tell you the number of days remaining to Christmas. You don't want to update it for next year - it needs to seamlessly work for every year.\n\n=== \"Expressions (JavaScript)\"\n\n\t```js\n\t{{\"There are \" + $today.diff(DateTime.fromISO($today.year + '-12-25'), 'days').toObject().days.toString().substring(1) + \" days to Christmas!\"}}\n\t```\n\n\tThis outputs `\"There are <number of days> days to Christmas!\"`. For example, on 9th March, it outputs \"There are 291 days to Christmas!\".\n\n\tA detailed explanation of what the expression does:\n\n\t* `{{`: indicates the start of the expression.\n\t* `\"There are \"`: a string. \n\t* `+`: used to join two strings.\n\t* `$today.diff()`: This is similar to the example in [Get the time between two dates](#get-the-time-between-two-dates), but it uses n8n's custom `$today` variable.\n\t* `DateTime.fromISO($today.year + '-12-25'), 'days'`: this part gets the current year using `$today.year`, turns it into an ISO string along with the month and date, and then takes the whole ISO string and converts it to a Luxon DateTime data structure. It also tells Luxon that you want the duration in days.\n\t* `toObject()` turns the result of diff() into a more usable object. At this point, the expression returns `[Object: {\"days\":-<number-of-days>}]`. For example, on 9th March, `[Object: {\"days\":-291}]`.\n\t* `.days` uses JMESPath syntax to retrieve just the number of days from the object. For more information on using JMESPath with n8n, refer to our [JMESpath](/code/cookbook/jmespath.md) documentation. This gives you the number of days to Christmas, as a negative number.\n\t* `.toString().substring(1)` turns the number into a string and removes the `-`.\n\t* `+ \" days to Christmas!\"`: another string, with a `+` to join it to the previous string.\n\t* `}}`: indicates the end of the expression.\n\n=== \"Code node (JavaScript)\"\n\n\t```js\n\tlet daysToChristmas = \"There are \" + $today.diff(DateTime.fromISO($today.year + '-12-25'), 'days').toObject().days.toString().substring(1) + \" days to Christmas!\";\n\t```\n\n\tThis outputs `\"There are <number of days> days to Christmas!\"`. For example, on 9th March, it outputs \"There are 291 days to Christmas!\".\n\n\tA detailed explanation of what the code does:\n\n\t* `\"There are \"`: a string. \n\t* `+`: used to join two strings.\n\t* `$today.diff()`: This is similar to the example in [Get the time between two dates](#get-the-time-between-two-dates), but it uses n8n's custom `$today` variable.\n\t* `DateTime.fromISO($today.year + '-12-25'), 'days'`: this part gets the current year using `$today.year`, turns it into an ISO string along with the month and date, and then takes the whole ISO string and converts it to a Luxon DateTime data structure. It also tells Luxon that you want the duration in days.\n\t* `toObject()` turns the result of diff() into a more usable object. At this point, the expression returns `[Object: {\"days\":-<number-of-days>}]`. For example,"
}