{
  "source": "docs/hosting/logging-monitoring/logging.md",
  "index": 12,
  "content": "### Adding logs\n\nOnce the `LoggerProxy` class gets initialized in the project, you can import it to any other file and add logs.\n\nConvenience methods are provided for all logging levels, so new logs can be added whenever needed using the format `Logger.<logLevel>('<message>', ...meta)`, where `meta` represents any additional properties desired beyond `message`.\n\nIn the example above, we use the standard log levels described [above](#log-levels). The `message` argument is a string, and `meta` is a data object.\n\n```js\n// You have to import the LoggerProxy. We rename it to Logger to make it easier\n\nimport {\n\tLoggerProxy as Logger\n} from 'n8n-workflow';\n\n// Info-level logging of a trigger function, with workflow name and workflow ID as additional metadata properties\n\nLogger.info(`Polling trigger initiated for workflow \"${workflow.name}\"`, {workflowName: workflow.name, workflowId: workflow.id});\n```\n\nWhen creating new loggers, some useful standards to keep in mind are:\n\n- Craft log messages to be as human-readable as possible. For example, always wrap names in quotes.\n- Duplicating information in the log message and metadata, like workflow name in the above example, can be useful as messages are easier to search and metadata enables easier filtering.\n- Include multiple IDs (for example, `executionId`, `workflowId`, and `sessionId`) throughout all logs.\n- Use node types instead of node names (or both) as this is more consistent, and so easier to search."
}