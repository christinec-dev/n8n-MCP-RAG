{
  "source": "docs/integrations/builtin/credentials/mqtt.md",
  "index": 6,
  "content": "## Using broker connection\n\nTo configure this credential, you'll need:\n\n- Your MQTT broker's **Protocol**\n- The **Host**\n- The **Port**\n- A **Username** and **Password** to authenticate with\n- If you're using **SSL**, the relevant certificates and keys\n\nTo set things up:\n\n1. Select the broker's **Protocol**, which determines the URL n8n uses. Options include:\n    - **Mqtt**: Begin the URL with the standard `mqtt:` protocol.\n    - **Mqtts**: Begin the URL with the secure `mqtts:` protocol.\n    - **Ws**: Begin the URL with the WebSocket `ws:` protocol.\n2. Enter your broker **Host**.\n3. Enter the **Port** number n8n should use to connect to the broker host.\n4. Enter the **Username** to log into the broker as.\n5. Enter that user's **Password**.\n6. If you want to receive QoS 1 and 2 messages while offline, turn off the **Clean Session** toggle.\n7. Enter a **Client ID** you'd like the credential to use. If you leave this blank, n8n will generate one for you. You can use a fixed or expression-based Client ID.\n    - Client IDs can be useful to identify and track connection access. n8n recommends using something with `n8n` in it for easier auditing.\n8. If your MQTT broker uses SSL, turn the **SSL** toggle on. Once you turn it on:\n    1. Select whether to use **Passwordless** connection with certificates, which is like the SASL mechanism EXTERNAL. If turned on:\n        1. Select whether to **Reject Unauthorized Certificate**: If turned off, n8n will connect even if the certificate validation fails.\n        2. Add an SSL **Client Certificate**.\n        3. Add an SSL **Client Key** for the Client Certificate.\n    2. One or more SSL **CA Certificates**.\n\nRefer to your MQTT broker provider's documentation for more detailed configuration instructions."
}