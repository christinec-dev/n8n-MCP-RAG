{
  "source": "docs/integrations/builtin/credentials/postgres.md",
  "index": 6,
  "content": "## Using database connection\n\nTo configure this credential, you'll need:\n\n- The **Host** or domain name for the server.\n- The **Database** name.\n- A **User** name.\n- A user **Password**.\n- **Ignore SSL Issues**: Set whether the credential connects if SSL validation fails.\n- **SSL**: Choose whether to use SSL in your connection.\n- The **Port** number to use for the connection.\n- **SSH Tunnel**: Choose if you want to use SSH to encrypt the network connection with the Postgres server.\n\nTo set up the database connection:\n\n1. Enter the **Host** or domain name for the Postgres server. You can either run the `/conninfo` command to confirm the host name or run this query:\n\n    ```\n    SELECT inet_server_addr();\n    ```\n\n2. Enter the **Database** name. Run the `/conninfo` command to confirm the database name.\n3. Enter the **User** name of the user you wish to connect as.\n4. Enter the user's **Password**.\n5. **Ignore SSL Issues**: If you turn this on, the credential will connect even if SSL validation fails.\n6. **SSL**: Choose whether to use SSL in your connection. Refer to Postgres [SSL Support](https://www.postgresql.org/docs/16/libpq-ssl.html) for more information. Options include:\n    - **Allow**: Sets the `ssl-mode` parameter to `allow`. First try a non-SSL connection; if that fails, try an SSL connection.\n    - **Disable**: Sets the `ssl-mode` parameter to `disable`. Only try a non-SSL connection.\n    - **Require**: Sets the `ssl-mode` parameter to `require`. Only try an SSL connection. If a root CA file is present, verify that a trusted certificate authority (CA) issued the server certificate.\n7. Enter the **Port** number to use for the connection. You can either run the `/conninfo` command to confirm the host name or run this query:\n\n    ```\n    SELECT inet_server_port();\n    ```\n\n8. **SSH Tunnel**: Turn this setting on to connect to the database over SSH. Refer to [SSH tunnel limitations](#ssh-tunnel-limitations) for some guidance around using SSH. Once turned on, you'll need:\n    1. Select **SSH Authenticate with** to set the SSH Tunnel type to build:\n        - Select **Password** if you want to connect to SSH using a password.\n        - Select **Private Key** if you want to connect to SSH using an identity file (private key) and a passphrase.\n    2. Enter the remote bind address you're connecting to as the **SSH Host**.\n    3. **SSH Port**: Enter the local port number for the SSH tunnel.\n    4. **SSH Postgres Port**: Enter the remote end of the tunnel, the port number the database server is using.\n    5. **SSH User**: Enter the username to log in as.\n    6. If you selected **Password** for SSH Authenticate with, add the user's **SSH Password**.\n    7. If you selected **Private Key** for **SSH Authenticate with**:\n        1. Add the contents of the **Private Key** or identity file used for SSH.\n        2. If the **Private Key** was created with a passphrase, enter that **Passphrase**. If the **Private Ke**y has no passphrase, leave this field blank.\n\nRefer to [Secure TCP/IP Connections with SSH Tunnels](https://www.postgresql.org/docs/16/ssh-tunnels.html) for more information."
}