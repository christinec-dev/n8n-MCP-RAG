{
  "source": "docs/integrations/creating-nodes/plan/node-ui-design.md",
  "index": 9,
  "content": "### Conventions by field type\n\n#### Credentials\n\nn8n automatically displays credential fields as the top fields in the node.\n\n#### Resources and operations\n\nAPIs usually involve doing something to data. For example, \"get all tasks.\" In this example, \"task\" is the resource, and \"get all\" is the operation.\n\nWhen your node has this resource and operation pattern, your first field should be **Resource**, and your second field should be **Operation**.\n\n#### Required fields\n\nOrder fields by:\n\n* Most important to least important.\n* Scope: from broad to narrow. For example, you have fields for **Document**, **Page**, and **Text to insert**, put them in that order.\n\n#### Optional fields\n\n* Order fields alphabetically. To group similar things together, you can rename them. For example, rename **Email** and **Secondary Email** to **Email (primary)** and **Email (secondary)**.\n* If an optional field has a default value that the node uses when the value isn't set, load the field with that value. Explain this in the field description. For example, **Defaults to false**.\n* Connected fields: if one optional fields is dependent on another, bundle them together. They should both be under a single option that shows both fields when selected.\n* If you have a lot of optional fields, consider grouping them by theme.\n\n#### Help\n\nThere are five types of help built in to the GUI:\n\n* Info boxes: yellow boxes that appear between fields. Refer to [UI elements | Notice](/integrations/creating-nodes/build/reference/ui-elements.md#notice) for more information.\n  * Use info boxes for essential information. Don't over-use them. By making them rare, they stand out more and grab the user's attention.\n* Parameter hints: lines of text displayed beneath a user input field. Use this when there's something the user needs to know, but an info box would be excessive.\n* Node hints: provide help in the input panel, output panel, or node details view. Refer to [UI elements | Hints](/integrations/creating-nodes/build/reference/ui-elements.md#hints) for more information.\n* Tooltips: callouts that appear when the user hovers over the tooltip icon ![\"Screenshot of the tooltip icon. The icon is a ? in a grey circle\"](/_images/common-icons/help-tooltip.png). Use tooltips for extra information that the user might need.\n  * You don't have to provide a tooltip for every field. Only add one if it contains useful information. \n  * When writing tooltips, think about what the user needs. Don't just copy-paste API parameter descriptions. If the description doesn't make sense, or has errors, improve it.\n* Placeholder text: n8n can display placeholder text in a field where the user hasn't entered a value. This can help the user know what's expected in that field.\n\nInfo boxes, hints, and tooltips can contain links to more information.\n\n#### Errors\n\nMake it clear which fields are required.\n\nAdd validation rules to fields if possible. For example, check for valid email patterns if the field expects an email.\n\nWhen displaying errors, make sure only the main error message displays in the red error title. More information should go in **Details**.\n\nRefer to [Node Error Handling](/integrations/creating-nodes/build/reference/error-handling.md) for more information.\n\n#### Toggles\n\n* Tooltips for binary states should start with something like **Whether to . . . **.\n* You may need a list rather than a toggle:\n    * Use toggles when it's clear what happens in a false state. For example, **Simplify Output?**. The alternative (don't simplify output) is clear.\n    * Use a dropdown list with named options when you need more clarity. For example, **Append?**. What happens if you don't append is"
}