{
  "source": "docs/integrations/creating-nodes/plan/choose-node-method.md",
  "index": 4,
  "content": "## Syntax differences\n\nTo understand the difference between the declarative and programmatic styles, compare the two code snippets below. This example creates a simplified version of the SendGrid integration, called \"FriendGrid.\" The following code snippets aren't complete: they emphasize the differences in the node building styles.\n\nIn programmatic style:\n\n```js\nimport {\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n\tIRequestOptions,\n} from 'n8n-workflow';\n\n// Create the FriendGrid class\nexport class FriendGrid implements INodeType {\n  description: INodeTypeDescription = {\n    displayName: 'FriendGrid',\n    name: 'friendGrid',\n    . . .\n    properties: [\n      {\n        displayName: 'Resource',\n        . . .\n      },\n      {\n        displayName: 'Operation',\n        name: 'operation',\n        type: 'options',\n        displayOptions: {\n          show: {\n              resource: [\n              'contact',\n              ],\n          },\n        },\n        options: [\n          {\n            name: 'Create',\n            value: 'create',\n            description: 'Create a contact',\n          },\n        ],\n        default: 'create',\n        description: 'The operation to perform.',\n      },\n      {\n        displayName: 'Email',\n        name: 'email',\n        . . .\n      },\n      {\n        displayName: 'Additional Fields',\n        // Sets up optional fields\n      },\n    ],\n};\n\n  async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n    let responseData;\n    const resource = this.getNodeParameter('resource', 0) as string;\n    const operation = this.getNodeParameter('operation', 0) as string;\n    //Get credentials the user provided for this node\n    const credentials = await this.getCredentials('friendGridApi') as IDataObject;\n\n    if (resource === 'contact') {\n      if (operation === 'create') {\n      // Get email input\n      const email = this.getNodeParameter('email', 0) as string;\n      // Get additional fields input\n      const additionalFields = this.getNodeParameter('additionalFields', 0) as IDataObject;\n      const data: IDataObject = {\n          email,\n      };\n\n      Object.assign(data, additionalFields);\n\n      // Make HTTP request as defined in https://sendgrid.com/docs/api-reference/\n      const options: IRequestOptions = {\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': `Bearer ${credentials.apiKey}`,\n        },\n        method: 'PUT',\n        body: {\n            contacts: [\n            data,\n            ],\n        },\n        url: `https://api.sendgrid.com/v3/marketing/contacts`,\n        json: true,\n      };\n      responseData = await this.helpers.httpRequest(options);\n      }\n    }\n    // Map data to n8n data\n    return [this.helpers.returnJsonArray(responseData)];\n  }\n}\n```\n\nIn declarative style:\n\n```js\nimport { INodeType, INodeTypeDescription } from 'n8n-workflow';\n\n// Create the FriendGrid class\nexport class FriendGrid implements INodeType {\n  description: INodeTypeDescription = {\n    displayName: 'FriendGrid',\n    name: 'friendGrid',\n    . . .\n    // Set up the basic request configuration\n    requestDefaults: {\n      baseURL: 'https://api.sendgrid.com/v3/marketing'\n    },\n    properties: [\n      {\n        displayName: 'Resource',\n        . . .\n      },\n      {\n        displayName: 'Operation',\n        name: 'operation',\n        type: 'options',\n        displayOptions: {\n          show: {\n            resource: [\n              'contact',\n            ],\n          },\n        },\n        options: [\n          {\n            name: 'Create',\n            value: 'create',\n            description: 'Create a contact',\n            // Add the routing object\n            routing: {\n              request: {\n                method: 'POST',"
}