{
  "source": "docs/integrations/creating-nodes/build/programmatic-style-node.md",
  "index": 7,
  "content": "### Step 3: Define the node in the base file\n\nEvery node must have a base file. Refer to [Node base file](/integrations/creating-nodes/build/reference/node-base-files/index.md) for detailed information about base file parameters.\n\nIn this example, the file is `FriendGrid.node.ts`. To keep this tutorial short, you'll place all the node functionality in this one file. When building more complex nodes, you should consider splitting out your functionality into modules. Refer to [Node file structure](/integrations/creating-nodes/build/reference/node-file-structure.md) for more information.\n\n#### Step 3.1: Imports\n\nStart by adding the import statements:\n\n```typescript\nimport {\n\tIExecuteFunctions,\n} from 'n8n-core';\n\nimport {\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\n\nimport {\n\tOptionsWithUri,\n} from 'request';\n```\n\n#### Step 3.2: Create the main class\n\nThe node must export an interface that implements `INodeType`. This interface must include a `description` interface, which in turn contains the `properties` array.\n\n/// note | Class names and file names\nMake sure the class name and the file name match. For example, given a class `FriendGrid`, the filename must be `FriendGrid.node.ts`.\n///\n```typescript\nexport class FriendGrid implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\t// Basic node details will go here\n\t\tproperties: [\n\t\t\t// Resources and operations will go here\n\t\t],\n\t};\n\t// The execute method will go here\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t}\n}\n```\n\n#### Step 3.3: Add node details\n\nAll programmatic nodes need some basic parameters, such as their display name and icon. Add the following to the `description`:\n\n```typescript\ndisplayName: 'FriendGrid',\nname: 'friendGrid',\nicon: 'file:friendGrid.svg',\ngroup: ['transform'],\nversion: 1,\ndescription: 'Consume SendGrid API',\ndefaults: {\n\tname: 'FriendGrid',\n},\ninputs: ['main'],\noutputs: ['main'],\ncredentials: [\n\t{\n\t\tname: 'friendGridApi',\n\t\trequired: true,\n\t},\n],\n```\n\nn8n uses some of the properties set in `description` to render the node in the Editor UI. These properties are `displayName`, `icon`, and `description`.\n\n#### Step 3.4: Add the resource\n\nThe resource object defines the API resource that the node uses. In this tutorial, you're creating a node to access one of SendGrid's API endpoints: `/v3/marketing/contacts`. This means you need to define a resource for this endpoint. Update the `properties` array with the resource object:\n\n```typescript\n{\n\tdisplayName: 'Resource',\n\tname: 'resource',\n\ttype: 'options',\n\toptions: [\n\t\t{\n\t\t\tname: 'Contact',\n\t\t\tvalue: 'contact',\n\t\t},\n\t],\n\tdefault: 'contact',\n\tnoDataExpression: true,\n\trequired: true,\n\tdescription: 'Create a new contact',\n},\n```\n\n`type` controls which UI element n8n displays for the resource, and tells n8n what type of data to expect from the user. `options` results in n8n adding a dropdown that allows users to choose one option. Refer to [Node UI elements](/integrations/creating-nodes/build/reference/ui-elements.md) for more information.\n\n#### Step 3.5: Add operations\n\nThe operations object defines what you can do with a resource. It usually relates to REST API verbs (GET, POST, and so on). In this tutorial, there's one operation: create a contact. It has one required field, the email address for the contact"
}