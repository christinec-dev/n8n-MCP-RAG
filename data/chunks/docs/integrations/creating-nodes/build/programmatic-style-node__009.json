{
  "source": "docs/integrations/creating-nodes/build/programmatic-style-node.md",
  "index": 9,
  "content": "### Step 4: Add the execute method\n\nYou've set up the node UI and basic information. It's time to map the node UI to API requests, and make the node actually do something.\n\nThe `execute` method runs every time the node runs. In this method, you have access to the input items and to the parameters that the user set in the UI, including the credentials.\n\nAdd the following the `execute` method in the `FriendGrid.node.ts`:\n\n```typescript\n// Handle data coming from previous nodes\nconst items = this.getInputData();\nlet responseData;\nconst returnData = [];\nconst resource = this.getNodeParameter('resource', 0) as string;\nconst operation = this.getNodeParameter('operation', 0) as string;\n\n// For each item, make an API call to create a contact\nfor (let i = 0; i < items.length; i++) {\n\tif (resource === 'contact') {\n\t\tif (operation === 'create') {\n\t\t\t// Get email input\n\t\t\tconst email = this.getNodeParameter('email', i) as string;\n\t\t\t// Get additional fields input\n\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i) as IDataObject;\n\t\t\tconst data: IDataObject = {\n\t\t\t\temail,\n\t\t\t};\n\n\t\t\tObject.assign(data, additionalFields);\n\n\t\t\t// Make HTTP request according to https://sendgrid.com/docs/api-reference/\n\t\t\tconst options: OptionsWithUri = {\n\t\t\t\theaders: {\n\t\t\t\t\t'Accept': 'application/json',\n\t\t\t\t},\n\t\t\t\tmethod: 'PUT',\n\t\t\t\tbody: {\n\t\t\t\t\tcontacts: [\n\t\t\t\t\t\tdata,\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\turi: `https://api.sendgrid.com/v3/marketing/contacts`,\n\t\t\t\tjson: true,\n\t\t\t};\n\t\t\tresponseData = await this.helpers.requestWithAuthentication.call(this, 'friendGridApi', options);\n\t\t\treturnData.push(responseData);\n\t\t}\n\t}\n}\n// Map data to n8n data structure\nreturn [this.helpers.returnJsonArray(returnData)];\n```\n\nNote the following lines of this code:\n\n```typescript\nconst items = this.getInputData();\n... \nfor (let i = 0; i < items.length; i++) {\n\t...\n\tconst email = this.getNodeParameter('email', i) as string;\n\t...\n}\n```\n\nUsers can provide data in two ways:\n\n* Entered directly in the node fields\n* By mapping data from earlier nodes in the workflow\n\n`getInputData()`, and the subsequent loop, allows the node to handle situations where data comes from a previous node. This includes supporting multiple inputs. This means that if, for example, the previous node outputs contact information for five people, your FriendGrid node can create five contacts."
}