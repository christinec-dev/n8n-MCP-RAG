{
  "source": "docs/integrations/creating-nodes/build/declarative-style-node.md",
  "index": 7,
  "content": "### Step 3: Create the node\n\nEvery node must have a base file. Refer to [Node base file](/integrations/creating-nodes/build/reference/node-base-files/index.md) for detailed information about base file parameters.\n\nIn this example, the file is `NasaPics.node.ts`. To keep this tutorial short, you'll place all the node functionality in this one file. When building more complex nodes, you should consider splitting out your functionality into modules. Refer to [Node file structure](/integrations/creating-nodes/build/reference/node-file-structure.md) for more information.\n\n#### Step 3.1: Imports\n\nStart by adding the import statements:\n\n```typescript\nimport { INodeType, INodeTypeDescription } from 'n8n-workflow';\n```\n\n#### Step 3.2: Create the main class\n\nThe node must export an interface that implements INodeType. This interface must include a `description` interface, which in turn contains the `properties` array.\n\n/// note | Class names and file names\nMake sure the class name and the file name match. For example, given a class `NasaPics`, the filename must be `NasaPics.node.ts`.\n///\n```typescript\nexport class NasaPics implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\t// Basic node details will go here\n\t\tproperties: [\n\t\t// Resources and operations will go here\n\t\t]\n\t};\n}\n```\n\n#### Step 3.3: Add node details\n\nAll nodes need some basic parameters, such as their display name, icon, and the basic information for making a request using the node. Add the following to the `description`:\n\n```typescript\ndisplayName: 'NASA Pics',\nname: 'NasaPics',\nicon: 'file:nasapics.svg',\ngroup: ['transform'],\nversion: 1,\nsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\ndescription: 'Get data from NASAs API',\ndefaults: {\n\tname: 'NASA Pics',\n},\ninputs: ['main'],\noutputs: ['main'],\ncredentials: [\n\t{\n\t\tname: 'NasaPicsApi',\n\t\trequired: true,\n\t},\n],\nrequestDefaults: {\n\tbaseURL: 'https://api.nasa.gov',\n\theaders: {\n\t\tAccept: 'application/json',\n\t\t'Content-Type': 'application/json',\n\t},\n},\n```\n\nn8n uses some of the properties set in `description` to render the node in the Editor UI. These properties are `displayName`, `icon`, `description`, and `subtitle`.\n\n#### Step 3.4: Add resources\n\nThe resource object defines the API resource that the node uses. In this tutorial, you're creating a node to access two of NASA's API endpoints: `planetary/apod` and `mars-photos`. This means you need to define two resource options in `NasaPics.node.ts`. Update the `properties` array with the resource object:\n\n```typescript\nproperties: [\n\t{\n\t\tdisplayName: 'Resource',\n\t\tname: 'resource',\n\t\ttype: 'options',\n\t\tnoDataExpression: true,\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Astronomy Picture of the Day',\n\t\t\t\tvalue: 'astronomyPictureOfTheDay',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Mars Rover Photos',\n\t\t\t\tvalue: 'marsRoverPhotos',\n\t\t\t},\n\t\t],\n\t\tdefault: 'astronomyPictureOfTheDay',\n\t},\n\t// Operations will go here\n\n]\n```\n\n`type` controls which UI element n8n displays for the resource, and tells n8n what type of data to expect from the user. `options` results in n8n adding a dropdown that allows users to choose one option. Refer to [Node UI elements](/integrations/creating-nodes/build/reference/ui-elements"
}