{
  "source": "docs/integrations/creating-nodes/build/reference/http-helpers.md",
  "index": 3,
  "content": "## Usage\n\nCall the helper inside the `execute` function. \n\n```typescript\n// If no auth needed\nconst response = await this.helpers.httpRequest(options);\n\n// If auth needed\nconst response = await this.helpers.httpRequestWithAuthentication.call(\n\tthis, \n\t'credentialTypeName', // For example: pipedriveApi\n\toptions,\n);\n```\n\n`options` is an object:\n\n```typescript\n{\n\turl: string;\n\theaders?: object;\n\tmethod?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD';\n\tbody?: FormData | Array | string | number | object | Buffer | URLSearchParams;\n\tqs?: object;\n\tarrayFormat?: 'indices' | 'brackets' | 'repeat' | 'comma';\n\tauth?: {\n\t\tusername: string,\n\t\tpassword: string,\n\t};\n\tdisableFollowRedirect?: boolean;\n\tencoding?: 'arraybuffer' | 'blob' | 'document' | 'json' | 'text' | 'stream';\n\tskipSslCertificateValidation?: boolean;\n\treturnFullResponse?: boolean;\n\tproxy?: {\n\t\thost: string;\n\t\tport: string | number;\n\t\tauth?: {\n\t\t\tusername: string;\n\t\t\tpassword: string;\n\t\t},\n\t\tprotocol?: string;\n\t};\n\ttimeout?: number;\n\tjson?: boolean;\n}\t\n```\n\n`url` is required. The other fields are optional. The default method is `GET`.\n\nSome notes about the possible fields:\n\n- `body`: you can use a regular JavaScript object for JSON payload, a buffer for file uploads, an instance of FormData for `multipart/form-data`, and `URLSearchParams` for `application/x-www-form-urlencoded`.\n- `headers`: a key-value pair.  \n\t* If `body` is an instance of `FormData` then n8n adds `content-type: multipart/form-data` automatically.  \n\t* If `body` is an instance of `URLSearchParams`, then n8n adds `content-type: application/x-www-form-urlencoded`.  \n\t* To override this behavior, set a `content-type` header.\n- `arrayFormat`: if your query string contains an array of data, such as `const qs = {IDs: [15,17]}`, the value of `arrayFormat` defines how n8n formats it.  \n\t* `indices` (default):  `{ a: ['b', 'c'] }` as `a[0]=b&a[1]=c`  \n\t* `brackets`: `{ a: ['b', 'c'] }` as `a[]=b&a[]=c`  \n\t* `repeat`: `{ a: ['b', 'c'] }` as `a=b&a=c`  \n\t* `comma`: `{ a: ['b', 'c'] }` as `a=b,c`\n- `auth`: Used for Basic auth. Provide `username` and `password`. n8n recommends omitting this, and using `helpers.httpRequestWithAuthentication(...)` instead.\n- `disableFollowRedirect`: By default, n8n follows redirects. You can set this to true to prevent this from happening.\n- `skipSslCertificateValidation`: Used for calling HTTPS services without proper certificate\n- `returnFullResponse`: Instead of returning just the body, returns an object with more data in the following format: `{body: body, headers: object, statusCode: 200, statusMessage: 'OK'}`\n- `encoding`: n8n can detect the content type, but you can specify `arrayBuffer` to receive a Buffer you can read from and interact with."
}