{
  "source": "docs/integrations/creating-nodes/build/reference/error-handling.md",
  "index": 6,
  "content": "### Common usage patterns\n\nUse `NodeOperationError` for validating user inputs:\n\n```typescript\nconst email = this.getNodeParameter(\"email\", itemIndex) as string;\n\nif (email.indexOf(\"@\") === -1) {\n\tconst description = `The email address '${email}' in the 'email' field isn't valid`;\n\tthrow new NodeOperationError(this.getNode(), \"Invalid email address\", {\n\t\tdescription,\n\t\titemIndex, // for multiple items, this will link the error to the specific item\n\t});\n}\n```\n\nWhen processing multiple items, include the item index for better error context:\n\n```typescript\nfor (let i = 0; i < items.length; i++) {\n\ttry {\n\t\t// Process item\n\t\tconst result = await processItem(items[i]);\n\t\treturnData.push(result);\n\t} catch (error) {\n\t\tif (this.continueOnFail()) {\n\t\t\treturnData.push({\n\t\t\t\tjson: { error: error.message },\n\t\t\t\tpairedItem: { item: i },\n\t\t\t});\n\t\t\tcontinue;\n\t\t}\n\n\t\tthrow new NodeOperationError(this.getNode(), error as Error, {\n\t\t\tdescription: error.description,\n\t\t\titemIndex: i,\n\t\t});\n\t}\n}\n```"
}