{
  "source": "docs/data/data-mapping/data-item-linking/item-linking-errors.md",
  "index": 2,
  "content": "# Item linking errors\n\nIn n8n you can reference data from any previous node. This doesn't have to be the node just before: it can be any previous node in the chain. When referencing nodes further back, you use the expression syntax `$(node_name).item`. \n\n<figure markdown>\n![A diagram showing the threads linking multiple items back through a workflow](/_images/data/data-mapping/data-item-linking/item-linking-multiple-lines.png)\n<figcaption markdown>Diagram of threads for different items. Due to the item linking, you can get the actor for each movie using `$('Get famous movie actors').item`.</figcaption>\n</figure>\n\nSince the previous node can have multiple items in it, n8n needs to know which one to use. When using `.item`, n8n figures this out for you behind the scenes. Refer to [Item linking concepts](/data/data-mapping/data-item-linking/item-linking-concepts.md) for detailed information on how this works.\n\n`.item` fails if information is missing. To figure out which item to use, n8n maintains a thread back through the workflow's nodes for each item. For a given item, this thread tells n8n which items in previous nodes generated it. To find the matching item in a given previous node, n8n follows this thread back until it reaches the node in question.\n\nWhen using `.item`, n8n displays an error when:\n\n- The thread is broken\n- The thread points to more than one item in the previous node (as it's unclear which one to use)\n\nTo solve these errors, you can either avoid using `.item`, or fix the root cause.\n\nYou can avoid `.item` by using `.first()`, `.last()` or `.all()[index]` instead. They require you to know the position of the item that youâ€™re targeting within the target node's output items. Refer to [Built in methods and variables | Output of other nodes](/code/builtin/output-other-nodes.md) for more detail on these methods.\n\nThe fix for the root cause depends on the exact error."
}